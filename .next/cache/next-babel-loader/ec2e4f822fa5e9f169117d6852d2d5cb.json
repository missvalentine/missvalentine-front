{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport dynamic from 'next/dynamic';\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport classNames from 'classnames';\nconst Tabs = dynamic(() => import('./Tabs'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./Tabs')],\n    modules: ['./Tabs']\n  }\n});\nconst TitleList = dynamic(() => import('./TItleList'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./TItleList')],\n    modules: ['./TItleList']\n  }\n});\nconst Heading = dynamic(() => import('./Heading'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./Heading')],\n    modules: ['./Heading']\n  }\n});\nimport { Rate, Modal } from 'antd';\nimport moment from 'moment';\nimport projectSettings from '../constants/projectSettings';\nimport { getProductTitle, getProductShortDesc } from '../services/helpers/product';\nconst ProductRating = dynamic(() => import('../components/ProductRating'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../components/ProductRating')],\n    modules: ['../components/ProductRating']\n  }\n});\nimport { TabContent, TabPane } from 'reactstrap';\n\nconst ProductDetailsTab = ({\n  product,\n  versions,\n  parentClass,\n  reviews,\n  allProducts\n}) => {\n  const {\n    0: numPages,\n    1: setNumPages\n  } = useState(null);\n  const {\n    0: pageNumber,\n    1: setPageNumber\n  } = useState(1);\n\n  function onDocumentLoadSuccess({\n    numPages\n  }) {\n    setNumPages(numPages);\n  }\n\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const componentClass = `c-product-details-tab`;\n  const versionClass = versions.map(el => `${componentClass}--${el}`).join(' ');\n  const parent = `${parentClass}__${componentClass.replace('c-', '')}`;\n  const {\n    0: currentTab,\n    1: setCurrentTab\n  } = useState('0');\n  const className = classNames(componentClass, 'text-left', {\n    [versionClass]: versions,\n    [parent]: parentClass\n  });\n  const {\n    totalcbdmg,\n    cbdperunitmg,\n    servings,\n    servingsize,\n    direction,\n    warning,\n    storage,\n    indication,\n    warranty,\n    use\n  } = product;\n\n  const getAvg = reviews => {\n    if (reviews) {\n      const newArr = reviews.map(el => el.overall);\n      const sum = newArr.reduce((a, b) => a + b, 0);\n      return (sum / reviews.length).toFixed(1);\n    }\n\n    return 0;\n  }; // console.log({\n  //   product,\n  // });\n\n\n  const avgReview = isNaN(getAvg(reviews)) ? 0 : getAvg(reviews);\n  const totalReview = reviews && reviews.length || 0;\n  const productFaq = product.faqcontent && product.faqcontent.filter(faq => faq.title !== '' && faq.description !== '');\n  const tabs = [{\n    title: 'Details',\n    content: '' // content: <TabContainer>\n    //     <div className=\"col-lg-4 col-md-6 c-product-details-tab__contain-col\">\n    //         <TitleList parentClass=\"c-product-details-tab\" title=\"Total Cbd\" >\n    //             {`${totalcbdmg} mg`}\n    //         </TitleList>\n    //         <TitleList parentClass=\"c-product-details-tab\" title={\"Cbd per unit\"} >\n    //             {cbdperunitmg}\n    //         </TitleList>\n    //     </div>\n    //     <div className=\"col-lg-4 col-md-6 c-product-details-tab__contain-col\">\n    //         <TitleList parentClass=\"c-product-details-tab\" title=\"Total Servings\" >\n    //             {servings}\n    //         </TitleList>\n    //         <TitleList parentClass=\"c-product-details-tab\" title=\"Servings Size\" >\n    //             {servingsize}\n    //         </TitleList>\n    //     </div>\n    // </TabContainer>\n\n  }, {\n    title: 'How to use',\n    content: '' // content: <TabContainer>\n    //     <div className=\"col-12 c-product-details-tab__contain-col text-center\">\n    //         <Heading parentClass={componentClass} h=\"4\" subHeading={true} >Suggested Use</Heading>\n    //         <p className={`${componentClass}__text`} >{direction}</p>\n    //     </div>\n    // </TabContainer>\n\n  }, {\n    title: 'Reviews',\n    content: '' //     content: <TabContainer>\n    //     <div className=\"col-12 c-product-details-tab__contain-col text-center\">\n    //         {/* <Heading parentClass={componentClass} h=\"4\" subHeading={true} >Suggested Use</Heading>\n    //         <p className={`${componentClass}__text`} >{direction}</p> */}\n    //         <div className=\"row\">\n    //             <div className=\"col-lg-8 col-md-9\">\n    //                 {reviews && reviews.map((el, key)=> <TitleList key={key} title={el.title} >\n    //                     {el.content}\n    //                 </TitleList>)}\n    //             </div>\n    //             <div className=\"col-lg-4 col-md-3\">\n    //                 <Rate\n    //                     style={{ color: '#000' }}\n    //                     className=\"c-product-details-tab__stars\"\n    //                     disabled value={avgReview}\n    //                     allowHalf={true} />\n    //                 <p className=\"c-product-details-tab__review-para\">({totalReview} reviews)</p>\n    //                 <h1 className=\"c-product-details-tab__review-heading\">{avgReview}</h1>\n    //             </div>\n    //         </div>\n    //     </div>\n    // </TabContainer>\n\n  }, {\n    title: \"FAQ's\",\n    content: '' //     content: <TabContainer>\n    //     <div className=\"col-12 c-product-details-tab__contain-col text-center\">\n    //         <div className=\"row\">\n    //             <div className=\"col-lg-8 col-md-9\">\n    //                 {product.faqcontent && product.faqcontent.map((el, key)=> <TitleList key={key} title={el.title} >\n    //                     {el.description}\n    //                 </TitleList>)}\n    //             </div>\n    //         </div>\n    //     </div>\n    // </TabContainer>\n\n  } // {\n  //     title: \"Quality Sheet\",\n  //     content: \"\",\n  // //     content: <TabContainer>\n  // //     <div className=\"col-12 c-product-details-tab__contain-col text-center\">\n  // //         <div className=\"row\">\n  // //             <div className=\"col-lg-8 col-md-9\">\n  // //                 {product.faqcontent && product.faqcontent.map((el, key)=> <TitleList key={key} title={el.title} >\n  // //                     {el.description}\n  // //                 </TitleList>)}\n  // //             </div>\n  // //         </div>\n  // //     </div>\n  // // </TabContainer>\n  // },\n  ];\n  const allTabs = product.labsheet ? [...tabs, {\n    title: 'Quality sheet',\n    content: ''\n  }] : tabs; // console.log(currentTab)\n\n  return __jsx(\"div\", {\n    className: className\n  }, __jsx(Tabs, {\n    tabs: allTabs,\n    activeKey: currentTab,\n    onNextClick: e => {\n      setCurrentTab(`${parseInt(currentTab) + 1}`);\n    },\n    onPrevClick: e => {\n      setCurrentTab(`${parseInt(currentTab) - 1}`);\n    },\n    onChange: (e, a) => {\n      setCurrentTab(e);\n\n      if (e === '4') {\n        //  console.log(product.labsheet)\n        // if (typeof window !== \"undefined\") {\n        //   window.location.href = \"https://admin.cbdbene.com/images/uploads/BENE 001 CBD Gel Caps 25mg cbd 10mg curcumin(CoAs)-1603786893637.pdf\";\n        // }\n        setOpen(true);\n      }\n    },\n    parentClass: componentClass\n  }), __jsx(TabContent, {\n    activeTab: currentTab\n  }, __jsx(TabPane, {\n    tabId: \"0\"\n  }, __jsx(TabContainer, {\n    isActive: currentTab === '0'\n  }, product.combo ? __jsx(\"div\", {\n    className: \"col-12\"\n  }, __jsx(\"div\", {\n    className: \"row justify-content-center\"\n  }, __jsx(\"div\", {\n    className: \"col-lg-10\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, product.products.map(item => {\n    const productItem = allProducts.find(product => product._id === item.combo_pid);\n    if (!productItem) return null;\n    const title = getProductTitle(productItem);\n    const desc = getProductShortDesc(productItem); // console.log({\n    //   productItem,\n    // });\n\n    return __jsx(\"div\", {\n      key: item.combo_pid,\n      className: \"col-lg-6 col-md-6 col-12 c-product-details-tab__contain-col\"\n    }, __jsx(TitleList, {\n      parentClass: \"c-product-details-tab\",\n      versions: ['wide-title', 'height-100p'],\n      title: __jsx(Link, {\n        href: `/shop/${getProductTitle(productItem).replace(/ /g, '-')}`\n      }, __jsx(\"a\", null, title))\n    }, desc));\n  }))))) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"c-product-details-tab__contain-col c-product-details-tab__contain-col--detail\"\n  }, __jsx(TitleList, {\n    parentClass: \"c-product-details-tab\",\n    versions: ['inline', 'new'],\n    title: \"Total CBD\",\n    weight: `${totalcbdmg} mg`\n  }, \"- \", `${totalcbdmg} mg`), __jsx(TitleList, {\n    parentClass: \"c-product-details-tab\",\n    versions: ['inline', 'new'],\n    title: 'CBD/ unit',\n    weight: cbdperunitmg\n  }, \"- \", cbdperunitmg, \" mg\"), __jsx(TitleList, {\n    parentClass: \"c-product-details-tab\",\n    versions: ['inline', 'new'],\n    title: \"Total Servings\",\n    weight: servings\n  }, \"- \", servings), __jsx(TitleList, {\n    parentClass: \"c-product-details-tab\",\n    versions: ['inline', 'new'],\n    title: \"Servings Size\",\n    weight: servingsize\n  }, \"- \", servingsize))))), __jsx(TabPane, {\n    tabId: \"1\"\n  }, __jsx(TabContainer, {\n    isActive: currentTab === '1'\n  }, __jsx(\"div\", {\n    className: \"col-12 c-product-details-tab__contain-col\"\n  }, use && __jsx(TitleList, {\n    parentClass: \"c-product-details-tab\",\n    title: 'Suggested Use'\n  }, use), direction && __jsx(TitleList, {\n    parentClass: \"c-product-details-tab\",\n    title: 'Direction'\n  }, direction), storage && __jsx(TitleList, {\n    parentClass: \"c-product-details-tab\",\n    title: 'Storage'\n  }, storage), warning && __jsx(TitleList, {\n    parentClass: \"c-product-details-tab\",\n    title: 'Warning'\n  }, warning), warranty && __jsx(TitleList, {\n    parentClass: \"c-product-details-tab\",\n    title: 'Warranty'\n  }, warranty)))), __jsx(TabPane, {\n    tabId: \"2\"\n  }, __jsx(TabContainer, {\n    isActive: currentTab === '2'\n  }, __jsx(\"div\", {\n    className: \"col-12 c-product-details-tab__contain-col\"\n  }, totalReview > 0 ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"row w-100\"\n  }, __jsx(\"div\", {\n    className: \"col-lg-8 col-md-9 col-xs-12 w-100\"\n  }, reviews && reviews.map((el, key) => __jsx(TitleList, {\n    key: key,\n    title: el.usermetaid ? el.usermetaid.firstname + ' ' + el.usermetaid.lastname : ''\n  }, el.title, console.log('rattt', el)))), __jsx(\"div\", {\n    className: \"col-lg-4 col-md-3 col-xs-12 col-sm-12  pt-5 rev \"\n  }, __jsx(Rate, {\n    style: {\n      color: '#000'\n    },\n    className: \"c-product-details-tab__stars\",\n    disabled: true,\n    value: avgReview,\n    allowHalf: true\n  }), __jsx(\"p\", {\n    className: \"c-product-details-tab__review-para\",\n    style: {\n      fontSize: '19px'\n    }\n  }, totalReview, \" reviews(\", avgReview, \")\")))) : __jsx(\"div\", {\n    className: \"row pt-5\"\n  }, __jsx(\"div\", {\n    className: \"col-md-10 offset-md-1 text-center\"\n  }, __jsx(Heading, {\n    parentClass: componentClass,\n    h: \"4\",\n    subHeading: true\n  }, \"We don't have any reviews for this product.\")))))), __jsx(TabPane, {\n    tabId: \"3\"\n  }, __jsx(TabContainer, {\n    isActive: currentTab === '3'\n  }, __jsx(\"div\", {\n    className: \"col-12 c-product-details-tab__contain-col text-center\"\n  }, __jsx(\"div\", {\n    className: \"row \"\n  }, productFaq && productFaq.length > 0 ? __jsx(\"div\", {\n    className: \"col-12 col-md-10 text-left pt-5\"\n  }, productFaq.map((el, key) => __jsx(TitleList, {\n    key: key,\n    versions: ['faq'],\n    title: el.title\n  }, el.description))) : __jsx(\"div\", {\n    className: \"col-md-10 offset-md-1 text-center pt-5\"\n  }, __jsx(Heading, {\n    parentClass: componentClass,\n    h: \"4\",\n    subHeading: true\n  }, \"We don't have any faq's for this product.\")))))), __jsx(TabPane, {\n    tabId: \"4\"\n  }, __jsx(TabContainer, {\n    isActive: currentTab === '4'\n  }, __jsx(Modal, {\n    visible: open,\n    onCancel: () => {\n      //  console.log(\"clicked\")\n      setOpen(false);\n      setCurrentTab('0');\n    },\n    style: {\n      width: '500px',\n      height: '500px'\n    }\n  }, product.labsheet && __jsx(\"iframe\", {\n    src: `${projectSettings.baseUrl}/${product.labsheet.replace('public/', '')}`,\n    style: {\n      objectFit: 'contain'\n    },\n    width: \"100%\",\n    height: \"100%\"\n  }))))));\n};\n\nconst TabContainer = ({\n  children,\n  isActive\n}) => {\n  return __jsx(\"div\", {\n    className: classNames('c-product-details-tab__contain animated', {\n      fadeIn: isActive\n    })\n  }, __jsx(\"div\", {\n    className: \"row c-product-details-tab__contain-row\"\n  }, children));\n};\n\nconst ReviewItem = (_ref) => {\n  let {\n    title,\n    content,\n    createdOn,\n    userName,\n    overall\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"title\", \"content\", \"createdOn\", \"userName\", \"overall\"]);\n\n  console.log('rating', props, userName, props.usermetaid);\n  return __jsx(\"div\", {\n    className: \"container rating__wrapper\"\n  }, __jsx(\"div\", {\n    className: \"rating__star\"\n  }, props.usermetaid && __jsx(\"h5\", {\n    className: \"rating__star--name\"\n  }, `${props.usermetaid.firstname} ${props.usermetaid.lastname}` || 'Steve')), __jsx(\"div\", {\n    className: \"rating__text\"\n  }, __jsx(\"h5\", {\n    className: \"rating__text--name\"\n  }, title), __jsx(\"p\", {\n    className: \"rating__text--msg\"\n  }, content)), __jsx(\"div\", {\n    className: \"rating__date\"\n  }, __jsx(\"p\", {\n    className: \"rating__date--msg\"\n  }, moment(createdOn).format('dd, MMMM, YYYY'))));\n};\n\nProductDetailsTab.defaultProps = {\n  versions: [],\n  product: {}\n};\nexport default ProductDetailsTab;","map":null,"metadata":{},"sourceType":"module"}