{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport dynamic from \"next/dynamic\";\nimport { Form, Icon, Row } from \"antd\";\nconst Heading = dynamic(() => import(\"../Heading\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../Heading\")],\n    modules: [\"../Heading\"]\n  }\n});\nconst Input = dynamic(() => import(\"../form-components/Input\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../form-components/Input\")],\n    modules: [\"../form-components/Input\"]\n  }\n});\nimport { connect } from \"react-redux\";\nconst Button = dynamic(() => import(\"../form-components/Button\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../form-components/Button\")],\n    modules: [\"../form-components/Button\"]\n  }\n});\nimport { loginUser, registerUser } from \"../../services/api\";\nimport msgStrings from \"../../constants/msgStrings\";\nimport { toggleRegBar, drawerToDisplay } from \"../../redux/actions/drawers\";\nimport { setUser } from \"../../redux/actions/user\";\nimport regex from \"../../services/helpers/regex\";\nimport reactComponentDebounce from \"react-component-debounce\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport GoogleLogin from \"react-google-login\";\nimport FacebookLogin from \"react-facebook-login\";\nimport { faFacebookF } from \"@fortawesome/free-brands-svg-icons\";\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\nlibrary.add(faFacebookF);\nconst DebounceInput = reactComponentDebounce({\n  valuePropName: \"value\",\n  triggerMs: 1000\n})(Input);\n\nclass LoginForm extends React.Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"handleSubmit\", e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          // console.log(\"Received values of form: \", values);\n          const {\n            email,\n            password\n          } = values;\n          this.setState({\n            isLoading: true,\n            error: null\n          });\n          loginUser({\n            email,\n            password\n          }).then(res => {\n            this.setState({\n              isLoading: false\n            }); //  console.log({ res });\n\n            if (res.status === 200) {\n              if (res.data.status) {\n                this.props.setUser(res.data.user);\n                this.props.toggleRegBar();\n              } else {\n                const {\n                  error,\n                  message\n                } = res.data;\n\n                if (message) {\n                  this.setState({\n                    error: message === \"User not found\" ? msgStrings.LOGIN_ERROR : message\n                  });\n                } else {\n                  this.setState({\n                    error: error\n                  });\n                }\n              }\n            } else {}\n          }).catch(err => {\n            console.log({\n              err\n            });\n            this.setState({\n              isLoading: false\n            });\n          });\n        }\n      });\n    });\n\n    _defineProperty(this, \"responseGoogle\", response => {\n      let socialData;\n\n      let data = _objectSpread({}, response);\n\n      console.log(data);\n\n      if (data.googleId) {\n        const {\n          email,\n          familyName,\n          givenName,\n          googleId\n        } = data.profileObj;\n        socialData = {\n          google: googleId,\n          email,\n          firstname: givenName,\n          lastname: familyName,\n          username: email.split(\"@\")[0]\n        };\n      }\n\n      if (response.graphDomain == \"facebook\") {\n        let {\n          email,\n          id,\n          name\n        } = response;\n        name = name.split(\" \");\n        socialData = {\n          facebook: id,\n          email,\n          username: email.split(\"@\")[0]\n        };\n      } // console.log(socialData);\n\n\n      loginUser(_objectSpread({}, socialData)).then(res => {\n        //   console.log(res);\n        //    console.log({ res });\n        if (res.status === 200) {\n          if (res.data.status) {\n            this.props.setUser(res.data.user);\n            this.props.toggleRegBar(); // this.props.closeDrawer();\n\n            this.setState({\n              isLoading: false\n            });\n          } else {\n            const {\n              error,\n              message\n            } = res.data;\n\n            if (message === \"User not found\") {\n              registerUser(_objectSpread({}, socialData)).then(res => {\n                //   console.log(res);\n                this.setState({\n                  isLoading: false\n                }); //  console.log({ res });\n\n                if (res.status === 200) {\n                  if (res.data.status) {\n                    this.props.setUser(res.data.user);\n                    this.props.toggleRegBar();\n                  } else {\n                    const {\n                      error\n                    } = res.data;\n\n                    if (error.endsWith(\"is already taken\")) {\n                      this.setState({\n                        isAlreadyUser: true\n                      });\n                    } else {\n                      this.setState({\n                        error: res.data.error\n                      });\n                    }\n                  }\n                } else {\n                  this.setState({\n                    error: \"something wrong\"\n                  });\n                }\n              }).catch(err => {\n                console.log({\n                  err\n                });\n                this.setState({\n                  isLoading: false,\n                  error: \"something wrong\"\n                });\n              });\n            } else {\n              this.setState({\n                error: error\n              });\n            }\n          }\n        } else {}\n      }).catch(err => {\n        console.log({\n          err\n        });\n        this.setState({\n          isLoading: false\n        });\n      });\n    });\n\n    this.state = {\n      isLoading: false,\n      error: null,\n      isAlreadyUser: false,\n      isSignedIn: false\n    };\n  }\n\n  render() {\n    // console.log(this.props);\n    const {\n      drawerToDisplay,\n      form: {\n        getFieldDecorator\n      }\n    } = this.props;\n    const {\n      isLoading,\n      error,\n      isAlreadyUser,\n      isSignedIn\n    } = this.state;\n    let finalClass = \"c-login\";\n\n    if (this.props.consult) {\n      finalClass += \" c-userDetails\";\n    }\n\n    return __jsx(\"div\", {\n      className: finalClass\n    }, __jsx(Heading, {\n      parentClass: \"c-login\",\n      className: \"heading\",\n      versions: [\"dark\"]\n    }, isAlreadyUser ? __jsx(\"span\", null, \"Looks like you already\", __jsx(\"br\", null), \"have an account\") : \"welcome back!\"), !isAlreadyUser && __jsx(\"p\", {\n      className: \"c-login__info\"\n    }, \"Please login to your account\"), !isAlreadyUser && __jsx(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"c-ant-from c-login__form\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"email\", {\n      rules: [{\n        required: true,\n        message: \"Please input your e-mail!\"\n      }, {\n        max: 40,\n        message: \"You can't use more than 40 characters.\"\n      }, {\n        pattern: regex.email,\n        message: \"Please enter a valid E-mail!\"\n      }]\n    })(__jsx(DebounceInput, {\n      style: {\n        padding: \"0px\",\n        fontSize: \"16px\",\n        fontFamily: \"futuraBT-book\",\n        marginBottom: \"20px\"\n      },\n      versions: [\"light\"],\n      parentClass: \"c-login\",\n      label: \"E-mail\",\n      className: \"input\"\n    }))), __jsx(Form.Item, null, getFieldDecorator(\"password\", {\n      rules: [{\n        required: true,\n        message: \"Please input your password!\"\n      }, {\n        max: 20,\n        message: \"You can't use more than 20 characters.\"\n      }]\n    })(__jsx(DebounceInput, {\n      style: {\n        padding: \"0px\",\n        fontSize: \"16px\",\n        fontFamily: \"futuraBT-book\",\n        width: \"80%\"\n      },\n      type: \"password\",\n      parentClass: \"c-login\",\n      versions: [\"light\"],\n      label: \"Password\",\n      className: \"input\"\n    }))), __jsx(\"div\", {\n      className: \"c-login__forget\"\n    }, __jsx(\"span\", {\n      onClick: () => {\n        drawerToDisplay(\"forget\");\n      },\n      className: \"c-login__link\"\n    }, \"forgot Password?\")), __jsx(\"div\", {\n      className: \"c-login__error-block\"\n    }, isLoading && __jsx(Icon, {\n      type: \"loading\",\n      className: \"c-login__spinner c-spinner\",\n      style: {\n        fontSize: 24\n      },\n      spin: true\n    }), error && __jsx(\"p\", {\n      className: \"c-login__error\"\n    }, \"Invalid username or password\")), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"c-login__inst\"\n    }, \"Don't have an account yet,\", \" \", __jsx(\"span\", {\n      onClick: () => {\n        drawerToDisplay(\"register\");\n      },\n      className: \"c-login__link\",\n      style: {\n        fontFamily: \"futuraBT-medium\",\n        letterSpacing: \"0.5px\"\n      }\n    }, \"REGISTER\"))), __jsx(\"div\", {\n      className: \"row\",\n      style: {\n        justifyContent: \"space-around\",\n        marginTop: \"25px\"\n      }\n    }, __jsx(Button, {\n      theme: \"dark\",\n      disabled: isLoading\n    }, \"Login\"))), __jsx(\"br\", null), __jsx(Row, {\n      justify: \"center\"\n    }, __jsx(\"p\", {\n      className: \"c-login__inst\"\n    }, \"Login with\", __jsx(\"span\", {\n      // onClick={()=> {\n      //     drawerToDisplay(\"register\")\n      // }}\n      style: {\n        marginLeft: \"8px\",\n        marginRight: \"8px\"\n      },\n      className: \"c-login__link\"\n    }, __jsx(GoogleLogin, {\n      clientId: \"523594328071-mcppgl821vmufbh7ts570533mq7bjc4o.apps.googleusercontent.com\",\n      buttonText: \"\",\n      onSuccess: this.responseGoogle,\n      onFailure: this.responseGoogle,\n      cookiePolicy: \"single_host_origin\",\n      isSignedIn: isSignedIn,\n      render: renderProps => __jsx(\"button\", {\n        onClick: () => {\n          this.setState({\n            isSignedIn: true\n          });\n          renderProps.onClick();\n        },\n        className: \"social-button\"\n      }, __jsx(LazyLoadImage, {\n        src: \"/images/google.svg\",\n        style: {\n          width: \"30px\"\n        }\n      })),\n      theme: \"dark\"\n    })), \"or\", __jsx(FacebookLogin, {\n      appId: \"379779383176561\" //autoLoad={true}\n      ,\n      textButton: \"\",\n      fields: \"name,email,picture\",\n      callback: this.responseGoogle,\n      cssClass: \"social-button\",\n      icon: __jsx(\"span\", {\n        style: {\n          marginLeft: \"9px\",\n          marginRight: \"8px\"\n        },\n        className: \"c-login__link\"\n      }, __jsx(LazyLoadImage, {\n        src: \"/images/facebook.svg\",\n        style: {\n          width: \"30px\"\n        }\n      }))\n    }))), isAlreadyUser && __jsx(\"div\", {\n      className: \"c-login__no-form-wrapper\"\n    }, __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"p\", {\n      className: \"c-login__inst\"\n    }, \"You can login from\", \" \", __jsx(\"span\", {\n      onClick: () => {\n        drawerToDisplay(\"login\");\n      },\n      className: \"c-login__link\"\n    }, \"HERE\"))));\n  }\n\n}\n\nconst Login = Form.create({\n  name: \"login\"\n})(LoginForm);\nconst mapActionToProps = {\n  setUser,\n  toggleRegBar,\n  drawerToDisplay\n};\nexport default connect(state => state, mapActionToProps)(Login);","map":null,"metadata":{},"sourceType":"module"}