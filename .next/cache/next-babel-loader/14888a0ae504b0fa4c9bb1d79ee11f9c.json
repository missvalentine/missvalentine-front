{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport Link from 'next/link';\nimport classNames from 'classnames';\nimport './styles/app.scss';\nimport { toggleCartBar, hideCartBar, toggleRegBar } from '../redux/actions/drawers';\nimport { unsetUser } from '../redux/actions/user';\nimport { Menu, Dropdown } from 'antd';\nimport Input from './form-components/Input';\nimport CartIcon from './CartIcon';\nimport { SearchOutlined } from '@ant-design/icons';\nimport apiList from '../services/apis/apiList';\nimport { getVisibleProducts, addSlugToProduct, getProductTitle, getProductShortDesc, getBasicPrice } from '../services/helpers/product';\nimport projectSettings from '../constants/projectSettings';\nimport CartItem from './CartItem';\nimport { numberFormat } from '../services/helpers/misc';\nconst {\n  SubMenu\n} = Menu;\n\nconst MobileMenu = ({\n  items,\n  user,\n  toggleCartBar,\n  toggleRegBar\n}) => {\n  const {\n    0: isOpen,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: search,\n    1: setSearch\n  } = useState('');\n  const {\n    0: display,\n    1: setDisplay\n  } = useState(false);\n  const {\n    0: products,\n    1: setProducts\n  } = useState([]);\n\n  const onSubmit = e => {\n    //console.log(`${window.location.origin}/search/${search}`);\n    // window.location.href(`${window.location.origin}/search/${search}`)\n    if (e.key === 'Enter') {\n      Router.push(`/search/${search}`);\n    }\n  };\n\n  const menu = __jsx(\"div\", {\n    className: \"search-container\"\n  }, __jsx(Menu, null, __jsx(\"div\", {\n    style: {\n      marginTop: '40px'\n    }\n  }), products.length > 0 ? products.map((product, i) => __jsx(Menu.Item, {\n    style: {\n      height: 'fit-content'\n    },\n    key: i\n  }, __jsx(\"div\", {\n    className: \"c-cart-drawer\"\n  }, __jsx(CartItem, {\n    key: i,\n    title: product.title,\n    image: product.image,\n    subTitle: product.totalcbdmg,\n    price: `$${numberFormat(parseFloat(product.price.sale_price))}`,\n    isSearch: true,\n    clearSearch: () => {\n      setDisplay(false);\n      setSearch('');\n      setProducts([]);\n      Router.push(`/shop/${product.title.replace(/ /g, '-')}`);\n    }\n  })))) : __jsx(SubMenu, null, __jsx(\"h2\", null, \"No records found\"))));\n\n  const filterProducts = async value => {\n    setSearch(value);\n\n    if (value === '') {\n      setDisplay(false);\n      setProducts([]);\n      return;\n    }\n\n    setDisplay(true);\n    const res = await fetch(apiList.getAllProducts);\n    const productList = await res.json();\n    const visibleProducts = getVisibleProducts(productList.products);\n    const newList = visibleProducts.map(el => addSlugToProduct(el));\n    const productsRow = newList.map(el => {\n      return _objectSpread(_objectSpread({}, el), {}, {\n        image: el.productImage ? projectSettings.serverUrl + el.productImage : '//via.placeholder.com/300x500',\n        title: getProductTitle(el),\n        subTitle: getProductShortDesc(el),\n        price: getBasicPrice(el),\n        qty: 1\n      });\n    });\n    const applySearch = productsRow.filter(el => {\n      if (value === '') return false;\n      return el.title.toLowerCase().includes(value.toLowerCase());\n    }); // console.log(applySearch);\n\n    setProducts(applySearch);\n  };\n\n  const onClick = (e, action) => {\n    if (action === \"link\") {}\n\n    if (action === \"cart\") {\n      toggleCartBar(); // setIsCartOpen(!isCartOpen)\n    }\n\n    if (action === \"reg\") {\n      toggleRegBar();\n    }\n\n    if (action === \"logout\") {\n      unsetUser();\n    }\n  };\n\n  return __jsx(\"ul\", {\n    className: \"c-nav__list\"\n  }, items.filter(el => {\n    console.log(el);\n\n    if (user._id) {\n      return el.onlyLogin !== false;\n    } else {\n      return el.onlyLogin !== true;\n    }\n  }).map((el, ind) => __jsx(\"li\", {\n    key: ind,\n    className: classNames(\"c-nav__list-item\", {\n      \"c-nav__list-item--has-sub-menu\": el.subMenus\n    })\n  }, el.action === 'input' ? __jsx(\"div\", {\n    style: {\n      position: 'relative'\n    }\n  }, __jsx(Input, {\n    prefix: __jsx(SearchOutlined, {\n      style: {\n        color: '#aaaaaa'\n      }\n    }),\n    value: search,\n    onChange: e => filterProducts(e.target.value),\n    onKeyDown: onSubmit,\n    label: \"Search\"\n  }), __jsx(Dropdown, {\n    overlayStyle: {\n      position: 'absolute',\n      top: '0 !important',\n      left: '0 !important',\n      width: '400px',\n      height: '500px',\n      overflow: 'scroll'\n    },\n    visible: display // visible={true}\n    ,\n    onVisibleChange: () => setDisplay(!display),\n    overlay: menu\n  }, __jsx(\"a\", {\n    className: \"ant-dropdown-link\",\n    onClick: e => e.preventDefault()\n  }))) : \"\", el.link ? __jsx(Link, {\n    as: el.as || el.link,\n    href: el.link\n  }, __jsx(\"a\", {\n    onClick: e => {\n      onClick(e, el.action);\n    },\n    className: \"c-nav__link\"\n  }, el.label, el.icon)) : __jsx(\"span\", {\n    onClick: e => {\n      onClick(e, el.action);\n    },\n    className: \"c-nav__link\"\n  }, el.label, el.icon), el.subMenus && __jsx(\"ul\", {\n    className: \"c-nav__sub-menu\"\n  }, el.subMenus.map((elx, i) => __jsx(\"li\", {\n    key: i,\n    className: \"c-nav__sub-menu-item\"\n  }, __jsx(Link, {\n    as: elx.as || elx.link,\n    href: elx.link\n  }, __jsx(\"a\", {\n    className: \"c-nav__link c-nav__link--sub\"\n  }, elx.label))))))));\n};\n\nMobileMenu.defaultProps = {\n  items: []\n};\n\nconst mapStateToProps = state => ({\n  isCartOpen: state.drawers.isCartOpen,\n  isRegOpen: state.drawers.isRegOpen,\n  hasLogin: state.drawers.hasLogin,\n  user: state.user\n});\n\nexport default connect(mapStateToProps, {\n  toggleCartBar,\n  hideCartBar,\n  toggleRegBar,\n  unsetUser\n})(MobileMenu);","map":null,"metadata":{},"sourceType":"module"}