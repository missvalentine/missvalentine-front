{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SET_USER, UNSET_USER } from \"./type\";\nimport { getUserDetails } from \"../../services/apis/user\";\nexport const setUser = (user, cart = null) => dispatch => {\n  // console.log({ user });\n  if (user._id) {\n    console.log({\n      user\n    });\n    getUserDetails(user._id).then(res => {\n      console.log({\n        res\n      });\n\n      if (res.data.status && res.data.user) {\n        //   dispatch(getUserMeta(res.data.user._id, cart));\n        const payload = _objectSpread(_objectSpread({}, res.data.user.userid), {}, {\n          userMetaId: res.data.user._id,\n          userMetaObj: res.data.user,\n          userObj: res.data.user.userid\n        });\n\n        dispatch({\n          type: SET_USER,\n          payload\n        });\n\n        if (cart) {\n          setCartApi({\n            usermetaid: res.data.user._id,\n            cart: cart\n          });\n        } else if (res.data.user.cart) {// dispatch({\n          //   type: SET_CART,\n          //   payload: res.data.user.cart\n          // });\n        }\n      }\n    });\n  } else {\n    dispatch({\n      type: SET_USER,\n      payload: user\n    });\n  }\n}; // export const updateUserMeta = userId => {\n//   // console.log(\"get user id \", { userId });\n//   return dispatch => {\n//     console.log({\n//       dispatch\n//     });\n//   };\n// };\n// export const getUserMetaNoCart = user => {\n//   // console.log({\n//   //   user\n//   // });\n//   return dispatch => {\n//     console.log(\"user meta start fetching\");\n//     getSingleUserApi(user)\n//       .then(res => res.json())\n//       .then(res => {\n//         if (res.user && res.user._id) {\n//           console.log(\"user meta found\", res);\n//           dispatch({\n//             type: SET_USER,\n//             payload: {\n//               ...res.user.userid,\n//               userMetaId: res.user._id,\n//               userMetaObj: res.user\n//             }\n//           });\n//         }\n//       });\n//   };\n// };\n// export const getUserMeta = (user, cart = null) => dispatch => {\n//   getSingleUserApi(user)\n//     .then(res => res.json())\n//     .then(res => {\n//       if (res.user && res.user._id) {\n//         dispatch({\n//           type: SET_USER,\n//           payload: {\n//             ...res.user.userid,\n//             userMetaId: res.user._id,\n//             userMetaObj: res.user\n//           }\n//         });\n//       }\n//       if (cart && res.user && res.user._id) {\n//         setCartApi({\n//           usermetaid: res.user._id,\n//           cart: cart\n//         });\n//       } else if (res.user && res.user.cart) {\n//         dispatch({\n//           type: SET_CART,\n//           payload: res.user.cart\n//         });\n//       }\n//     });\n// };\n\nexport const unsetUser = () => ({\n  type: UNSET_USER,\n  payload: {}\n});","map":null,"metadata":{},"sourceType":"module"}