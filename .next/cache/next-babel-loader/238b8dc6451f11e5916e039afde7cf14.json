{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { connect } from 'react-redux';\nimport { setReferrer } from '../redux/actions';\nimport { makeCancelable } from \"../services/makeCancelable\";\nimport BasicFunction from \"../services/extra/basicFunction\";\nimport { addAmbassador } from \"../services/api\";\nvar basicFunction = new BasicFunction();\n\nvar AppWrapper = /*#__PURE__*/function (_React$Component) {\n  _inherits(AppWrapper, _React$Component);\n\n  var _super = _createSuper(AppWrapper);\n\n  function AppWrapper() {\n    _classCallCheck(this, AppWrapper);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AppWrapper, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.referrerSetting();\n\n      if (typeof this.props.router !== \"undefined\") {\n        var _this$props$router = this.props.router,\n            query = _this$props$router.query,\n            asPath = _this$props$router.asPath;\n\n        if (query.ref) {}\n      }\n    }\n  }, {\n    key: \"referrerSetting\",\n    value: function referrerSetting() {\n      var _this = this;\n\n      if (true) {\n        var _window$location = window.location,\n            href = _window$location.href,\n            pathname = _window$location.pathname;\n        var _this$props = this.props,\n            _setReferrer = _this$props.setReferrer,\n            referrer = _this$props.referrer;\n        var url = new URL(window.location.href);\n        var ambassador_id = url.searchParams.get(\"ref\");\n        var referralUrl = referrer.referralUrl ? referrer.referralUrl : document.referrer;\n        var cUrl = href;\n        var originalUrl = basicFunction.removeParams(cUrl, \"ref\");\n\n        if (referralUrl) {\n          if (referralUrl.includes(window.origin)) {\n            referralUrl = \"\";\n          }\n        }\n\n        if (ambassador_id) {\n          _setReferrer({\n            ambassadorId: ambassador_id,\n            ambassadorUrl: referralUrl,\n            referralUrl: referralUrl\n          });\n\n          this.cancelableRef = makeCancelable(addAmbassador({\n            ambass_id: ambassador_id,\n            url: originalUrl,\n            refer_url: referralUrl\n          }), function (res) {\n            var resJson = res.data;\n\n            if (resJson.status) {\n              _setReferrer({\n                referralUrl: null\n              });\n\n              if (resJson.referral) {\n                _setReferrer({\n                  referralUrlId: resJson.referral._id\n                });\n              }\n            } else {\n              _this.setState({\n                modal: true,\n                affMsg: \"Invalid Referral Url .\"\n              }); //   setTimeout(() => {\n              //     this.props.history.push(url)                      this.props.history.push(url);\n              //   }, 2000);\n\n            }\n          }, function (err) {\n            _this.setState({\n              modal: true,\n              affMsg: \"Invalid Referral Url .\"\n            });\n\n            setTimeout(function () {\n              _this.props.history.push(url);\n            }, 2000);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(React.Fragment, null, this.props.children);\n    }\n  }]);\n\n  return AppWrapper;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    referrer: state.referrer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setReferrer: setReferrer\n})(AppWrapper);","map":null,"metadata":{},"sourceType":"module"}