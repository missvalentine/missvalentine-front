{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SET_WISHLIST, UNSET_WISHLIST } from \"./type\";\n\nconst wishListParser = wishList => wishList.map(el => {\n  if (el.productDetails) {\n    const {\n      productDetails\n    } = el;\n\n    if (productDetails.combo) {\n      const {\n        comboid\n      } = productDetails; // const productSlug = encodeUrlFn(comboid.title);\n\n      return _objectSpread(_objectSpread({}, el), {}, {\n        productDetails: _objectSpread(_objectSpread({}, productDetails), {}, {\n          comboid: _objectSpread({}, comboid)\n        })\n      });\n    } else if (productDetails.productid) {\n      const {\n        productid\n      } = productDetails; // const productSlug = encodeUrlFn(productid.producttitle);\n\n      return _objectSpread(_objectSpread({}, el), {}, {\n        productDetails: _objectSpread(_objectSpread({}, productDetails), {}, {\n          productid: _objectSpread({}, productid)\n        })\n      });\n    } else {\n      return el;\n    }\n  }\n\n  return el;\n});\n\nexport const setWishList = wishList => dispatch => {\n  const newWishList = wishListParser(wishList);\n  dispatch({\n    type: SET_WISHLIST,\n    payload: newWishList\n  });\n};\nexport const unsetWishList = () => ({\n  type: UNSET_WISHLIST,\n  payload: {}\n});","map":null,"metadata":{},"sourceType":"module"}