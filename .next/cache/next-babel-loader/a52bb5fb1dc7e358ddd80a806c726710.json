{"ast":null,"code":"import Moment from 'moment';\nimport * as MomentRange from 'moment-range';\nvar moment = MomentRange.extendMoment(Moment);\nexport var getValidValue = function getValidValue(value) {\n  return value && value.trim() !== \"\" && value.trim() !== \"not found\" ? value : \"\";\n};\nexport var getName = function getName(doctor) {\n  var basic = doctor.basic;\n  if (!basic) return \"No Name\";\n  var name_prefix = basic.name_prefix,\n      name = basic.name,\n      credential = basic.credential;\n  var nameVal = getValidValue(name);\n  var name_prefixVal = getValidValue(name_prefix);\n  var credentialVal = getValidValue(credential);\n  var wholeName = \"\".concat(name_prefixVal, \" \").concat(nameVal, \"  \").concat(credentialVal);\n  if (wholeName.trim() === \"\") return \"No Name\";\n  return wholeName;\n};\nexport var getSlug = function getSlug(doctor) {\n  return doctor._id; // const {\n  //   basic\n  // } = doctor\n  // if (!basic)\n  //   return \"no-slug\"\n  // const {\n  //   name_prefix,\n  //   name,\n  //   credential\n  // } = basic\n  // var nameVal = getValidValue(name);\n  // nameVal = nameVal.replace(\" \", \"-\");\n  // const wholeName = `${nameVal}`\n  // if (wholeName.trim() === \"\")\n  //   return \"No Name\"\n  // return wholeName\n};\nexport var getAddress = function getAddress(doctor) {\n  var address = doctor.address;\n  if (!address) return \"\";\n  if (address.length < 1) return \"\";\n  var _address$ = address[0],\n      address_1 = _address$.address_1,\n      address_2 = _address$.address_2,\n      city = _address$.city,\n      country_name = _address$.country_name,\n      postal_code = _address$.postal_code,\n      telephone_number = _address$.telephone_number;\n  var address_1Val = getValidValue(address_1);\n  var address_2Val = getValidValue(address_2);\n  var cityVal = getValidValue(city);\n  var country_nameVal = getValidValue(country_name);\n  var postal_codeVal = getValidValue(postal_code);\n  var telephone_numberVal = getValidValue(telephone_number);\n  var wholeAddress = [address_1Val, address_2Val, cityVal, country_nameVal, postal_codeVal, telephone_numberVal].filter(function (el) {\n    return el && el.trim() !== \"\";\n  }).join(\", \");\n  return wholeAddress;\n};\nexport var getTaxonomy = function getTaxonomy(doctor) {\n  var taxonomies = doctor.taxonomies;\n  if (!taxonomies) return \"\";\n  if (taxonomies.length < 1) return \"\";\n  var desc = taxonomies[0].desc;\n  return getValidValue(desc);\n};\nexport var removeDublecatVale = function removeDublecatVale(originalArray, key) {\n  var newArray = [];\n  var lookupObject = {};\n\n  for (var i in originalArray) {\n    lookupObject[originalArray[i][key]] = originalArray[i];\n  }\n\n  for (i in lookupObject) {\n    newArray.push(lookupObject[i]);\n  }\n\n  return newArray;\n};\nexport var getAppointmentsOfDate = function getAppointmentsOfDate() {\n  var appointments = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var date = arguments.length > 1 ? arguments[1] : undefined;\n  return appointments.filter(function (el) {\n    return moment(el.bookedFor).isSame(date, \"day\");\n  });\n};\nexport var getDoctorTimeLine = function getDoctorTimeLine(_ref) {\n  var timeSlot = _ref.timeSlot,\n      allAppointments = _ref.allAppointments,\n      date = _ref.date;\n  var appointment = getAppointmentsOfDate(allAppointments, date);\n\n  if (appointment.length < 1) {\n    return {\n      status: false\n    };\n  }\n\n  var moments = appointment.map(function (el) {\n    return moment(el.bookedFor);\n  });\n  var max = moment.max(moments).format(\"HH\");\n  var min = moment.min(moments).format(\"HH\");\n  var day_start = moment().startOf('day').hours(parseInt(min));\n  var day_end = moment().startOf('day').hours(parseInt(max));\n  var day = moment.range(day_start, day_end); // console.clear()\n  // console.log({\n  //   day: Array.from(day.by('minutes', {step: timeSlot})).map(el => el.format(\"HH:mm\"))\n  // })\n\n  return {\n    status: true,\n    dates: Array.from(day.by('minutes', {\n      step: timeSlot\n    }))\n  };\n};","map":{"version":3,"sources":["/Users/akshataggarwal/Documents/Coding Files/webd projects/missnew front/services/helpers/DoctorHelpers.js"],"names":["Moment","MomentRange","moment","extendMoment","getValidValue","value","trim","getName","doctor","basic","name_prefix","name","credential","nameVal","name_prefixVal","credentialVal","wholeName","getSlug","_id","getAddress","address","length","address_1","address_2","city","country_name","postal_code","telephone_number","address_1Val","address_2Val","cityVal","country_nameVal","postal_codeVal","telephone_numberVal","wholeAddress","filter","el","join","getTaxonomy","taxonomies","desc","removeDublecatVale","originalArray","key","newArray","lookupObject","i","push","getAppointmentsOfDate","appointments","date","bookedFor","isSame","getDoctorTimeLine","timeSlot","allAppointments","appointment","status","moments","map","max","format","min","day_start","startOf","hours","parseInt","day_end","day","range","dates","Array","from","by","step"],"mappings":"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","sourcesContent":["import Moment from 'moment'\nimport * as MomentRange from 'moment-range'\nconst moment = MomentRange.extendMoment(Moment);\nexport const getValidValue = value => (value && value.trim() !== \"\" && value.trim() !== \"not found\") ? value : \"\"\n\nexport const getName = doctor => {\n  const {\n    basic\n  } = doctor\n  if (!basic)\n    return \"No Name\"\n\n  const {\n    name_prefix,\n    name,\n    credential\n  } = basic\n  const nameVal = getValidValue(name)\n  const name_prefixVal = getValidValue(name_prefix)\n  const credentialVal = getValidValue(credential)\n\n  const wholeName = `${name_prefixVal} ${nameVal}  ${credentialVal}`\n\n  if (wholeName.trim() === \"\")\n    return \"No Name\"\n\n  return wholeName\n}\n\nexport const getSlug = doctor => {\n  return doctor._id\n  // const {\n  //   basic\n  // } = doctor\n  // if (!basic)\n  //   return \"no-slug\"\n\n  // const {\n  //   name_prefix,\n  //   name,\n  //   credential\n  // } = basic\n  // var nameVal = getValidValue(name);\n  // nameVal = nameVal.replace(\" \", \"-\");\n  // const wholeName = `${nameVal}`\n  \n  // if (wholeName.trim() === \"\")\n  //   return \"No Name\"\n\n  // return wholeName\n}\n\n\n\nexport const getAddress = doctor => {\n  const {\n    address\n  } = doctor\n  if (!address)\n    return \"\"\n  if (address.length < 1)\n    return \"\"\n\n  const {\n    address_1,\n    address_2,\n    city,\n    country_name,\n    postal_code,\n    telephone_number\n  } = address[0]\n  const address_1Val = getValidValue(address_1)\n  const address_2Val = getValidValue(address_2)\n  const cityVal = getValidValue(city)\n  const country_nameVal = getValidValue(country_name)\n  const postal_codeVal = getValidValue(postal_code)\n  const telephone_numberVal = getValidValue(telephone_number)\n  const wholeAddress = [\n    address_1Val,\n    address_2Val,\n    cityVal,\n    country_nameVal,\n    postal_codeVal,\n    telephone_numberVal,\n  ].filter(el => (el && el.trim() !== \"\")).join(\", \")\n\n  return wholeAddress\n}\n\nexport const getTaxonomy = doctor => {\n  const {\n    taxonomies\n  } = doctor\n  if (!taxonomies )\n    return \"\"\n  if(taxonomies.length < 1)\n    return \"\"\n  const {\n    desc\n  } = taxonomies[0]\n  return getValidValue(desc)\n}\n\n\nexport const removeDublecatVale = (originalArray,key) =>{\n  var newArray = [];\n     var lookupObject  = {};\n     for(var i in originalArray) {\n        lookupObject[originalArray[i][key]] = originalArray[i];\n     }\n\n     for(i in lookupObject) {\n         newArray.push(lookupObject[i]);\n     }\n      return newArray;\n}\n\nexport const getAppointmentsOfDate = (appointments = [], date)=> \n  appointments.filter(el => moment(el.bookedFor).isSame(date, \"day\"))\n\nexport const getDoctorTimeLine = ({\n  timeSlot,\n  allAppointments,\n  date\n}) => {\n  const appointment = getAppointmentsOfDate(allAppointments, date)\n  if(appointment.length < 1){\n    return {\n      status: false\n    }\n  }\n  const moments = appointment.map(el => moment(el.bookedFor))\n  const max = moment.max(moments).format(\"HH\")\n  const min = moment.min(moments).format(\"HH\")\n  const day_start = moment().startOf('day').hours(parseInt(min))\n  const day_end = moment().startOf('day').hours(parseInt(max))\n  const day = moment.range(day_start, day_end)\n  // console.clear()\n  // console.log({\n  //   day: Array.from(day.by('minutes', {step: timeSlot})).map(el => el.format(\"HH:mm\"))\n  // })\n  return {\n    status: true,\n    dates: Array.from(day.by('minutes', {step: timeSlot}))\n  }\n}"]},"metadata":{},"sourceType":"module"}