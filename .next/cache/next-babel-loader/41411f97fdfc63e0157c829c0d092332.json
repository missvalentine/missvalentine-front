{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_CARDS, SET_ERRORS, CLEAR_ERRORS, SET_USER } from \"./type\";\nimport { authorizeAddCard, updateUserDetails, getUserDetails, authorizeDeleteCard } from \"../../services/api\";\nexport var setCards = function setCards(payload) {\n  return {\n    type: SET_CARDS,\n    payload: payload\n  };\n};\nexport var getCards = function getCards(id) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              getUserDetails(id).then(function (resRaw) {\n                var res = resRaw.data;\n                console.log(res);\n                var cards = returnCards(res);\n                dispatch(setCards(cards));\n              })[\"catch\"](function (err) {\n                return console.log({\n                  err: err\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var addCardAuthorize = function addCardAuthorize(data) {\n  return function (dispatch) {\n    var user = data.user,\n        card = data.card,\n        bank = data.bank,\n        oldCards = data.oldCards;\n    var userMetaId = user.userMetaId,\n        _id = user._id,\n        userMetaObj = user.userMetaObj;\n    console.log({\n      data: data,\n      dispatch: dispatch\n    });\n\n    var sendCardDetails = function sendCardDetails(customData, userId) {\n      console.log({\n        customData: customData,\n        userId: userId\n      });\n      authorizeAddCard(customData).then(function (response) {\n        var res = response.data;\n        var status = res.status,\n            card = res.card;\n\n        if (status && card && card.paymentProfile && card.messages && card.messages.resultCode === \"Ok\") {\n          //   if (userId) {\n          //     updateUserMeta(userId);\n          //   }\n          var _card$paymentProfile = card.paymentProfile,\n              customerProfileId = _card$paymentProfile.customerProfileId,\n              customerPaymentProfileId = _card$paymentProfile.customerPaymentProfileId,\n              payment = _card$paymentProfile.payment;\n\n          var newCard = _objectSpread({\n            customerProfileId: customerProfileId,\n            customerPaymentProfileId: customerPaymentProfileId\n          }, payment);\n\n          var allCardsPre = oldCards ? [].concat(_toConsumableArray(oldCards), [newCard]) : [newCard];\n          var defaultCard = allCardsPre.find(function (el) {\n            return el.isDefault === true;\n          });\n          var allCards = allCardsPre.map(function (el, index) {\n            if (index === 0 && !defaultCard) return _objectSpread(_objectSpread({}, el), {}, {\n              isDefault: true\n            });\n            return el;\n          });\n          updateUserDetails({\n            userid: _id,\n            carddetails: {\n              cards: allCards\n            }\n          }).then(function (response) {\n            console.log({\n              response: response\n            });\n            var res = response.data;\n            var cards = returnCards(res);\n            dispatch(setCards(cards)); // getUserMetaNoCart(userId);\n\n            dispatch({\n              type: CLEAR_ERRORS,\n              payload: {}\n            });\n            getUserDetails(userId).then(function (response) {\n              var res = response.data;\n\n              if (res.user && res.user._id) {\n                console.log(\"user meta found\", res);\n                dispatch({\n                  type: SET_USER,\n                  payload: _objectSpread(_objectSpread({}, res.user.userid), {}, {\n                    userMetaId: res.user._id,\n                    userMetaObj: res.user\n                  })\n                });\n              }\n            });\n          })[\"catch\"](function (err) {\n            dispatch({\n              type: SET_ERRORS,\n              payload: {\n                cards: [\"Some thing wrong\"]\n              }\n            });\n            getUserDetails(userId).then(function (response) {\n              var res = response.data;\n\n              if (res.user && res.user._id) {\n                console.log(\"user meta found\", res);\n                dispatch({\n                  type: SET_USER,\n                  payload: _objectSpread(_objectSpread({}, res.user.userid), {}, {\n                    userMetaId: res.user._id,\n                    userMetaObj: res.user\n                  })\n                });\n              }\n            });\n            console.log({\n              err: err\n            });\n          });\n          console.log({\n            customerProfileId: customerProfileId,\n            customerPaymentProfileId: customerPaymentProfileId,\n            payment: payment,\n            customData: customData\n          });\n        } else {\n          dispatch({\n            type: SET_ERRORS,\n            payload: {\n              cards: [\"Some thing wrong\"]\n            }\n          });\n        }\n      });\n    };\n\n    var chooseCardOrBank = function chooseCardOrBank(userMetaId, userMetaObj) {\n      var customerProfile = userMetaObj.customerProfile;\n\n      if (customerProfile) {\n        if (card) {\n          var cardnumber = card.cardnumber,\n              cvc = card.cvc,\n              expmonth = card.expmonth,\n              expyear = card.expyear;\n          var creditcard = {\n            cardNumber: cardnumber.split(\"-\").join(\"\"),\n            expirationDate: \"20\".concat(expyear, \"-\").concat(expmonth),\n            cardCode: cvc\n          };\n          sendCardDetails({\n            creditcard: creditcard,\n            profileid: customerProfile\n          });\n        } else if (bank) {\n          sendCardDetails({\n            bank: bank,\n            profileid: customerProfile\n          });\n        }\n      } else {\n        if (card) {\n          var _cardnumber = card.cardnumber,\n              _cvc = card.cvc,\n              _expmonth = card.expmonth,\n              _expyear = card.expyear;\n          var _creditcard = {\n            cardNumber: _cardnumber.split(\"-\").join(\"\"),\n            expirationDate: \"20\".concat(_expyear, \"-\").concat(_expmonth),\n            cardCode: _cvc\n          };\n          var userMetaIdId = userMetaId._id ? userMetaId._id : typeof userMetaId === \"string\" && userMetaId;\n          sendCardDetails({\n            creditcard: _creditcard,\n            email: userMetaIdId + \"@cbdbene.com\",\n            metaid: userMetaIdId\n          }, _id);\n        } else if (bank) {\n          var _userMetaIdId = userMetaId._id ? userMetaId._id : typeof userMetaId === \"string\" && userMetaId;\n\n          sendCardDetails({\n            bank: bank,\n            email: _userMetaIdId + \"@cbdbene.com\",\n            metaid: _userMetaIdId\n          }, _id);\n        }\n      }\n    };\n\n    if (userMetaObj && userMetaId) {\n      chooseCardOrBank(userMetaId, userMetaObj);\n    } else if (_id) {\n      getUserDetails(_id).then(function (res) {\n        console.log({\n          res: res\n        });\n        var user = res.data.user;\n        var userMetaId = user._id;\n        var userMetaObj = data.user;\n        chooseCardOrBank(userMetaId, userMetaObj);\n      });\n    }\n  };\n};\n\nvar returnCards = function returnCards(res) {\n  if (res.user) {\n    if (res.user.carddetails) {\n      return res.user.carddetails;\n    }\n  }\n\n  return {};\n};\n\nexport var addCard = function addCard(userid, card) {\n  var oldDetail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var oldCards = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  return function (dispatch) {\n    console.log({\n      userid: userid,\n      card: card\n    });\n    var found = oldCards.find(function (el) {\n      return el.id === card.id;\n    });\n    console.log({\n      found: found\n    });\n\n    if (found) {\n      dispatch(editCard(userid, card, oldDetail, oldCards));\n    } else {\n      var allCardsPre = oldCards ? [].concat(_toConsumableArray(oldCards), [card]) : [card];\n      var defaultCard = allCardsPre.find(function (el) {\n        return el.isDefault === true;\n      });\n      var allCards = allCardsPre.map(function (el, index) {\n        if (index === 0 && !defaultCard) return _objectSpread(_objectSpread({}, el), {}, {\n          isDefault: true\n        });\n        return el;\n      });\n      updateUserDetails({\n        userid: userid,\n        carddetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n          cards: allCards\n        })\n      }).then(function (rep) {\n        var res = rep.data;\n        console.log({\n          res: res\n        });\n        var cards = returnCards(res);\n        dispatch(setCards(cards));\n      })[\"catch\"](function (err) {\n        console.log({\n          err: err\n        });\n      });\n    }\n  };\n};\nexport var editCard = function editCard(userid, card) {\n  var oldDetail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var oldCards = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  return function (dispatch) {\n    var newCard = oldCards.map(function (el) {\n      if (el.id === card.id) return card;\n      return el;\n    });\n    addUpdateUserDetails({\n      userid: userid,\n      carddetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n        cards: newCard\n      })\n    }).then(function (rep) {\n      var res = rep.data;\n      console.log({\n        res: res\n      });\n      var cards = returnCards(res);\n      dispatch(setCards(cards));\n    })[\"catch\"](function (err) {\n      console.log({\n        err: err\n      });\n    });\n  };\n};\nexport var deleteCard = function deleteCard(userid, card) {\n  var oldDetail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var oldCards = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  return function (dispatch) {\n    var newCard = oldCards.filter(function (el) {\n      return el.customerPaymentProfileId !== card.customerPaymentProfileId;\n    });\n    authorizeDeleteCard({\n      paymentid: card.customerPaymentProfileId,\n      profileid: card.customerProfileId\n    }).then(function (rep) {\n      var res = rep.data;\n      console.log({\n        res: res\n      });\n\n      if (res && res.data && res.data.messages && res.data.messages.resultCode === \"Ok\") {\n        var defaultCard = newCard.find(function (el) {\n          return el.isDefault === true;\n        });\n        var allCards = newCard.map(function (el, index) {\n          if (index === 0 && !defaultCard) return _objectSpread(_objectSpread({}, el), {}, {\n            isDefault: true\n          });\n          return el;\n        });\n        updateUserDetails({\n          userid: userid,\n          carddetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n            cards: allCards\n          })\n        }).then(function (rep) {\n          var res = rep.data;\n          console.log({\n            res: res\n          });\n          var cards = returnCards(res);\n          dispatch(setCards(cards));\n        })[\"catch\"](function (err) {\n          console.log({\n            err: err\n          });\n        });\n      }\n    });\n  };\n};\nexport var setDefaultCard = function setDefaultCard(userid, id) {\n  var oldDetail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var oldCards = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  return function (dispatch) {\n    var newCard = oldCards.map(function (el) {\n      return _objectSpread(_objectSpread({}, el), {}, {\n        isDefault: el.customerPaymentProfileId === id\n      });\n    });\n    updateUserDetails({\n      userid: userid,\n      carddetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n        cards: newCard\n      })\n    }).then(function (rep) {\n      var res = rep.data;\n      console.log({\n        res: res\n      });\n      var cards = returnCards(res);\n      dispatch(setCards(cards));\n    })[\"catch\"](function (err) {\n      console.log({\n        err: err\n      });\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"module"}