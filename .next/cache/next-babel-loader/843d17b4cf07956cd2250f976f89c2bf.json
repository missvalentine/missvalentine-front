{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport dynamic from 'next/dynamic';\nimport { Form, Icon } from 'antd';\nconst Heading = dynamic(() => import('../Heading'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../Heading')],\n    modules: ['../Heading']\n  }\n});\nconst Input = dynamic(() => import('../form-components/Input'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../form-components/Input')],\n    modules: ['../form-components/Input']\n  }\n});\nconst Checkbox = dynamic(() => import('../form-components/Checkbox'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../form-components/Checkbox')],\n    modules: ['../form-components/Checkbox']\n  }\n});\nimport { connect } from 'react-redux';\nimport Button from '../form-components/Button';\nimport { registerUser } from '../../services/api';\nimport { drawerToDisplay, toggleRegBar } from '../../redux/actions/drawers';\nimport { setUser } from '../../redux/actions/user';\nimport regex from '../../services/helpers/regex';\nimport reactComponentDebounce from 'react-component-debounce';\nimport { projectName } from '../../constants/projectSettings';\nconst DebounceInput = reactComponentDebounce({\n  valuePropName: 'value',\n  triggerMs: 1000\n})(Input);\n\nclass RegistrationForm extends React.Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"handleSubmit\", e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          //     console.log(\"Received values of form: \", values);\n          const {\n            email,\n            password\n          } = values;\n          this.setState({\n            isLoading: true,\n            error: null\n          });\n          registerUser({\n            email,\n            password,\n            password2: password,\n            firstname: 'null',\n            lastname: 'null',\n            phonenumber: 'null'\n          }).then(res => {\n            this.setState({\n              isLoading: false\n            });\n            console.log({\n              res\n            });\n\n            if (res.status === 200) {\n              if (res.data.status) {\n                this.props.setUser(res.data.user);\n                this.props.toggleRegBar();\n              } else {\n                const {\n                  error\n                } = res.data;\n\n                if (error.endsWith('is already taken')) {\n                  this.setState({\n                    isAlreadyUser: true\n                  });\n                } else {\n                  this.setState({\n                    error: res.data.error\n                  });\n                }\n              }\n            } else {\n              this.setState({\n                error: 'something wrong'\n              });\n            }\n          }).catch(err => {\n            console.log({\n              err\n            });\n            this.setState({\n              isLoading: false,\n              error: 'something wrong'\n            });\n          });\n        }\n      });\n    });\n\n    this.state = {\n      isLoading: false,\n      error: null,\n      isAlreadyUser: false\n    };\n  }\n\n  render() {\n    const {\n      drawerToDisplay,\n      form: {\n        getFieldDecorator\n      }\n    } = this.props;\n    const {\n      isLoading,\n      error,\n      isAlreadyUser\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"c-registration\"\n    }, __jsx(Heading, {\n      parentClass: \"c-registration\"\n    }, isAlreadyUser ? __jsx(\"span\", null, \"Looks like you already\", __jsx(\"br\", null), \"have an account\") : `Welcome to ${projectName}!`), !isAlreadyUser && __jsx(\"p\", {\n      className: \"c-registration__info\"\n    }, \"Fill in your details to create an account\"), !isAlreadyUser && __jsx(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"c-ant-from c-registration__form\"\n    }, __jsx(Form.Item, null, getFieldDecorator('email', {\n      rules: [{\n        max: 40,\n        message: \"You can't use more than 40 characters.\"\n      }, {\n        required: true,\n        message: 'Please input your e-mail!'\n      }, {\n        pattern: regex.email,\n        message: 'Please enter a valid E-mail.'\n      }]\n    })(__jsx(DebounceInput, {\n      style: {\n        padding: '0px',\n        fontSize: '16px',\n        fontFamily: 'futuraBT-book',\n        marginBottom: '20px'\n      },\n      versions: ['dark'],\n      parentClass: \"c-registration\",\n      label: \"E-mail\"\n    }))), __jsx(Form.Item, null, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        max: 20,\n        message: \"You can't use more than 20 characters.\"\n      }, {\n        min: 6,\n        message: 'Minimum 6 characters is require.'\n      }]\n    })(__jsx(DebounceInput, {\n      style: {\n        padding: '0px',\n        fontSize: '16px',\n        fontFamily: 'futuraBT-book',\n        width: '80%'\n      },\n      type: \"password\",\n      parentClass: \"c-registration\",\n      versions: ['dark'],\n      label: \"Password\"\n    }))), __jsx(\"div\", {\n      className: \"c-registration__terms\",\n      style: {\n        paddingTop: '30px'\n      }\n    }, __jsx(Form.Item, null, getFieldDecorator('agree', {\n      valuePropName: 'checked',\n      initialValue: true,\n      rules: [{\n        required: true,\n        message: 'Please agree the terms and conditions.',\n        transform: value => value || undefined,\n        type: 'boolean'\n      }]\n    })(__jsx(Checkbox, {\n      style: {\n        marginBottom: 0\n      },\n      versions: ['dark']\n    }, \"I agree to\", __jsx(\"strong\", {\n      style: {\n        marginLeft: '4px',\n        marginRight: '4px'\n      }\n    }, __jsx(\"i\", null, \"Terms and Conditions\")), \"and\", __jsx(\"strong\", {\n      style: {\n        marginLeft: '4px',\n        marginRight: '4px'\n      }\n    }, __jsx(\"i\", null, \"Privacy Policy\")))), __jsx(\"p\", {\n      style: {\n        marginTop: 0\n      },\n      className: \"c-registration__inst\"\n    }, \"Already have an account?\", ' ', __jsx(\"span\", {\n      onClick: () => {\n        drawerToDisplay('login');\n      },\n      className: \"c-registration__link\"\n    }, \"SIGN IN\")))), __jsx(\"div\", {\n      className: \"c-registration__error-block\"\n    }, isLoading && __jsx(Icon, {\n      type: \"loading\",\n      className: \"c-registration__spinner c-spinner\",\n      style: {\n        fontSize: 24\n      },\n      spin: true\n    }), error && __jsx(\"p\", {\n      className: \"c-registration__error\"\n    }, error)), __jsx(\"div\", {\n      className: \"row mb-4\",\n      style: {\n        justifyContent: 'space-around'\n      }\n    }, __jsx(Button, {\n      theme: \"dark\",\n      disabled: isLoading //versions={[\"block\"]}\n\n    }, \"Register\"))), isAlreadyUser && __jsx(\"div\", {\n      className: \"c-registration__no-form-wrapper\"\n    }, __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"p\", {\n      className: \"c-registration__inst\"\n    }, \"You can login from\", ' ', __jsx(\"span\", {\n      onClick: () => {\n        drawerToDisplay('login');\n      },\n      className: \"c-registration__link\"\n    }, \"HERE\"))));\n  }\n\n}\n\nconst Registration = Form.create({\n  name: 'registration'\n})(RegistrationForm);\nconst mapActionToProps = {\n  drawerToDisplay,\n  setUser,\n  toggleRegBar\n};\nexport default connect(state => state, mapActionToProps)(Registration);","map":null,"metadata":{},"sourceType":"module"}