{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { updateUserDetails, getUserDetails } from \"../../services/apis/user\";\nimport { SET_ADDRESS } from \"./type\";\nexport const setAddress = payload => ({\n  type: SET_ADDRESS,\n  payload\n});\nexport const getAddress = id => async dispatch => {\n  getUserDetails(id).then(res => {\n    console.log(res);\n\n    if (res.data.user) {\n      if (res.data.user.shippingdetails) {\n        dispatch(setAddress(res.data.user.shippingdetails));\n      } else {\n        dispatch(setAddress({}));\n      }\n    } else {\n      dispatch(setAddress({}));\n    }\n  }).catch(console.log);\n};\n\nconst returnAddress = res => {\n  if (res.user) {\n    if (res.user.shippingdetails) {\n      return res.user.shippingdetails;\n    }\n  }\n\n  return {};\n};\n\nexport const addAddress = (userid, address, oldDetail = {}, oldAddress = []) => dispatch => {\n  if (address.constructor === Array) {\n    const addressArr = address.filter(el => el);\n    const addresses1 = [...oldAddress, ...addressArr].map(elx => elx);\n    const hasDefault = addresses1.find(el => el.isDefault === true);\n    const addresses2 = addresses1.map((el, index) => {\n      if (index === 0 && !hasDefault) {\n        return _objectSpread(_objectSpread({}, el), {}, {\n          isDefault: true\n        });\n      }\n\n      return el;\n    });\n    updateUserDetails({\n      userid,\n      shippingdetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n        address: addresses2\n      })\n    }).then(res => {\n      console.log({\n        res\n      });\n      const address = returnAddress(res.data);\n      dispatch(setAddress(address));\n    }).catch(err => {\n      console.log({\n        err\n      });\n    });\n  } else {\n    const addresses1 = [...oldAddress, address].map(elx => {\n      return elx;\n    });\n    const hasDefault = addresses1.find(el => el.isDefault === true);\n    const addresses2 = addresses1.map((el, index) => {\n      if (index === 0 && !hasDefault) {\n        return _objectSpread(_objectSpread({}, el), {}, {\n          isDefault: true\n        });\n      }\n\n      return el;\n    });\n    updateUserDetails({\n      userid,\n      shippingdetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n        address: addresses2\n      })\n    }).then(res => {\n      console.log({\n        res\n      });\n      const address = returnAddress(res.data);\n      dispatch(setAddress(address));\n    }).catch(err => {\n      console.log({\n        err\n      });\n    });\n  }\n};\nexport const deleteAddress = (userid, id, oldDetail = {}, oldAddress = []) => dispatch => {\n  const newAddress1 = oldAddress.filter(el => el.id !== id);\n  const defaultAddress = newAddress1.find(el => el.isDefault === true);\n  const newAddress = newAddress1.map((el, index) => {\n    if (index === 0 && !defaultAddress) {\n      return _objectSpread(_objectSpread({}, el), {}, {\n        isDefault: true\n      });\n    }\n\n    return el;\n  });\n  updateUserDetails({\n    userid,\n    shippingdetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n      address: newAddress\n    })\n  }).then(res => {\n    console.log({\n      res\n    });\n    const address = returnAddress(res.data);\n    dispatch(setAddress(address));\n  }).catch(err => {\n    console.log({\n      err\n    });\n  });\n};\nexport const setDefaultAddress = (userid, id, oldDetail = {}, oldAddress = []) => dispatch => {\n  const newAddress = oldAddress.map(el => {\n    return _objectSpread(_objectSpread({}, el), {}, {\n      isDefault: el.id === id\n    });\n  });\n  updateUserDetails({\n    userid,\n    shippingdetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n      address: newAddress\n    })\n  }).then(res => {\n    console.log({\n      res\n    });\n    const address = returnAddress(res.data);\n    dispatch(setAddress(address));\n  }).catch(err => {\n    console.log({\n      err\n    });\n  });\n};\nexport const editAddress = (userid, address, oldDetail = {}, oldAddress = []) => dispatch => {\n  const newAddress = oldAddress.map(el => {\n    if (el.id === address.id) return address;\n    return el;\n  });\n  updateUserDetails({\n    userid,\n    shippingdetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n      address: newAddress\n    })\n  }).then(res => {\n    console.log({\n      res\n    });\n    const address = returnAddress(res.data);\n    dispatch(setAddress(address));\n  }).catch(err => {\n    console.log({\n      err\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}