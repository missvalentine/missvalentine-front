{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport classNames from \"classnames\";\nimport { Input as AntInput } from \"antd\";\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons';\n\nvar Input = /*#__PURE__*/function (_React$Component) {\n  _inherits(Input, _React$Component);\n\n  var _super = _createSuper(Input);\n\n  function Input() {\n    _classCallCheck(this, Input);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Input, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$props = this.props,\n          value = _this$props.value,\n          onChange = _this$props.onChange,\n          parentClass = _this$props.parentClass,\n          inputId = _this$props.inputId,\n          label = _this$props.label,\n          type = _this$props.type,\n          suffix = _this$props.suffix,\n          prefix = _this$props.prefix,\n          versions = _this$props.versions,\n          name = _this$props.name,\n          wrapperClass = _this$props.wrapperClass,\n          props = _objectWithoutProperties(_this$props, [\"value\", \"onChange\", \"parentClass\", \"inputId\", \"label\", \"type\", \"suffix\", \"prefix\", \"versions\", \"name\", \"wrapperClass\"]);\n\n      var componentClass = \"c-input\";\n      var versionClass = versions.map(function (el) {\n        return \"\".concat(componentClass, \"--\").concat(el);\n      }).join(\" \");\n      var parent = \"\".concat(parentClass, \"__\").concat(componentClass.replace(\"c-\", \"\"));\n      var className = classNames(componentClass, (_classNames = {}, _defineProperty(_classNames, versionClass, versions), _defineProperty(_classNames, parent, parentClass), _defineProperty(_classNames, wrapperClass, wrapperClass), _classNames));\n\n      if (type == \"password\") {\n        return __jsx(\"div\", {\n          className: className\n        }, __jsx(AntInput.Password, _extends({\n          onChange: onChange // id={inputId}\n\n        }, props, {\n          name: name,\n          type: type,\n          value: value,\n          placeholder: label,\n          prefix: prefix,\n          suffix: suffix,\n          allowClear: versions.filter(function (version) {\n            return version === \"discount\";\n          })[0] === \"discount\" ? true : false,\n          className: versions[0] === \"discount\" ? \"c-input\" : \"c-input__input\"\n        })));\n      } else {\n        return __jsx(\"div\", {\n          className: className,\n          style: {\n            width: '100%'\n          }\n        }, __jsx(AntInput, _extends({\n          onChange: onChange // id={inputId}\n\n        }, props, {\n          name: name,\n          type: type,\n          value: value,\n          placeholder: label,\n          prefix: prefix,\n          suffix: suffix,\n          allowClear: versions.filter(function (version) {\n            return version === \"discount\";\n          })[0] === \"discount\" ? true : false,\n          className: versions[0] === \"discount\" ? \"c-input\" : \"c-input__input\"\n        })));\n      }\n    }\n  }]);\n\n  return Input;\n}(React.Component);\n\nInput.defaultProps = {\n  inputId: \"\".concat(parseInt(Math.random() * new Date().getTime())),\n  type: \"text\",\n  versions: [\"default\"]\n};\nexport default Input;","map":null,"metadata":{},"sourceType":"module"}