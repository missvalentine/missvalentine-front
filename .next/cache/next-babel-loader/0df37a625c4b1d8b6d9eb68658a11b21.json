{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineLoop } from \"box-dimension-calculator\";\nimport { addSlugToProduct } from \"./product\";\nimport _ from \"lodash\";\nimport projectSettings from \"../../constants/projectSettings\";\nexport var getItemTotal = function getItemTotal(item) {\n  if (item) {\n    if (item.saleprice) return parseFloat(item.saleprice) * parseFloat(item.qty);else if (item.regularprice) return parseFloat(item.regularprice) * parseFloat(item.qty);\n  }\n\n  return 0;\n};\nexport var returnSubTotal = function returnSubTotal(items) {\n  // amount =\n  return items.map(function (el) {\n    if (el) {\n      if (el.saleprice) {\n        if (el.subscribed) {\n          var totalPrice = parseFloat(el.saleprice) * parseFloat(el.qty);\n          var disc = totalPrice * el.subscribedDiscountPersent / 100;\n          return parseFloat(totalPrice) - parseFloat(disc);\n        } else {\n          return parseFloat(el.saleprice) * parseFloat(el.qty);\n        }\n      } else if (el.regularprice) if (el.subscribed) {\n        var _totalPrice = parseFloat(el.regularprice) * parseFloat(el.qty);\n\n        var _disc = _totalPrice * el.subscribedDiscountPersent / 100;\n\n        return parseFloat(_totalPrice) - parseFloat(_disc);\n      } else {\n        return parseFloat(el.regularprice) * parseFloat(el.qty);\n      }\n    }\n\n    return 0;\n  }).reduce(function (a, b) {\n    return a + b;\n  }, 0);\n};\nexport var returnUnSubscribeTotal = function returnUnSubscribeTotal(items) {\n  return items.filter(function (el) {\n    return !el.subscribed;\n  }).map(function (el) {\n    if (el) {\n      if (el.saleprice) return parseFloat(el.saleprice) * parseFloat(el.qty);else if (el.regularprice) return parseFloat(el.regularprice) * parseFloat(el.qty);\n    }\n\n    return 0;\n  }).reduce(function (a, b) {\n    return a + b;\n  }, 0);\n};\nexport var getTotalWeight = function getTotalWeight(items) {\n  return items.filter(function (el) {\n    return el.weight;\n  }).map(function (el) {\n    return el.weight * parseFloat(el.qty);\n  }).reduce(function (a, b) {\n    return a + b;\n  }, 0);\n};\nexport var getTotalVolume = function getTotalVolume(items) {\n  // return items\n  //   .filter(el => el.shipping_height && el.shipping_length && el.shipping_width)\n  //   .map(el => el.shipping_height * el.shipping_length * el.shipping_width)\n  //   .reduce((a, b) => a + b, 0);\n  return items.filter(function (el) {\n    return el.volume;\n  }).map(function (el) {\n    return el.volume * parseFloat(el.qty);\n  }).reduce(function (a, b) {\n    return a + b;\n  }, 0);\n};\nexport var getTotalVariation = function getTotalVariation(item) {\n  if (!item.attributes) return [];\n  return item.attributes.map(function (el) {\n    return el ? el.names : null;\n  }).filter(function (el) {\n    return el;\n  });\n};\nexport var variablePriceSet = function variablePriceSet(productItem) {\n  if (productItem) {\n    var tempVariable = _objectSpread({}, productItem);\n\n    if (productItem.producttype === \"variable\") {\n      // if (productItem.size && productItem.extract_flavor) {\n      var notNullVariation = productItem.variation.filter(function (el) {\n        return el !== null;\n      });\n      productItem.attributes.filter(function (el) {\n        return el !== null;\n      }).map(function (el) {\n        return el.names;\n      });\n      var varCheck = productItem.attributes.filter(function (el) {\n        return el !== null;\n      }).map(function (attr) {\n        return {\n          key: attr.names,\n          value: productItem[attr.names] ? productItem[attr.names].value : productItem[attr.names]\n        };\n      });\n      var matchedVariable = null;\n\n      if (!varCheck.some(function (vEl) {\n        return vEl.value === null || vEl.value === undefined;\n      })) {\n        matchedVariable = notNullVariation.find(function (varEl) {\n          var matchArr = [];\n          varCheck.map(function (vEl) {\n            matchArr.push(varEl[vEl.key] === vEl.value);\n            return null;\n          });\n          return !matchArr.includes(false);\n        });\n\n        if (matchedVariable) {\n          tempVariable = _objectSpread(_objectSpread({}, productItem), {}, {\n            regularprice: matchedVariable.regular_price,\n            saleprice: matchedVariable.sale_price\n          });\n        } else {\n          tempVariable = _objectSpread(_objectSpread({}, productItem), {}, {\n            regularprice: productItem.dregularprice,\n            saleprice: productItem.dsaleprice\n          });\n        }\n      }\n    } else {\n      if (productItem.producttype === \"simple\" || productItem.combo) {\n        tempVariable = _objectSpread(_objectSpread({}, productItem), {}, {\n          regularprice: productItem.dregularprice,\n          saleprice: productItem.dsaleprice\n        });\n      }\n    }\n\n    return tempVariable;\n  }\n};\nexport var changeCartItemVariation = function changeCartItemVariation(varValue, names, item, indexingNo, list) {\n  if (names === \"qty\") {\n    return {\n      approve: false,\n      update: {\n        oldItem: item,\n        newItem: _objectSpread(_objectSpread({}, item), {}, _defineProperty({}, names, varValue)),\n        remove: null\n      }\n    };\n  } else {\n    var totalVariation = getTotalVariation(item);\n    var foundItem = list.find(function (el, index) {\n      var innerFlag = totalVariation.map(function (varEl) {\n        if (el[varEl]) {\n          if (varEl === names) {\n            return el[varEl].value === varValue.value;\n          }\n\n          return el[varEl].value === item[varEl].value;\n        } else {\n          return null;\n        }\n      }).filter(function (el) {\n        return el !== null;\n      });\n      return el.productid._id === item.productid._id && innerFlag.every(function (el) {\n        return el;\n      }) && index !== indexingNo;\n    });\n\n    if (foundItem !== undefined && foundItem !== null) {\n      var totalQty = parseInt(foundItem.qty) + parseInt(item.qty);\n      var qty = totalQty;\n\n      if (item.subscribed || foundItem.subscribed) {\n        var _objectSpread3;\n\n        return {\n          approve: true,\n          update: {\n            oldItem: foundItem,\n            newItem: _objectSpread(_objectSpread({}, foundItem), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, names, varValue), _defineProperty(_objectSpread3, \"qty\", qty), _defineProperty(_objectSpread3, \"subscribed\", true), _defineProperty(_objectSpread3, \"subscribedDiscountPersent\", item.subscribedDiscountPersent), _defineProperty(_objectSpread3, \"subscribedTime\", item.subscribedTime), _objectSpread3)),\n            remove: item\n          }\n        };\n      } else {\n        var _objectSpread4;\n\n        return {\n          approve: false,\n          update: {\n            oldItem: foundItem,\n            newItem: _objectSpread(_objectSpread({}, foundItem), {}, (_objectSpread4 = {}, _defineProperty(_objectSpread4, names, varValue), _defineProperty(_objectSpread4, \"qty\", qty), _objectSpread4)),\n            remove: item\n          }\n        };\n      }\n    } else {\n      return {\n        approve: false,\n        update: {\n          oldItem: item,\n          newItem: _objectSpread(_objectSpread({}, item), {}, _defineProperty({}, names, varValue)),\n          remove: null\n        }\n      };\n    }\n  }\n};\nexport var verifyProduct = function verifyProduct(productItem) {\n  var items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var totalVariation = getTotalVariation(productItem);\n  var foundItem = items.find(function (el) {\n    var innerFlag = totalVariation.map(function (varEl) {\n      if (el[varEl]) {\n        return el[varEl].value === productItem[varEl].value;\n      } else {\n        return null;\n      }\n    }).filter(function (el) {\n      return el !== null;\n    }).every(function (el) {\n      return el;\n    });\n    if (!innerFlag) return innerFlag;\n    if (el.combo && productItem.combo) return el._id === productItem._id;\n    if (el.combo) return el._id === productItem.productid._id;\n    if (productItem.combo) return el.productid._id === productItem._id;\n    return el.productid._id === productItem.productid._id;\n  });\n\n  if (foundItem !== undefined && foundItem !== null) {\n    var totalQty = parseInt(foundItem.qty) + parseInt(productItem.qty);\n    var qty = totalQty;\n\n    var tempNewItem = _objectSpread(_objectSpread({}, foundItem), {}, {\n      subscribed: productItem.subscribed\n    });\n\n    if (productItem.subscribed) {\n      var subscribed = productItem.subscribed,\n          subscribedDiscountPersent = productItem.subscribedDiscountPersent,\n          subscribedTime = productItem.subscribedTime;\n      return {\n        found: foundItem,\n        item: _objectSpread(_objectSpread({}, foundItem), {}, {\n          qty: qty,\n          subscribed: subscribed,\n          subscribedDiscountPersent: subscribedDiscountPersent,\n          subscribedTime: subscribedTime\n        })\n      };\n    } else if (foundItem.subscribed) {\n      var _subscribedDiscountPersent = tempNewItem.subscribedDiscountPersent,\n          _subscribedTime = tempNewItem.subscribedTime,\n          newItem = _objectWithoutProperties(tempNewItem, [\"subscribedDiscountPersent\", \"subscribedTime\"]);\n\n      return {\n        found: foundItem,\n        item: _objectSpread({}, newItem)\n      };\n    }\n\n    return {\n      found: foundItem,\n      item: _objectSpread(_objectSpread({}, foundItem), {}, {\n        qty: qty,\n        subscribed: productItem.subscribed\n      })\n    };\n  }\n\n  return {\n    found: null,\n    item: _objectSpread({}, productItem)\n  };\n};\nexport var addItem = function addItem(state, newItem) {\n  var _verifyProduct = verifyProduct(newItem, state.items),\n      found = _verifyProduct.found,\n      item = _verifyProduct.item;\n\n  if (found) {\n    return modifyProduct(found, item, state);\n  }\n\n  var newItems = [].concat(_toConsumableArray(state.items), [newItem]);\n  return _objectSpread(_objectSpread({}, state), {}, {\n    items: newItems,\n    subTotal: returnSubTotal(newItems) || 0,\n    unSubscribeProductAmount: returnUnSubscribeTotal(newItems) || 0,\n    totalWeight: getTotalWeight(newItems),\n    totalVolume: getTotalVolume(newItems)\n  });\n};\nexport var setSlugInCart = function setSlugInCart(cart) {\n  return _objectSpread(_objectSpread({}, cart), {}, {\n    items: cart.items ? cart.items.map(function (el) {\n      return addSlugToProduct(el);\n    }) : []\n  });\n};\nexport var modifyProduct = function modifyProduct(oldItem, newItem, state) {\n  var NewItems = state.items.map(function (el) {\n    if (el._id === newItem._id) {\n      if (el === oldItem) {\n        return variablePriceSet(newItem);\n      }\n    }\n\n    return el;\n  });\n\n  if (oldItem !== newItem) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      items: _toConsumableArray(NewItems),\n      subTotal: returnSubTotal(NewItems) || 0,\n      unSubscribeProductAmount: returnUnSubscribeTotal(NewItems) || 0,\n      totalWeight: getTotalWeight(NewItems),\n      totalVolume: getTotalVolume(NewItems),\n      taxCouponDiscount: NewItems.length === 0 ? 0 : state.taxCouponDiscount,\n      taxCouponCode: NewItems.length === 0 ? 0 : state.taxCouponCode\n    });\n  }\n\n  return state;\n};\nexport var removeItem = function removeItem(state, item) {\n  console.log(state);\n\n  var newItems = _toConsumableArray(state.items.filter(function (el) {\n    return el !== item;\n  }));\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    items: newItems,\n    subTotal: returnSubTotal(newItems) || 0,\n    unSubscribeProductAmount: returnUnSubscribeTotal(newItems) || 0,\n    totalWeight: getTotalWeight(newItems),\n    totalVolume: getTotalVolume(newItems),\n    taxCouponDiscount: newItems.length === 0 ? 0 : state.taxCouponDiscount,\n    taxCouponCode: newItems.length === 0 ? 0 : state.taxCouponCode\n  });\n};\nexport var getItemsHeightWidth = function getItemsHeightWidth(items) {\n  var height = 0;\n  var width = 0;\n  var length = 0;\n  var weight = 0;\n\n  function flatten(arr) {\n    return arr.reduce(function (flat, toFlatten) {\n      return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);\n    }, []);\n  }\n\n  var item = flatten(items.map(function (el) {\n    var qty = el.qty ? parseInt(el.qty) : 1;\n    if (qty > 1) return new Array(qty).fill(el);\n    return el;\n  }));\n\n  var getGreater = function getGreater(a, b) {\n    if (a > b) return a;\n    return b;\n  };\n\n  if (item.length > 0) {\n    item.forEach(function (itm) {\n      weight = weight + itm.weight;\n    });\n  }\n\n  var itemsB = items.map(function (el) {\n    return {\n      h: el.shipping_height,\n      l: el.shipping_length,\n      w: el.shipping_width,\n      qty: el.qty\n    };\n  });\n  var itemsC = [].concat.apply([], itemsB);\n  var itemsC1 = itemsC.map(function (el) {\n    return new Array(el.qty).fill(el);\n  }).flat();\n  var itemsD = combineLoop(itemsC1)[0];\n  return {\n    height: itemsD.h,\n    width: itemsD.w,\n    length: itemsD.l,\n    weight: weight\n  };\n};\nexport var filterShippingRates = function filterShippingRates(rateArr) {\n  if (rateArr.length > 0) {\n    var filteredRates = _.uniqBy(rateArr, function (e) {\n      return e.service;\n    });\n\n    var smallSorted = filteredRates.sort(function (a, b) {\n      return parseFloat(a.rate || 0) - parseFloat(b.rate || 0);\n    });\n    var Smallest = smallSorted[0];\n    var Smallest1 = smallSorted[1];\n    var Smallest2 = smallSorted[2];\n    var PriorityRaw = filteredRates.find(function (el) {\n      return el.service === \"Priority\";\n    });\n    var ExpressRaw = filteredRates.find(function (el) {\n      return el.service === \"Express\";\n    });\n    var shippingExtraRate = projectSettings.shippingExtraRate;\n\n    var standard = Smallest && _objectSpread(_objectSpread({}, Smallest), {}, {\n      customName: \"Standard\",\n      customRate: parseFloat(Smallest.rate) + shippingExtraRate\n    });\n\n    var Priority = Smallest1 && _objectSpread(_objectSpread({}, Smallest1), {}, {\n      customName: \"Priority\",\n      customRate: parseFloat(Smallest1.rate) + shippingExtraRate\n    });\n\n    var Express = Smallest2 && _objectSpread(_objectSpread({}, Smallest2), {}, {\n      customName: \"Express\",\n      customRate: parseFloat(Smallest2.rate) + shippingExtraRate\n    });\n\n    return [standard, Priority, Express].filter(function (el) {\n      return el;\n    });\n  }\n\n  return rateArr;\n}; // --------------------------\n\nvar multiply = function multiply(a, b) {\n  return parseFloat(a) * parseFloat(b);\n};\n\nvar getSelectedAttributes = function getSelectedAttributes(item) {\n  if (item.producttype === \"variable\") return item.attributes.map(function (el) {\n    return _defineProperty({}, el.names, item[el.names].value);\n  }).filter(function (el) {\n    return el;\n  }).reduce(function (a, b) {\n    return _objectSpread(_objectSpread({}, a), b);\n  }, {});\n  return null;\n};\n\nvar getDiscount = function getDiscount(discount, subTotal) {\n  return discount * subTotal / 100 || 0;\n};\n\nvar removeEmpty = function removeEmpty(obj) {\n  Object.keys(obj).forEach(function (key) {\n    return obj[key] === null && delete obj[key];\n  });\n};\n\nvar parseOrderProduct = function parseOrderProduct(item) {\n  var isCombo = item.combo ? true : false,\n      comboId = item.combo ? item._id : null,\n      productId = item.combo ? null : item.productid._id,\n      productMeta = item.combo ? null : item._id,\n      isSubscribed = item.subscribed ? true : false,\n      subscriptionMeta = item.subscribed ? {\n    duration: item.subscribedTime\n  } : null,\n      itemId = item._id,\n      _id = item._id,\n      qty = item.qty,\n      title = item.combo ? item.title : item.productid.producttitle,\n      unitPrice = item.saleprice ? item.saleprice : item.regularprice,\n      subTotal = item.saleprice ? multiply(item.saleprice, item.qty) : multiply(item.regularprice, item.qty),\n      attribute = getSelectedAttributes(item),\n      height = item.shipping_height,\n      width = item.shipping_width,\n      length = item.shipping_length,\n      volume = item.volume,\n      weight = item.weight;\n  var order = {\n    isCombo: isCombo,\n    comboId: comboId,\n    productId: productId,\n    productMeta: productMeta,\n    isSubscribed: isSubscribed,\n    subscriptionMeta: subscriptionMeta,\n    itemId: itemId,\n    _id: _id,\n    qty: qty,\n    unitPrice: unitPrice,\n    subTotal: subTotal,\n    attribute: attribute,\n    width: width,\n    length: length,\n    height: height,\n    title: title,\n    volume: volume,\n    weight: weight\n  };\n  removeEmpty(order);\n  return order;\n};\n\nvar getHeightWeight = function getHeightWeight(items) {\n  var height = items.map(function (el) {\n    return el.height * parseFloat(el.qty);\n  });\n  var width = items.map(function (el) {\n    return el.width * parseFloat(el.qty);\n  });\n  var length = items.map(function (el) {\n    return el.length * parseFloat(el.qty);\n  });\n  var shape = {\n    height: height.reduce(function (a, b) {\n      return a + b;\n    }, 0),\n    width: width.reduce(function (a, b) {\n      return a + b;\n    }, 0),\n    length: length.reduce(function (a, b) {\n      return a + b;\n    }, 0)\n  };\n  return shape;\n};\n\nexport var getGrandTotal = function getGrandTotal(subTotal, taxPercent, shippingCharge, discount) {\n  var amountWithTax = subTotal + (taxPercent || 0) * subTotal + shippingCharge;\n  var discountAmount = getDiscount(discount, subTotal);\n  var total = parseFloat(amountWithTax || 0) - parseFloat(discountAmount || 0);\n  return parseFloat(total.toFixed(2));\n};\nexport var generateOrderObj = function generateOrderObj(_ref2) {\n  var stateObj = _ref2.stateObj,\n      referralId = _ref2.referralId,\n      cart = _ref2.cart,\n      user = _ref2.user,\n      confirmShipRes = _ref2.confirmShipRes;\n\n  var service = confirmShipRes.service,\n      confirmRest = _objectWithoutProperties(confirmShipRes, [\"service\"]);\n\n  var paymentMethod = stateObj.paymentMethod,\n      address = stateObj.address,\n      billingAddress = stateObj.billingAddress;\n\n  var addressStr = address.addressStr,\n      addressRest = _objectWithoutProperties(address, [\"addressStr\"]);\n\n  var billingAddressStr = billingAddress.addressStr,\n      billingAddressRest = _objectWithoutProperties(billingAddress, [\"addressStr\"]);\n\n  var items = cart.items,\n      shippingCharge = cart.shippingCharge,\n      subTotal = cart.subTotal,\n      totalWeight = cart.totalWeight,\n      totalVolume = cart.totalVolume,\n      taxValue = cart.taxValue,\n      taxPercent = cart.taxPercent,\n      taxCouponDiscount = cart.taxCouponDiscount,\n      taxCouponCode = cart.taxCouponCode;\n  var orderProducts = items.map(function (el) {\n    return parseOrderProduct(el);\n  });\n\n  var _getHeightWeight = getHeightWeight(orderProducts),\n      totalHeight = _getHeightWeight.height,\n      totalLength = _getHeightWeight.length,\n      totalWidth = _getHeightWeight.width;\n\n  var order = _objectSpread({\n    totalVolume: totalVolume,\n    totalWeight: totalWeight,\n    shippingMethod: service,\n    products: orderProducts,\n    countryTax: (taxPercent || 0) * 100,\n    taxAmount: taxValue || parseFloat(cart.subTotal || 0) * parseFloat(taxPercent || 0) || 0,\n    shippingCharge: shippingCharge,\n    userDetails: _objectSpread({\n      address: addressStr\n    }, addressRest),\n    billingAddress: _objectSpread({\n      address: billingAddressStr\n    }, billingAddressRest),\n    orderStatus: projectSettings.defaultOrderStatus,\n    paymentMethod: paymentMethod === \"stripe\" ? \"Authorize\" : paymentMethod,\n    status: projectSettings.defaultStatusInOrder,\n    wholeSubtotal: parseFloat(subTotal.toFixed(2)),\n    wasReferred: referralId ? true : false,\n    referral: referralId ? referralId : null,\n    isCoupon: taxCouponCode ? true : false,\n    couponId: taxCouponCode,\n    couponDisc: taxCouponCode ? taxCouponDiscount : null,\n    grandTotal: getGrandTotal(subTotal, taxPercent, shippingCharge, taxCouponDiscount),\n    isGuest: user._id ? false : true,\n    userId: user._id ? user._id : null,\n    userMetaId: user.userMetaId ? user.userMetaId : null,\n    totalHeight: totalHeight,\n    totalWidth: totalWidth,\n    totalLength: totalLength,\n    refPercentage: projectSettings.referralPresent\n  }, confirmRest);\n\n  removeEmpty(order);\n  return order;\n};","map":null,"metadata":{},"sourceType":"module"}