{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport dynamic from \"next/dynamic\";\nimport ChatBot from \"react-simple-chatbot\";\nimport Router from \"next/router\";\nimport { ThemeProvider } from \"styled-components\";\nimport { connect } from \"react-redux\";\nvar ChatProductList = dynamic(function () {\n  return import(\"./ChatProductList\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"./ChatProductList\")];\n    },\n    modules: [\"./ChatProductList\"]\n  }\n});\nvar ChatCategoryList = dynamic(function () {\n  return import(\"./ChatCategoryList\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"./ChatCategoryList\")];\n    },\n    modules: [\"./ChatCategoryList\"]\n  }\n});\nvar ChatProductCard = dynamic(function () {\n  return import(\"./ChatProductCard\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"./ChatProductCard\")];\n    },\n    modules: [\"./ChatProductCard\"]\n  }\n});\nvar ChatUserOneRet = dynamic(function () {\n  return import(\"./ChatUserOneRet\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"./ChatUserOneRet\")];\n    },\n    modules: [\"./ChatUserOneRet\"]\n  }\n});\nimport ChatMsgList from \"./ChatMsgList\";\nvar ChatOrderList = dynamic(function () {\n  return import(\"./ChatOrderList\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"./ChatOrderList\")];\n    },\n    modules: [\"./ChatOrderList\"]\n  }\n});\nvar LearnResponse = dynamic(function () {\n  return import(\"./LearnResponse\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"./LearnResponse\")];\n    },\n    modules: [\"./LearnResponse\"]\n  }\n});\nimport { isEmpty, isEmail } from \"validator\";\nimport { chatTheme, imageUrl } from \"../../constants/projectSettings\";\nvar chatMsgList = new ChatMsgList();\nvar getInitialMsg = chatMsgList.getInitialMsg,\n    getInitialMsg2 = chatMsgList.getInitialMsg2,\n    shopNowMsg = chatMsgList.shopNowMsg,\n    redirectForTracking = chatMsgList.redirectForTracking,\n    emptyTrackingIdErr = chatMsgList.emptyTrackingIdErr,\n    getProductChooseMsg = chatMsgList.getProductChooseMsg,\n    getMsgAfterCategory = chatMsgList.getMsgAfterCategory,\n    contactFirst = chatMsgList.contactFirst,\n    contactSecond = chatMsgList.contactSecond,\n    contactThird = chatMsgList.contactThird,\n    contactFourth = chatMsgList.contactFourth,\n    repeatMsg = chatMsgList.repeatMsg,\n    afterProduct = chatMsgList.afterProduct,\n    contactErrMsgOne = chatMsgList.contactErrMsgOne,\n    contactErrMsgTwo = chatMsgList.contactErrMsgTwo,\n    checkoutRedirectMsg = chatMsgList.checkoutRedirectMsg,\n    checkoutNoItemMsg = chatMsgList.checkoutNoItemMsg,\n    getProductListMsg = chatMsgList.getProductListMsg,\n    pickProductMsg = chatMsgList.pickProductMsg,\n    afterProductFinish = chatMsgList.afterProductFinish,\n    checkoutFinish = chatMsgList.checkoutFinish,\n    learnMoreUserPre = chatMsgList.learnMoreUserPre,\n    learnMoreQuit = chatMsgList.learnMoreQuit,\n    learnMoreNext = chatMsgList.learnMoreNext;\n\nvar ChatBotElement = /*#__PURE__*/function (_Component) {\n  _inherits(ChatBotElement, _Component);\n\n  var _super = _createSuper(ChatBotElement);\n\n  function ChatBotElement(props) {\n    var _this;\n\n    _classCallCheck(this, ChatBotElement);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleFloating\", function () {\n      _this.setState(function (prevState) {\n        return {\n          opened: !prevState.opened\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearChat\", function () {\n      _this.setState({\n        clear: true\n      }, function () {\n        _this.setState({\n          clear: false\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"ifLogin\", function (login) {\n      var notLogin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (_this.props) if (_this.props.user) {\n        if (_this.props.user._id && _this.props.user.username) return login;\n      }\n      return notLogin;\n    });\n\n    _this.state = {\n      userName: props.user.email,\n      opened: false,\n      clear: false\n    };\n    return _this;\n  }\n\n  _createClass(ChatBotElement, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.ifLogin();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      chatTheme;\n\n      var theme = _objectSpread({}, chatTheme);\n\n      var _this$props = this.props,\n          isOpen = _this$props.isOpen,\n          items = _this$props.items;\n      var _this$state = this.state,\n          opened = _this$state.opened,\n          clear = _this$state.clear;\n      var chat = [this.ifLogin({\n        id: \"initialOne\",\n        message: function message() {\n          var userName = _this2.props.user && _this2.props.user.username.split(\" \")[0];\n\n          return getInitialMsg(userName);\n        },\n        trigger: \"initialTwo\"\n      }), {\n        id: \"initialTwo\",\n        message: getInitialMsg2(),\n        trigger: \"firstOptionsFresh\"\n      }, {\n        id: \"firstOptionsFresh\",\n        options: [{\n          value: \"initialOne\",\n          label: \"Shop Now\",\n          trigger: \"shopSelected\"\n        }, {\n          value: \"checkout\",\n          label: \"Checkout\",\n          trigger: \"checkout\"\n        }, {\n          value: \"contact\",\n          label: \"Contact us\",\n          trigger: \"contact\"\n        }, {\n          value: \"learnMore\",\n          label: \"Learn more\",\n          trigger: \"learnMoreUserPre\"\n        }]\n      }, {\n        id: \"firstOptions\",\n        options: [{\n          value: \"initialOne\",\n          label: \"Shop Now\",\n          trigger: \"shopSelected\"\n        }, {\n          value: \"checkout\",\n          label: \"Checkout\",\n          trigger: \"checkout\"\n        }, {\n          value: \"contact\",\n          label: \"Contact us\",\n          trigger: \"contact\"\n        }, {\n          value: \"learnMore\",\n          label: \"Learn more\",\n          trigger: \"learnMoreUserPre\"\n        }]\n      }, {\n        id: \"learnMoreUserPre\",\n        message: learnMoreUserPre(),\n        trigger: \"learnMoreUser\"\n      }, {\n        id: \"learnMoreUser\",\n        user: true,\n        trigger: \"learnMoreResponce\"\n      }, {\n        id: \"learnMoreResponce\",\n        component: __jsx(LearnResponse, null),\n        waitAction: true,\n        asMessage: true\n      }, {\n        id: \"learnMoreQuit\",\n        message: learnMoreQuit(),\n        trigger: \"learnMoreQuitAfter\"\n      }, {\n        id: \"learnMoreQuitAfter\",\n        user: true,\n        trigger: function trigger(_ref) {\n          var value = _ref.value;\n          if (value.toLowerCase().trim() === \"yes\") return \"firstOptions\";\n          return \"learnMoreNext\";\n        } // trigger: \"learnMoreResponce\"\n\n      }, {\n        id: \"learnMoreNext\",\n        message: learnMoreNext(),\n        trigger: \"learnMoreUser\"\n      }, {\n        id: \"shopSelected\",\n        message: shopNowMsg(),\n        trigger: \"userOne\"\n      }, {\n        id: \"userOne\",\n        user: true,\n        // waitAction: true,\n        trigger: \"5\"\n      }, {\n        id: 5,\n        component: __jsx(ChatUserOneRet, null),\n        waitAction: true,\n        asMessage: true\n      }, // {\n      //   id: \"trackNow\",\n      //   message: msgTrackNow(),\n      //   trigger: \"getTrackingId\"\n      // },\n      {\n        id: \"trackNowLogin\",\n        // message: msgTrackNow(),\n        component: __jsx(ChatOrderList, null),\n        trigger: \"trackNowLoginNext\",\n        waitAction: true\n      }, {\n        id: \"trackNowLoginNext\",\n        message: function message(pp) {\n          setTimeout(function () {\n            window.open(\"https://www.google.com\");\n          }, 2000);\n          return redirectForTracking();\n        },\n        trigger: \"repeat\"\n      }, {\n        id: \"trackNow\",\n        user: true,\n        validator: function validator(value) {\n          if (isEmpty(value)) {\n            return emptyTrackingIdErr();\n          }\n\n          return true;\n        },\n        trigger: function trigger(props) {\n          return \"repeat\";\n        }\n      }, {\n        id: \"categoryList\",\n        component: __jsx(ChatCategoryList, null),\n        waitAction: true,\n        // asMessage: true,\n        trigger: \"postCategory\"\n      }, {\n        id: \"postCategory\",\n        message: function message(_ref2) {\n          var previousValue = _ref2.previousValue;\n          return getMsgAfterCategory(previousValue);\n        },\n        trigger: \"preProduct\"\n      }, {\n        id: \"preProduct\",\n        message: getProductListMsg(),\n        trigger: \"preProduct2\"\n      }, {\n        id: \"preProduct2\",\n        message: pickProductMsg(),\n        trigger: \"products\"\n      }, {\n        id: \"products\",\n        component: __jsx(ChatProductList, null),\n        waitAction: true,\n        trigger: \"productSelected1\" // end: true\n\n      }, {\n        id: \"productSelected1\",\n        message: \"Awesome! 😍\",\n        trigger: function trigger(props) {\n          return \"productSelected2\";\n        }\n      }, {\n        id: \"productSelected2\",\n        message: function message(_ref3) {\n          var steps = _ref3.steps;\n          return getProductChooseMsg(steps.products.value.productTitle); // return `${steps.products.value.productTitle} is my favourite`\n        },\n        // end: true\n        trigger: \"afterProduct\"\n      }, {\n        id: \"afterProduct\",\n        message: afterProduct(),\n        trigger: \"singleProduct\"\n      }, {\n        id: \"singleProduct\",\n        component: __jsx(ChatProductCard, null),\n        trigger: \"productNext\"\n      }, {\n        id: \"productNext\",\n        message: afterProductFinish(),\n        trigger: \"firstOptions\"\n      }, {\n        id: \"checkout\",\n        message: function message() {\n          if (items && items.length > 0) {\n            return checkoutRedirectMsg();\n          }\n\n          return checkoutNoItemMsg();\n        },\n        trigger: function trigger() {\n          if (items && items.length > 0) {\n            return \"checkout1\";\n          }\n\n          return \"repeat\";\n        }\n      }, {\n        id: \"checkout1\",\n        message: checkoutFinish(),\n        trigger: \"checkout2\"\n      }, {\n        id: \"checkout2\",\n        message: function message() {\n          // const { history, countryCode } = this.props;\n          setTimeout(function () {\n            Router.push(\"/checkout\");\n\n            _this2.toggleFloating();\n\n            _this2.clearChat();\n          }, 400);\n          return \"\";\n        },\n        end: true\n      }, {\n        id: \"contact\",\n        message: contactFirst(),\n        trigger: \"contactUserFirst\"\n      }, {\n        id: \"contactUserFirst\",\n        user: true,\n        // waitAction: true,\n        trigger: function trigger(_ref4) {\n          var value = _ref4.value;\n          if (isEmail(value)) return \"contactTwo\";else {\n            return \"contactUserErr\";\n          }\n        }\n      }, {\n        id: \"contactUserErr\",\n        message: contactErrMsgOne(),\n        trigger: \"contactUserErr2\"\n      }, {\n        id: \"contactUserErr2\",\n        message: contactErrMsgTwo(),\n        trigger: \"contactUserFirst\"\n      }, {\n        id: \"contactTwo\",\n        message: contactSecond(),\n        trigger: \"contactUserSecond\"\n      }, {\n        id: \"contactUserSecond\",\n        user: true,\n        // waitAction: true,\n        trigger: \"contactThree\"\n      }, {\n        id: \"contactThree\",\n        message: contactThird(),\n        trigger: \"contactFourth\"\n      }, {\n        id: \"contactFourth\",\n        message: contactFourth(),\n        trigger: \"repeat\"\n      }, {\n        id: \"repeat\",\n        message: repeatMsg(),\n        trigger: \"firstOptions\"\n      }].filter(function (el) {\n        return el;\n      });\n      if (clear) return __jsx(\"div\", null);\n      return __jsx(\"div\", {\n        className: \"react-chat-bot\"\n      }, __jsx(\"div\", {\n        className: \"chat-inner\"\n      }, __jsx(ThemeProvider, {\n        theme: theme\n      }, __jsx(ChatBot, {\n        opened: opened,\n        toggleFloating: this.toggleFloating,\n        floatingStyle: {\n          bottom: \"42px\"\n        },\n        enableMobileAutoFocus: true,\n        floating: true,\n        botAvatar: \"\".concat(imageUrl, \"/Logo-chat.png\"),\n        bubbleStyle: {\n          marginBottom: 0,\n          // marginTop: \"10px\",\n          maxWidth: \"70%\",\n          fontSize: \"16px\",\n          boxShadow: \"none\"\n        },\n        inputAttributes: {\n          placeHolder: \"Type the \"\n        },\n        bubbleOptionStyle: {\n          marginBottom: 0,\n          marginTop: \"10px\",\n          fontSize: \"16px\",\n          boxShadow: \"none\",\n          borderBottom: \"1px solid currentColor\",\n          paddingRight: \"30px\",\n          fontWeight: \"600\",\n          paddingLeft: \"0\",\n          paddingBottom: \"0\",\n          marginRight: \"10px\",\n          minWidth: \"40%\"\n        },\n        style: {\n          width: \"450px\",\n          maxWidth: \"100%\",\n          bottom: 0,\n          right: isOpen ? \"380px\" : \"32px\",\n          transition: \"all 0.4s ease 0s\"\n        },\n        customStyle: {\n          boxShadow: \"none\",\n          justifyContent: \"left\",\n          marginLeft: \"46px\"\n        },\n        steps: chat\n      }))));\n    }\n  }]);\n\n  return ChatBotElement;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.user,\n    isOpen: state.drawers.isCartOpen,\n    countryCode: state.location.countryCode,\n    items: state.cart.items\n  };\n};\n\nexport default connect(mapStateToProps)(ChatBotElement);","map":null,"metadata":{},"sourceType":"module"}