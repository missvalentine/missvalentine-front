{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport dynamic from \"next/dynamic\";\nvar TitleList = dynamic(function () {\n  return import(\"../TItleList\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../TItleList\")];\n    },\n    modules: [\"../TItleList\"]\n  }\n});\nvar Button = dynamic(function () {\n  return import(\"../form-components/Button\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../form-components/Button\")];\n    },\n    modules: [\"../form-components/Button\"]\n  }\n});\nimport moment from \"moment\";\nimport { Form, Radio, Collapse, Select } from \"antd\";\nimport { connect } from \"react-redux\";\nimport regex from \"../../services/helpers/regex\";\nvar Input = dynamic(function () {\n  return import(\"../form-components/Input\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../form-components/Input\")];\n    },\n    modules: [\"../form-components/Input\"]\n  }\n});\nvar Checkbox = dynamic(function () {\n  return import(\"../form-components/Checkbox\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../form-components/Checkbox\")];\n    },\n    modules: [\"../form-components/Checkbox\"]\n  }\n});\nimport { setLoading, hideCartBar } from \"../../redux/actions\";\nimport projectSettings from \"../../constants/projectSettings\";\nimport { confirmShipment, authorizeCharge, authorizeSubscriptionBank, authorizeSubscriptionProfile, authorizeSubscription, placeOrderNew, authorizeChargeBank, authorizeChargeProfile } from \"../../services/api\";\nimport { generateOrderObj } from \"../../services/helpers/cart\";\nimport { clearCart } from \"../../redux/actions/cart\";\nimport Cleave from \"cleave.js/react\";\nimport { addCardAuthorize, getCards } from \"../../redux/actions/cards\";\nimport reactComponentDebounce from \"react-component-debounce\";\nvar DebounceCreditCard = reactComponentDebounce({\n  valuePropName: \"value\",\n  triggerMs: 1000\n})(Cleave);\nvar DebounceInput = reactComponentDebounce({\n  valuePropName: \"value\",\n  triggerMs: 1000\n})(Input);\nvar Panel = Collapse.Panel;\n\nvar CheckoutPayment = /*#__PURE__*/function (_React$Component) {\n  _inherits(CheckoutPayment, _React$Component);\n\n  var _super = _createSuper(CheckoutPayment);\n\n  function CheckoutPayment(props) {\n    var _this;\n\n    _classCallCheck(this, CheckoutPayment);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"tglCard\", function () {\n      _this.setState(function (prevState) {\n        _this.props.form.setFieldsValue({\n          paymentProfile: null\n        });\n\n        if (prevState.collapseKey && prevState.collapseKey.includes(\"card\")) {\n          return {\n            isCard: false,\n            collapseKey: [\"bank\"]\n          };\n        }\n\n        return {\n          isCard: true,\n          collapseKey: [\"card\"]\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFailed\", function (res) {\n      _this.props.setLoading(false);\n\n      _this.setState({\n        isFailed: true\n      });\n\n      var onFailed = _this.props.onFailed;\n\n      if (typeof onFailed === \"function\") {\n        onFailed(res);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"combinePromiseProduct\", function (promise, el) {\n      return new Promise(function (res) {\n        promise.then(function (resX) {\n          if (resX.data.status) {\n            res(_objectSpread(_objectSpread({}, el), {}, {\n              subscriptionFailed: false,\n              subscriptionId: resX.data.subscriptionid\n            }));\n          } else {\n            res(_objectSpread(_objectSpread({}, el), {}, {\n              subscriptionFailed: true\n            }));\n          }\n        })[\"catch\"](function (resX) {\n          res(_objectSpread(_objectSpread({}, el), {}, {\n            subscriptionFailed: true\n          }));\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"generateSubsData\", function (el, details) {\n      var customAmount = parseFloat(el.subTotal); // + (Math.random() * 100)\n\n      var billto = details.billto,\n          profileid = details.profileid,\n          paymentid = details.paymentid,\n          cardnumber = details.cardnumber,\n          cardcode = details.cardcode,\n          expiry = details.expiry;\n      var subsData = {\n        amount: parseFloat(customAmount.toFixed(2)),\n        name: billto.firstName + billto.lastName,\n        schedule: {\n          interval: {\n            length: \"1\",\n            unit: \"months\"\n          },\n          startDate: moment().format(\"YYYY-MM-DD\"),\n          totalOccurrences: el.subscriptionMeta.duration || \"1\"\n        },\n        billto: {\n          firstName: billto.firstName,\n          lastName: billto.lastName\n        }\n      };\n\n      if (profileid && paymentid) {\n        return _objectSpread(_objectSpread({}, subsData), {}, {\n          profileid: profileid,\n          paymentid: paymentid\n        });\n      }\n\n      if (cardnumber && cardcode && expiry) return _objectSpread(_objectSpread({}, subsData), {}, {\n        cardnumber: cardnumber,\n        cardcode: cardcode,\n        expiry: expiry\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"formatCreditCardNumber\", function (value) {\n      if (!value) {\n        return value;\n      }\n\n      var issuer = Payment.fns.cardType(value);\n      var clearValue = clearNumber(value);\n      var nextValue;\n\n      switch (issuer) {\n        case \"amex\":\n          nextValue = \"\".concat(clearValue.slice(0, 4), \" \").concat(clearValue.slice(4, 10), \" \").concat(clearValue.slice(10, 15));\n          break;\n\n        case \"dinersclub\":\n          nextValue = \"\".concat(clearValue.slice(0, 4), \" \").concat(clearValue.slice(4, 10), \" \").concat(clearValue.slice(10, 14));\n          break;\n\n        default:\n          nextValue = \"\".concat(clearValue.slice(0, 4), \" \").concat(clearValue.slice(4, 8), \" \").concat(clearValue.slice(8, 12), \" \").concat(clearValue.slice(12, 19));\n          break;\n      }\n\n      return nextValue.trim();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"makeSubsPromise\", function (order, details) {\n      return order.products.map(function (el) {\n        if (el.isSubscribed) {\n          var subsData = _this.generateSubsData(el, details);\n\n          if (subsData.routingNumber) {\n            return _this.combinePromiseProduct(authorizeSubscriptionBank(subsData), el);\n          }\n\n          if (subsData.profileid) {\n            return _this.combinePromiseProduct(authorizeSubscriptionProfile(subsData), el);\n          }\n\n          return _this.combinePromiseProduct(authorizeSubscription(subsData), el);\n        } else {\n          return new Promise(function (res) {\n            res(el);\n          });\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"finalOrderSubmit\", function (orderApi) {\n      // this.setState({loading: false})\n      orderApi.then(function (res) {\n        var resJson = res.data;\n\n        if (resJson.status) {\n          var _this$props = _this.props,\n              onSubmit = _this$props.onSubmit,\n              _setLoading = _this$props.setLoading,\n              _clearCart = _this$props.clearCart,\n              _hideCartBar = _this$props.hideCartBar;\n\n          _setLoading(false);\n\n          _clearCart();\n\n          _hideCartBar();\n\n          if (typeof onSubmit === \"function\") {\n            onSubmit(resJson.data);\n          }\n        } else {\n          _this.onFailed(resJson); //   this.setState({\n          //     modalData: someThingWrong,\n          //     modalTitle: wrongModalTitle,\n          //     modal: true,\n          //     SpinnerToggle: false\n          //   });\n\n        }\n      })[\"catch\"](function (err) {\n        _this.onFailed(err); // this.setState({\n        //     modalData: someThingWrong,\n        //     modalTitle: wrongModalTitle,\n        //     modal: true,\n        //     SpinnerToggle: false\n        // });\n\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function (e) {\n      e.preventDefault();\n      var _this$props2 = _this.props,\n          shippingSendData = _this$props2.shippingSendData,\n          address = _this$props2.address;\n      var isCard = _this.state.isCard;\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          // this.state = {loading: true}\n          _this.props.setLoading(true);\n\n          if (shippingSendData.shipmentid === \"custom_rates\") {\n            var order = _this.generateOrder();\n\n            order.then(function (order) {\n              // this.setState({loading: false})\n              // this.props.setLoading(false)\n              if (values.paymentProfile) {\n                _this.onProfilePay(order, values);\n              } else if (isCard) {\n                _this.onCardPay(order, values);\n              } else {\n                _this.onBankPay(order, values);\n              }\n            })[\"catch\"](_this.onFailed);\n          } else {\n            confirmShipment(_objectSpread({}, shippingSendData)).then(function (res) {\n              if (res.data.status && res.data.data) {\n                _this.setState({\n                  confirmShipRes: res.data.data\n                }, function () {\n                  var order = _this.generateOrder();\n\n                  order.then(function (order) {\n                    // this.setState({loading: false})\n                    // this.props.setLoading(false)\n                    if (values.paymentProfile) {\n                      _this.onProfilePay(order, values);\n                    } else if (isCard) {\n                      _this.onCardPay(order, values);\n                    } else {\n                      _this.onBankPay(order, values);\n                    }\n                  })[\"catch\"](_this.onFailed);\n                });\n              } else {\n                _this.onFailed(res);\n              }\n            })[\"catch\"](_this.onFailed);\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCardPay\", function (order, values) {\n      var address = _this.props.address;\n      var cardNumber = values.cardnumber,\n          cvv = values.cvv,\n          cardname = values.cardname,\n          expDate = values.expiry;\n      var cardnumber = cardNumber.replace(/ /g, \"\");\n      var expiry = \"20\" + expDate.split(\"/\").reverse().join(\"-\");\n      var amount = order.grandTotal,\n          countryTax = order.countryTax,\n          userDetails = order.userDetails,\n          shippingCharge = order.shippingCharge,\n          products = order.products;\n      var customAmount = amount;\n\n      var addressStr = address.addressStr,\n          state = address.state,\n          city = address.city,\n          zip = address.zip,\n          other = address.other,\n          email = address.email,\n          addressRest = _objectWithoutProperties(address, [\"addressStr\", \"state\", \"city\", \"zip\", \"other\", \"email\"]);\n\n      var data = {\n        cardnumber: cardnumber,\n        expiry: expiry,\n        cardcode: cvv,\n        amount: parseFloat(customAmount.toFixed(2)),\n        tax: {\n          amount: countryTax,\n          name: \"Country Tax - \".concat(userDetails.country)\n        },\n        shipping: {\n          amount: shippingCharge,\n          name: \"Ship to - \".concat(userDetails.state)\n        },\n        lineItems: products.map(function (el) {\n          return {\n            itemId: el.itemId,\n            name: el.title,\n            description: \"-\",\n            quantity: el.qty,\n            unitPrice: el.unitPrice\n          };\n        }),\n        billto: {\n          address: addressStr\n        },\n        shipTo: {\n          address: addressStr\n        }\n      };\n      authorizeCharge(data).then(function (res) {\n        if (res.data.status) {\n          var transactionId = res.data.transactionid;\n          var savecard = values.savecard;\n\n          if (savecard) {\n            var bodyData = {\n              cardnumber: cardnumber,\n              expmonth: expDate.split(\"/\")[0],\n              expyear: expDate.split(\"/\")[1],\n              cvc: cvv,\n              userid: _this.props.userId || _this.props.user._id\n            };\n\n            _this.props.addCardAuthorize({\n              user: _this.props.user,\n              oldCards: _this.props.cards,\n              card: bodyData\n            });\n          }\n\n          Promise.all(_this.makeSubsPromise(order, _objectSpread(_objectSpread({}, data), {}, {\n            billto: _objectSpread(_objectSpread({}, data.billto), {}, {\n              firstName: address.firstname,\n              lastName: address.lastname\n            })\n          }))).then(function (res) {\n            var sendAbleOrder = _objectSpread(_objectSpread({}, order), {}, {\n              products: res,\n              transactionId: transactionId\n            });\n\n            _this.finalOrderSubmit(placeOrderNew(sendAbleOrder));\n          });\n        } else {\n          _this.onFailed(res);\n        }\n      })[\"catch\"](function (err) {\n        _this.onFailed(err);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBankPay\", function (order, values) {\n      var address = _this.props.address;\n      var account_type = values.account_type,\n          bank_routing_number = values.bank_routing_number,\n          bank_checking_number = values.bank_checking_number;\n      var amount = order.grandTotal,\n          countryTax = order.countryTax,\n          userDetails = order.userDetails,\n          shippingCharge = order.shippingCharge,\n          products = order.products;\n      var customAmount = amount;\n\n      var addressStr = address.addressStr,\n          state = address.state,\n          city = address.city,\n          zip = address.zip,\n          other = address.other,\n          email = address.email,\n          addressRest = _objectWithoutProperties(address, [\"addressStr\", \"state\", \"city\", \"zip\", \"other\", \"email\"]);\n\n      var data = {\n        accountType: account_type,\n        routingNumber: bank_routing_number,\n        accountNumber: bank_checking_number,\n        amount: parseFloat(customAmount.toFixed(2)),\n        tax: {\n          amount: countryTax,\n          name: \"Country Tax - \".concat(userDetails.country)\n        },\n        shipping: {\n          amount: shippingCharge,\n          name: \"Ship to - \".concat(userDetails.state)\n        },\n        lineItems: products.map(function (el) {\n          return {\n            itemId: el.itemId,\n            name: el.title,\n            description: \"-\",\n            quantity: el.qty,\n            unitPrice: el.unitPrice\n          };\n        }),\n        billto: {\n          address: addressStr\n        },\n        shipTo: _objectSpread({\n          address: addressStr\n        }, addressRest)\n      };\n      authorizeChargeBank(data).then(function (res) {\n        if (res.data.status) {\n          var transactionId = res.data.transactionid;\n          Promise.all(_this.makeSubsPromise(order, _objectSpread(_objectSpread({}, data), {}, {\n            billto: _objectSpread(_objectSpread({}, data.billto), {}, {\n              firstName: address.firstname,\n              lastName: address.lastname\n            })\n          }))).then(function (res) {\n            var sendAbleOrder = _objectSpread(_objectSpread({}, order), {}, {\n              products: res,\n              transactionId: transactionId\n            });\n\n            _this.finalOrderSubmit(placeOrderNew(sendAbleOrder));\n          });\n        } else {\n          _this.onFailed(res);\n        }\n      })[\"catch\"](function (err) {\n        _this.onFailed(err);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onProfilePay\", function (order, values) {\n      var address = _this.props.address;\n      var account_type = values.account_type,\n          bank_routing_number = values.bank_routing_number,\n          bank_checking_number = values.bank_checking_number,\n          paymentProfile = values.paymentProfile;\n      var amount = order.grandTotal,\n          countryTax = order.countryTax,\n          userDetails = order.userDetails,\n          shippingCharge = order.shippingCharge,\n          products = order.products;\n      var customAmount = amount;\n\n      var addressStr = address.addressStr,\n          state = address.state,\n          city = address.city,\n          zip = address.zip,\n          other = address.other,\n          email = address.email,\n          addressRest = _objectWithoutProperties(address, [\"addressStr\", \"state\", \"city\", \"zip\", \"other\", \"email\"]);\n\n      var data = {\n        paymentid: paymentProfile.customerPaymentProfileId,\n        profileid: paymentProfile.customerProfileId,\n        amount: parseFloat(customAmount.toFixed(2))\n      };\n      authorizeChargeProfile(data).then(function (res) {\n        if (res.data.status) {\n          var transactionId = res.data.data && res.data.data.transactionResponse && res.data.data.transactionResponse.transId;\n          Promise.all(_this.makeSubsPromise(order, _objectSpread(_objectSpread({}, data), {}, {\n            billto: {\n              address: addressStr,\n              firstName: address.firstname,\n              lastName: address.lastname\n            },\n            shipto: {\n              address: addressStr\n            }\n          }))).then(function (res) {\n            var sendAbleOrder = _objectSpread(_objectSpread({}, order), {}, {\n              products: res,\n              transactionId: transactionId\n            });\n\n            _this.finalOrderSubmit(placeOrderNew(sendAbleOrder));\n          })[\"catch\"](_this.onFailed);\n        } else {\n          _this.onFailed(res);\n        }\n      })[\"catch\"](function (err) {\n        _this.onFailed(err);\n      });\n    });\n\n    _this.state = {\n      email: props.email,\n      address: props.address,\n      shippingDetail: props.shippingDetail,\n      isCard: true,\n      collapseKey: [\"card\"],\n      isFailed: false\n    };\n    _this.generateOrder = _this.generateOrder.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CheckoutPayment, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props3 = this.props,\n          getCards = _this$props3.getCards,\n          user = _this$props3.user;\n\n      if (user && user._id) {\n        getCards(user._id);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.cards !== this.props.cards && this.state.collapseKey) {\n        this.setState({\n          collapseKey: null\n        });\n      }\n    }\n  }, {\n    key: \"generateOrder\",\n    value: function () {\n      var _generateOrder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(paymentResponse) {\n        var isFirst,\n            confirmShipRes,\n            _this$props4,\n            shippingSendData,\n            cart,\n            user,\n            referrer,\n            address,\n            billingAddress,\n            refId,\n            _ref,\n            shipmentid,\n            selected_rate,\n            postage_label,\n            trackingcode,\n            tracker,\n            fees,\n            shippingDetails,\n            order,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                isFirst = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;\n                confirmShipRes = this.state.confirmShipRes;\n                _this$props4 = this.props, shippingSendData = _this$props4.shippingSendData, cart = _this$props4.cart, user = _this$props4.user, referrer = _this$props4.referrer, address = _this$props4.address, billingAddress = _this$props4.billingAddress; // if(isFirst){\n                //     await confirmShipment({\n                //         ...shippingSendData\n                //     })\n                //     .then(res => {\n                //         if(res.data.status && res.data.data){\n                //             this.setState({\n                //                 confirmShipRes: res.data.data\n                //             })\n                //         }\n                //     })\n                //     .catch(console.log)\n                // }\n\n                refId = referrer && referrer.referralUrlId || null;\n                _ref = confirmShipRes || {}, shipmentid = _ref.id, selected_rate = _ref.selected_rate, postage_label = _ref.postage_label, trackingcode = _ref.tracking_code, tracker = _ref.tracker, fees = _ref.fees;\n                shippingDetails = _objectSpread(_objectSpread({}, confirmShipRes), {}, {\n                  shipmentid: shipmentid,\n                  rateid: selected_rate && selected_rate.id,\n                  rate: selected_rate && selected_rate.rate,\n                  label: postage_label && postage_label.label_url,\n                  trackingcode: trackingcode,\n                  trackerid: tracker && tracker.id,\n                  fees: fees,\n                  service: selected_rate && selected_rate.service,\n                  carrier: selected_rate && selected_rate.carrier || \"shipment_failed\"\n                });\n                order = generateOrderObj({\n                  referralId: refId,\n                  cart: cart,\n                  user: user,\n                  confirmShipRes: shippingDetails,\n                  stateObj: {\n                    paymentMethod: \"Authorize\",\n                    address: address,\n                    billingAddress: billingAddress\n                  }\n                });\n                return _context.abrupt(\"return\", order);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function generateOrder(_x) {\n        return _generateOrder.apply(this, arguments);\n      }\n\n      return generateOrder;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // console.log(this.props.cards);\n      var componentClass = \"c-checkout-payment\";\n      var _this$props5 = this.props,\n          form = _this$props5.form,\n          user = _this$props5.user,\n          cards = _this$props5.cards;\n      var isLogin = user._id ? true : false;\n      var _this$state = this.state,\n          email = _this$state.email,\n          address = _this$state.address,\n          shippingDetail = _this$state.shippingDetail,\n          collapseKey = _this$state.collapseKey,\n          isCard = _this$state.isCard;\n      var getFieldDecorator = form.getFieldDecorator,\n          getFieldValue = form.getFieldValue;\n      var profileValue = getFieldValue(\"paymentProfile\"); //  console.log(getFieldValue(\"email\"));\n\n      return __jsx(\"div\", {\n        className: componentClass\n      }, __jsx(Form, {\n        onSubmit: this.onSubmit\n      }, __jsx(TitleList, {\n        versions: [\"sm-border\"],\n        parentClass: componentClass,\n        title: \"Contact Info.\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"email\", {\n        rules: [{\n          required: true,\n          message: \"Please input your E-mail!\"\n        }, {\n          pattern: regex.email,\n          message: \"Please enter a valid E-mail!\"\n        }],\n        initialValue: email\n      })(__jsx(DebounceInput, {\n        disabled: true,\n        label: \"E-mail\"\n      })))), __jsx(TitleList, {\n        versions: [\"sm-border\"],\n        parentClass: componentClass,\n        title: \"Address\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"address\", {\n        rules: [{\n          required: true,\n          message: \"Please input your Address!\"\n        }],\n        initialValue: address.addressStr\n      })(__jsx(DebounceInput, {\n        disabled: true,\n        label: \"address\"\n      })))), isLogin && cards && cards.length > 0 && __jsx(TitleList, {\n        parentClass: componentClass,\n        title: __jsx(\"span\", {\n          onClick: this.tglCard\n        }, \"Pay with Saved Cards or Account\")\n      }, getFieldDecorator(\"paymentProfile\", {\n        initialValue: cards.find(function (el) {\n          return el.isDefault;\n        }) || cards[0]\n      })(__jsx(Radio.Group, {\n        // value = {cards.find((el) => el.isDefault) || cards[0]}\n        className: \"underline\",\n        onChange: function onChange(e) {\n          var value = e.target.value;\n\n          if (value !== null) {\n            // setFieldsValue({\n            //     newAddress: false\n            // })\n            _this2.setState({\n              collapseKey: null\n            });\n          }\n        }\n      }, cards.map(function (el, i) {\n        //   console.log(el);\n        if (el.creditCard) {\n          return __jsx(Radio, {\n            key: i,\n            value: el\n          }, el.creditCard.cardNumber);\n        } else if (el.bankAccount) {\n          return __jsx(Radio, {\n            key: i,\n            value: el\n          }, __jsx(\"span\", null, \"Account Number \", el.bankAccount.accountNumber));\n        }\n\n        return null;\n      })))), __jsx(TitleList, {\n        parentClass: componentClass,\n        title: __jsx(\"span\", null, \"Pay with Card \")\n      }, __jsx(Form.Item, null, getFieldDecorator(\"cardpayment\", {})(__jsx(Radio.Group, {\n        className: \"add\",\n        onChange: function onChange(e) {\n          var value = e.target.value;\n\n          if (value !== null) {\n            // setFieldsValue({\n            //     newAddress: false\n            // })\n            _this2.props.form.setFieldsValue({\n              paymentProfile: null,\n              bankpayment: null\n            }); // console.log(value);\n\n\n            _this2.setState({\n              collapseKey: [\"card\"]\n            });\n          }\n        }\n      }, __jsx(Radio, {\n        value: \"Pay with New Card\"\n      }, \"+ Add New\"), __jsx(\"span\", null)))), __jsx(Collapse, {\n        destroyInactivePanel: true,\n        bordered: false,\n        activeKey: collapseKey\n      }, __jsx(Panel, {\n        header: null,\n        key: \"card\"\n      }, __jsx(React.Fragment, null, __jsx(Form.Item, null, getFieldDecorator(\"cardnumber\", {\n        rules: isCard && !profileValue && [{\n          required: true,\n          message: \"Please enter your card number!\"\n        }, {\n          min: 19,\n          message: \"Please enter valid card number!\"\n        }]\n      })( // <InputMask\n      //     label=\"Card Number\"\n      //     mask=\"9999-9999-9999-9999\"\n      // />\n      __jsx(DebounceCreditCard, {\n        className: \"c-input c-input__input\",\n        placeholder: \"XXXX XXXX XXXX XXXX\",\n        options: {\n          creditCard: true\n        },\n        onChange: function onChange(key, value) {//  console.log({ key });\n        }\n      }))), __jsx(Form.Item, null, getFieldDecorator(\"cardname\", {\n        rules: isCard && !profileValue && [{\n          required: true,\n          message: \"Please enter cardholder name!\"\n        }]\n      })(__jsx(DebounceInput, {\n        label: \"Cardholder Name\"\n      }))), __jsx(\"div\", {\n        className: \"container-fluid p-0\"\n      }, __jsx(\"div\", {\n        className: \"row\"\n      }, __jsx(\"div\", {\n        className: \"col-6 col-sm-8 \"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"expiry\", {\n        rules: isCard && !profileValue && [{\n          required: true,\n          message: \"Please enter expiration date!\"\n        }]\n      })(__jsx(Cleave, {\n        className: \"c-input c-input__input\",\n        options: {\n          date: true,\n          datePattern: [\"m\", \"y\"]\n        },\n        placeholder: \"Expiry Date\",\n        onChange: function onChange(event) {// console.log(\n          //   event.target.rawValue,\n          //   event.target.value\n          // );\n        }\n      })))), __jsx(\"div\", {\n        className: \"col-6 col-sm-4\" // style={{ marginTop: \"8px\" }}\n\n      }, __jsx(Form.Item, null, getFieldDecorator(\"cvv\", {\n        rules: isCard && !profileValue && [{\n          required: true,\n          message: \"Please enter cvv number!\"\n        }, {\n          max: 4,\n          message: \"Please enter correct CVV\"\n        }]\n      })(__jsx(DebounceInput, {\n        label: \"CVV Code\",\n        type: \"number\"\n      })))))), isLogin && __jsx(Form.Item, null, getFieldDecorator(\"savecard\", {\n        valuePropName: \"checked\",\n        initialValue: false\n      })(__jsx(Checkbox, {\n        versions: [\"dark\"]\n      }, \"Save this card for next time\"))))))), __jsx(TitleList, {\n        versions: [\"sm-border\"],\n        parentClass: componentClass,\n        title: __jsx(\"span\", null, \"Pay with Account\")\n      }, __jsx(Form.Item, null, getFieldDecorator(\"bankpayment\", {})(__jsx(Radio.Group, {\n        className: \"add\",\n        onChange: function onChange(e) {\n          var value = e.target.value;\n\n          if (value !== null) {\n            // setFieldsValue({\n            //     newAddress: false\n            // })\n            _this2.props.form.setFieldsValue({\n              paymentProfile: null,\n              cardpayment: null\n            }); //    console.log(value);\n\n\n            _this2.setState({\n              collapseKey: [\"bank\"]\n            });\n          }\n        }\n      }, __jsx(Radio, {\n        value: \"Pay with New Card\"\n      }, \"+ Add New\"), __jsx(\"span\", null)))), __jsx(Collapse, {\n        destroyInactivePanel: true,\n        bordered: false,\n        activeKey: collapseKey\n      }, __jsx(Panel, {\n        header: null,\n        key: \"bank\"\n      }, __jsx(React.Fragment, null, __jsx(Form.Item, null, getFieldDecorator(\"name_acc\", {\n        rules: !isCard && !profileValue && [{\n          required: true,\n          message: \"Please enter your name!\"\n        }]\n      })(__jsx(DebounceInput, {\n        label: \"Name on Account\"\n      }))), __jsx(Form.Item, null, getFieldDecorator(\"bank_routing_number\", {\n        rules: !isCard && !profileValue && [{\n          required: true,\n          message: \"Please enter routing number!\"\n        }]\n      })(__jsx(DebounceInput, {\n        label: \"Bank Routing Number*\"\n      }))), __jsx(Form.Item, null, getFieldDecorator(\"bank_checking_number\", {\n        rules: !isCard && !profileValue && [{\n          required: true,\n          message: \"Please enter checking account number!\"\n        }, {\n          min: 13,\n          message: \"checking number must have 13 digits\"\n        }, {\n          max: 13,\n          message: \"checking number must have 13 digits\"\n        }, {\n          pattern: /\\d+/,\n          message: \"checking number must have only digits\"\n        }]\n      })(__jsx(DebounceInput, {\n        label: \"Checking Account Number*\"\n      }))), __jsx(Form.Item, null, getFieldDecorator(\"account_type\", {\n        initialValue: \"checking\" // rules: !isCard && [{\n        //     required: true,\n        //     message: \"Please enter account type!\"\n        // }]\n\n      })(__jsx(Select, null, projectSettings.accountTypeOpt.map(function (el, key) {\n        return __jsx(Option, {\n          key: key,\n          value: el.value\n        }, el.label);\n      })))), isLogin && __jsx(Form.Item, null, getFieldDecorator(\"savecard\", {\n        valuePropName: \"checked\",\n        initialValue: false\n      })(__jsx(Checkbox, {\n        versions: [\"dark\"]\n      }, \"Save this account for next time\"))))))), !isLogin && __jsx(\"div\", {\n        className: \"col-12\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"saveaddress_ship\", {\n        valuePropName: \"checked\",\n        initialValue: true\n      })(__jsx(Checkbox, {\n        versions: [\"dark\"]\n      }, \"I am interested in product release and news.Sign me Up!*\")))), __jsx(TitleList, {\n        versions: [\"sm-border\"]\n      }, __jsx(\"div\", {\n        className: \"row\",\n        style: {\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          alignItems: \"center\"\n        }\n      }, __jsx(\"div\", {\n        style: {\n          marginBottom: \"15px\"\n        }\n      }, __jsx(\"input\", {\n        type: \"checkbox\"\n      }), __jsx(\"span\", {\n        style: {\n          fontSize: \"20px\",\n          marginBottom: \"30px\",\n          marginLeft: \"15px\",\n          color: \"#000\"\n        }\n      }, \"I\\u2019m interested in product releases and news. Sign me up!*\")), __jsx(Button, {\n        parentClass: \"c-checkout\",\n        theme: \"dark\"\n      }, \"Place order\")), __jsx(\"div\", {\n        className: \"row\",\n        style: {\n          justifyContent: \"center\",\n          textAlign: \"center\"\n        }\n      }, __jsx(\"p\", {\n        style: {\n          marginTop: \"15px\",\n          color: \"#000\"\n        }\n      }, \"*By signing up or placing and order, you are consenting \", __jsx(\"br\", null), \" \", \"to our \", __jsx(\"i\", {\n        style: {\n          fontWeight: \"700\"\n        }\n      }, \"privacy policy.\"))))));\n    }\n  }]);\n\n  return CheckoutPayment;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.user,\n    cart: state.cart,\n    cards: state.cards.cards,\n    referrer: state.referrer\n  };\n};\n\nvar mapActionToProps = {\n  addCardAuthorize: addCardAuthorize,\n  getCards: getCards,\n  setLoading: setLoading,\n  clearCart: clearCart,\n  hideCartBar: hideCartBar\n};\nexport default connect(mapStateToProps, mapActionToProps)(Form.create({\n  name: \"CheckoutPayment\"\n})(CheckoutPayment));","map":null,"metadata":{},"sourceType":"module"}