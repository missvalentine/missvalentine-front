{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as actionTypes from \"../actions/type\";\nconst initiaState = {\n  article: [],\n  currentTag: \"All\",\n  current: {},\n  pageNo: 0\n};\n\nconst add = (state, action) => {\n  if (state.currentTag !== action.tag) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      article: action.payload,\n      pageNo: action.pageNo,\n      currentTag: action.tag,\n      current: {}\n    });\n  } else {\n    let curValue = state.article;\n    let value = curValue.concat(action.payload);\n    return _objectSpread(_objectSpread({}, state), {}, {\n      article: value,\n      pageNo: action.pageNo\n    });\n  }\n};\n\nconst setCurrent = (state, action) => {\n  console.log(\"blog state\", state);\n  return _objectSpread(_objectSpread({}, state), {}, {\n    current: state.article[action.index]\n  });\n};\n\nconst clearCurrent = (state, action) => {\n  console.log(\"clear reducr\");\n  return state;\n};\n\nconst reducer = (state = initiaState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_ALL:\n      return add(state, action);\n\n    case actionTypes.GET_ARTICLE:\n      return setCurrent(state, action);\n\n    case \"CLEAR\":\n      return clearCurrent(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/akshataggarwal/Documents/Coding Files/webd projects/missnew front/redux/reducers/blog.js"],"names":["actionTypes","initiaState","article","currentTag","current","pageNo","add","state","action","tag","payload","curValue","value","concat","setCurrent","console","log","index","clearCurrent","reducer","type","GET_ALL","GET_ARTICLE"],"mappings":";;;;;;AAAA,OAAO,KAAKA,WAAZ,MAA6B,iBAA7B;AACA,MAAMC,WAAW,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,UAAU,EAAE,KAFO;AAGnBC,EAAAA,OAAO,EAAE,EAHU;AAInBC,EAAAA,MAAM,EAAE;AAJW,CAApB;;AAOA,MAAMC,GAAG,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAE9B,MAAID,KAAK,CAACJ,UAAN,KAAqBK,MAAM,CAACC,GAAhC,EAAqC;AACpC,2CACIF,KADJ;AAECL,MAAAA,OAAO,EAAEM,MAAM,CAACE,OAFjB;AAGCL,MAAAA,MAAM,EAAEG,MAAM,CAACH,MAHhB;AAICF,MAAAA,UAAU,EAAEK,MAAM,CAACC,GAJpB;AAKCL,MAAAA,OAAO,EAAE;AALV;AAOA,GARD,MAQO;AACN,QAAIO,QAAQ,GAAGJ,KAAK,CAACL,OAArB;AACA,QAAIU,KAAK,GAAGD,QAAQ,CAACE,MAAT,CAAgBL,MAAM,CAACE,OAAvB,CAAZ;AACA,2CACIH,KADJ;AAECL,MAAAA,OAAO,EAAEU,KAFV;AAGCP,MAAAA,MAAM,EAAEG,MAAM,CAACH;AAHhB;AAKA;AACD,CAnBD;;AAqBA,MAAMS,UAAU,GAAG,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACrCO,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BT,KAA1B;AACA,yCACIA,KADJ;AAECH,IAAAA,OAAO,EAAEG,KAAK,CAACL,OAAN,CAAcM,MAAM,CAACS,KAArB;AAFV;AAIA,CAND;;AAQA,MAAMC,YAAY,GAAG,CAACX,KAAD,EAAQC,MAAR,KAAmB;AACvCO,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,SAAOT,KAAP;AACA,CAHD;;AAIA,MAAMY,OAAO,GAAG,CAACZ,KAAK,GAAGN,WAAT,EAAsBO,MAAtB,KAAiC;AAChD,UAAQA,MAAM,CAACY,IAAf;AACC,SAAKpB,WAAW,CAACqB,OAAjB;AACC,aAAOf,GAAG,CAACC,KAAD,EAAQC,MAAR,CAAV;;AACD,SAAKR,WAAW,CAACsB,WAAjB;AACC,aAAOR,UAAU,CAACP,KAAD,EAAQC,MAAR,CAAjB;;AACD,SAAK,OAAL;AACC,aAAOU,YAAY,CAACX,KAAD,EAAQC,MAAR,CAAnB;;AACD;AACC,aAAOD,KAAP;AARF;AAUA,CAXD;;AAYA,eAAeY,OAAf","sourcesContent":["import * as actionTypes from \"../actions/type\";\nconst initiaState = {\n\tarticle: [],\n\tcurrentTag: \"All\",\n\tcurrent: {},\n\tpageNo: 0,\n};\n\nconst add = (state, action) => {\n\t\n\tif (state.currentTag !== action.tag) {\n\t\treturn {\n\t\t\t...state,\n\t\t\tarticle: action.payload,\n\t\t\tpageNo: action.pageNo,\n\t\t\tcurrentTag: action.tag,\n\t\t\tcurrent: {},\n\t\t};\n\t} else {\n\t\tlet curValue = state.article;\n\t\tlet value = curValue.concat(action.payload);\n\t\treturn {\n\t\t\t...state,\n\t\t\tarticle: value,\n\t\t\tpageNo: action.pageNo,\n\t\t};\n\t}\n};\n\nconst setCurrent = (state, action) => {\n\tconsole.log(\"blog state\", state);\n\treturn {\n\t\t...state,\n\t\tcurrent: state.article[action.index],\n\t};\n};\n\nconst clearCurrent = (state, action) => {\n\tconsole.log(\"clear reducr\");\n\treturn state;\n};\nconst reducer = (state = initiaState, action) => {\n\tswitch (action.type) {\n\t\tcase actionTypes.GET_ALL:\n\t\t\treturn add(state, action);\n\t\tcase actionTypes.GET_ARTICLE:\n\t\t\treturn setCurrent(state, action);\n\t\tcase \"CLEAR\":\n\t\t\treturn clearCurrent(state, action);\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}