{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport sessionStorage from 'redux-persist/lib/storage/session';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { createStateSyncMiddleware } from 'redux-state-sync';\nvar SET_CLIENT_STATE = 'SET_CLIENT_STATE';\nvar middlewares = [thunk, createStateSyncMiddleware({\n  // blacklist: [\"extras\", \"products\"]\n  whitelist: ['cart', 'user', 'wishList', 'checkout', 'firstSetting', 'ambassadoruser']\n})];\nvar persistConfig = {\n  key: 'root',\n  storage: storage,\n  whitelist: ['cart', 'user', 'firstSetting', 'ambassadoruser']\n};\nvar sessionRedConfig = {\n  key: 'referrer',\n  storage: sessionStorage\n};\n\nvar referrer = rootReducer.referrer,\n    otherReducer = _objectWithoutProperties(rootReducer, [\"referrer\"]);\n\nvar allReducers = combineReducers(_objectSpread(_objectSpread({}, otherReducer), {}, {\n  referrer: persistReducer(sessionRedConfig, referrer)\n}));\nvar persistedReducer = persistReducer(persistConfig, allReducers);\n\nvar makeConfiguredStore = function makeConfiguredStore(reducer, initialState) {\n  return createStore(reducer, initialState, applyMiddleware.apply(void 0, middlewares));\n};\n\nexport var makeStore = function makeStore(initialState, _ref) {\n  var isServer = _ref.isServer,\n      req = _ref.req,\n      debug = _ref.debug,\n      storeKey = _ref.storeKey;\n\n  if (isServer) {\n    initialState = initialState || {\n      fromServer: 'foo'\n    };\n    return makeConfiguredStore(allReducers, initialState);\n  } else {\n    // we need it only on client side\n    var store = makeConfiguredStore(persistedReducer, initialState);\n    store.__persistor = persistStore(store); // Nasty hack\n\n    return store;\n  }\n};\nexport var setClientState = function setClientState(clientState) {\n  return {\n    type: SET_CLIENT_STATE,\n    payload: clientState\n  };\n}; // export default (preloadedState = undefined) => {\n//   let store = createStore(\n//     persistedReducer,\n//     // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n//     preloadedState,\n//     composeWithDevTools(applyMiddleware(...middlewares))\n//   );\n//   let persistor = persistStore(store);\n//   // return { store, persistor };\n//   return store\n// };","map":null,"metadata":{},"sourceType":"module"}