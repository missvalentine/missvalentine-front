{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { getCountryName } from \"./\";\nimport { variablePriceSet } from \"./cartHealpers\"; // import { encodeUrlFn } from \"../../components\";\n\nexport const encodeUrlFn = url => url.replace(/-/g, \"_\").replace(/ /g, \"-\");\nexport const filteredAttr = (variation, attr) => {\n  const attrX = variation.map(el => {\n    const {\n      sale_price,\n      sku,\n      bar,\n      regular_price\n    } = el,\n          rest = _objectWithoutProperties(el, [\"sale_price\", \"sku\", \"bar\", \"regular_price\"]);\n\n    return _objectSpread({}, rest);\n  });\n  const attrY = attrX.filter(el => Object.keys(el).length === attr.length);\n  const attrZ = removeDuplicateObjAr(attrY);\n  return attrZ;\n};\nexport const removeDuplicateObjAr = arr => arr.reduce((r, i) => !r.some(j => Object.keys(i).length === Object.keys(j).length && !Object.keys(i).some(k => i[k] !== j[k])) ? [...r, i] : r, []);\nexport const findByMatchingProperties = (set, properties) => set.filter(function (entry) {\n  return Object.keys(properties).every(function (key) {\n    return entry[properties[key].names] === properties[key].values;\n  });\n});\nexport const findByMatchingProperties2 = (set, properties) => set.filter(function (entry) {\n  return Object.keys(properties).every(function (key) {\n    return entry[key] === properties[key];\n  });\n});\nexport const getBasicPrice = product => {\n  const {\n    verifiedAttr,\n    variation,\n    combo,\n    producttype\n  } = product;\n\n  if (combo || producttype !== \"variable\") {\n    return {\n      regular_price: product.dregularprice,\n      sale_price: product.dsaleprice\n    };\n  }\n\n  if (verifiedAttr) {\n    if (verifiedAttr.constructor === Array) {\n      if (verifiedAttr.length > 0) {\n        const findItem = variation.find(el => {\n          const keyList = Object.keys(verifiedAttr[0]);\n          const flag = keyList.every(elx => el[elx]);\n          return flag;\n        });\n\n        if (findItem) {\n          const {\n            regular_price,\n            sale_price\n          } = findItem;\n          return {\n            regular_price,\n            sale_price\n          };\n        }\n      }\n    }\n  }\n};\nexport const directAddToCart = product => {\n  const {\n    verifiedAttr\n  } = product;\n  const arr = verifiedAttr && verifiedAttr.constructor === Array ? verifiedAttr.map(el => {\n    const keys = Object.keys(el);\n    return keys.map(elx => {\n      return {\n        [elx]: {\n          label: el[elx],\n          value: el[elx]\n        }\n      };\n    });\n  }) : []; // const nulledArr =\n  //   verifiedAttr && verifiedAttr.constructor === Array\n  //     ? verifiedAttr.map(el => {\n  //         const keys = Object.keys(el);\n  //         return keys.map(elx => {\n  //           return {\n  //             [elx]: {\n  //               label: null,\n  //               value: null\n  //             }\n  //           };\n  //         });\n  //       })\n  //     : [];\n\n  const obj = arr.map(el => {\n    return el.reduce((a, b) => {\n      return _objectSpread(_objectSpread({}, a), b);\n    }, {});\n  }); // const nulledObj = nulledArr.map(el => {\n  //   return el.reduce((a, b) => {\n  //     return { ...a, ...b };\n  //   }, {});\n  // });\n\n  const newVariation = obj && obj.length ? _objectSpread({}, obj[0]) : {}; // const nulledVariation =\n  //   nulledObj && nulledObj.length\n  //     ? {\n  //         ...nulledObj[0]\n  //       }\n  //     : {};\n  // console.log({\n  //   newVariation,\n  //   product: {\n  //     ...product,\n  //     ...newVariation,\n  //   }\n  // })\n  // return {\n  //   ...product,\n  //   ...nulledVariation,\n  //   isNull: true,\n  //   qty: {\n  //     label: \"1\",\n  //     value: \"1\",\n  //   }\n  // }\n\n  return variablePriceSet(_objectSpread(_objectSpread(_objectSpread({}, product), newVariation), {}, {\n    qty: 1\n  }));\n};\nexport const getAttrListing = (attr = []) => attr.length > 0 ? Object.keys(attr[0]).map(el => ({\n  names: el,\n  values: [...new Set(attr.map(elx => elx[el]))]\n})) : [];\nexport const getSizes = product => {\n  const {\n    combo,\n    attributes\n  } = product;\n\n  if (combo !== true) {\n    const size = attributes.find(el => el.names === \"size\");\n    if (size) if (typeof size.values === \"function\") return size.values;\n  }\n\n  return [];\n};\nexport const getImagePath = product => {\n  if (product.productid) {\n    if (product.productid.featurefilepath) return product.productid.featurefilepath;\n  }\n\n  if (product.featureimage) return product.featureimage;\n  if (product.galleryimgdetails) return product.galleryimgdetails[0];\n};\nexport const getFeaturedProduct = ({\n  products,\n  countryCode = \"US\"\n}) => {\n  const filterProduct = getVisibleProducts({\n    products,\n    countryCode\n  }).filter(el => {\n    if (!el) return false;\n    if (el.featured !== true) return false;\n    return true;\n  });\n  return filterProduct;\n};\nexport const getVisibleProducts = ({\n  products,\n  countryCode = \"US\"\n}) => {\n  const countryName = getCountryName(countryCode);\n  const productsList = products.filter(el => {\n    if (!el) return false;\n    if (el.visibilitytype !== true) return false;\n\n    if (el.combo) {\n      if (el.blockedcountries) {\n        if (el.blockedcountries.includes(countryName)) return false;\n      }\n    }\n\n    if (el.productid) {\n      if (el.productid.blockedcountries) {\n        if (el.productid.blockedcountries.includes(countryName)) return false;\n      }\n    }\n\n    return true;\n  });\n  return productsList.map(el => {\n    if (el.variation) {\n      const verifiedAttr = filteredAttr(el.variation, el.attributes);\n      return _objectSpread(_objectSpread({}, el), {}, {\n        verifiedAttr,\n        visibleAttrList: getAttrListing(verifiedAttr)\n      });\n    } else return el;\n  });\n};\nexport const applyVariationFilter = (product, selectedVariation = {}) => {\n  const visibleAttr = findByMatchingProperties(product.verifiedAttr, selectedVariation);\n  return _objectSpread(_objectSpread({}, product), {}, {\n    visibleAttr,\n    visibleAttrList: getAttrListing(visibleAttr)\n  });\n};\nexport const getCategoraiesProducts = products => {\n  const productsN = products.filter(el => el.categoryid);\n  const combos = products.filter(el => el.combo);\n  const filtered = productsN.map(el => {\n    return productsN.filter(elx => {\n      if (el.categoryid[0] && elx.categoryid[0]) return el.categoryid[0]._id === elx.categoryid[0]._id;\n      return false;\n    });\n  }).sort((a, b) => {\n    if (a[0] && b[0]) if (a[0].categoryid[0] && b[0].categoryid[0]) {\n      if (a[0].categoryid[0]._id < b[0].categoryid[0]._id) return -1;\n      if (a[0].categoryid[0]._id > b[0].categoryid[0]._id) return 1;\n    }\n    return 0;\n  });\n  const productsF = filtered.filter((el, x) => {\n    if (x === 0) return true;\n\n    if (filtered[x - 1] && el[0]) {\n      if (filtered[x - 1][0]) {\n        if (filtered[x - 1][0].categoryid[0] && el[0].categoryid[0]) {\n          const prevEl = filtered[x - 1][0].categoryid[0]._id;\n          const currentEl = el[0].categoryid[0]._id;\n          return prevEl !== currentEl;\n        }\n      }\n    }\n\n    return false; // const prevEl = filtered[x - 1][0].categoryid[0]._id;\n    // const currentEl = el[0].categoryid[0]._id;\n    // return prevEl !== currentEl;\n  });\n  const cate = [...productsF, combos];\n  return cate.map(el => {\n    if (el.length) {\n      if (el[0].combo) {\n        return {\n          category: {\n            blockedcountries: [],\n            catdescription: \"Bundles\",\n            categoryid: \"Bundles\",\n            categoryslug: \"Bundles\",\n            categorytitle: \"Bundles\",\n            _id: \"Bundles\"\n          },\n          products: el\n        };\n      }\n\n      return {\n        category: _objectSpread({}, el[0].categoryid[0]),\n        products: el\n      };\n    }\n\n    return null;\n  }).filter(el => el);\n};\nexport const getVisibleCategory = (arr = [], countryCode = \"US\") => {\n  const countryName = getCountryName(countryCode);\n  return arr.filter(el => {\n    if (!el) return false;\n    if (!el.category) return false;\n\n    if (el.category.blockedcountries) {\n      if (el.category.blockedcountries.includes(countryName)) return false;\n    }\n\n    return true;\n  });\n};\nexport const getProductsByCategory = (products = [], category = \"\") => {\n  if (category.toLowerCase() === \"combos\" || category.toLowerCase() === \"kits\" || category.toLowerCase() === \"bundles\") {\n    return products.filter(el => el.combo);\n  }\n\n  return products.filter(el => {\n    if (!el.categoryid) return false;\n    const found = el.categoryid.find(elx => elx.categorytitle === category);\n    return found;\n  });\n};\nexport const getMatchCategory = (arr = [], category = \"\") => arr.find(el => el.categorytitle === category);\nexport const generateProductSlug = product => {\n  const productSlug = product.title ? product.title.toLocaleLowerCase() : product.productid && product.productid.producttitle.toLocaleLowerCase();\n  return encodeUrlFn(productSlug);\n};\nexport const addSlugToProduct = product => _objectSpread(_objectSpread({}, product), {}, {\n  productSlug: generateProductSlug(product)\n});","map":null,"metadata":{},"sourceType":"module"}