{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useState, useEffect } from \"react\";\nimport dynamic from 'next/dynamic';\nconst CheckoutLayout = dynamic(() => import(\"../components/Layouts/CheckoutLayout\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../components/Layouts/CheckoutLayout\")],\n    modules: [\"../components/Layouts/CheckoutLayout\"]\n  }\n});\nconst Layout = dynamic(() => import(\"../components/Layouts/Layout\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../components/Layouts/Layout\")],\n    modules: [\"../components/Layouts/Layout\"]\n  }\n});\nconst Heading = dynamic(() => import(\"../components/Heading\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../components/Heading\")],\n    modules: [\"../components/Heading\"]\n  }\n});\nimport { Steps } from \"antd\";\nconst CheckoutInfo = dynamic(() => import(\"../components/checkout-tabs/CheckoutInfo\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../components/checkout-tabs/CheckoutInfo\")],\n    modules: [\"../components/checkout-tabs/CheckoutInfo\"]\n  }\n});\nimport { addAddress, setEditable } from \"../redux/actions\";\nimport { connect } from \"react-redux\";\nimport projectSettings, { projectName } from \"../constants/projectSettings\";\nimport checkAddressDuplicate from \"../services/helpers/address\";\nconst CheckoutShipping = dynamic(() => import(\"../components/checkout-tabs/CheckoutShipping\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../components/checkout-tabs/CheckoutShipping\")],\n    modules: [\"../components/checkout-tabs/CheckoutShipping\"]\n  }\n});\nconst CheckoutPayment = dynamic(() => import(\"../components/checkout-tabs/CheckoutPayment\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../components/checkout-tabs/CheckoutPayment\")],\n    modules: [\"../components/checkout-tabs/CheckoutPayment\"]\n  }\n});\nconst Loader = dynamic(() => import(\"../components/Loader\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../components/Loader\")],\n    modules: [\"../components/Loader\"]\n  }\n});\nimport Link from \"next/link\";\nimport { FullModal } from \"../components/modal\";\nimport ReactIcon from \"react-icons-kit\";\nimport { ic_clear } from \"react-icons-kit/md/\";\nimport Icon from \"react-icons-kit\";\nimport { ic_error_outline } from \"react-icons-kit/md/\";\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\nconst {\n  baseUrl\n} = projectSettings;\n\nconst Checkout = (_ref) => {\n  let {\n    addAddress,\n    user,\n    isLoading\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"addAddress\", \"user\", \"isLoading\"]);\n\n  const {\n    0: activeAddress,\n    1: setActiveAddress\n  } = useState(1);\n  const {\n    0: currentStep,\n    1: setCurrentStep\n  } = useState(0);\n  const {\n    0: infoDetails,\n    1: setInfoDetails\n  } = useState({});\n  const {\n    0: mainAddress,\n    1: setMainAddress\n  } = useState(null);\n  const {\n    0: billingAddress,\n    1: setBillingAddress\n  } = useState(null);\n  const {\n    0: shippingDetail,\n    1: setShippingDetail\n  } = useState(null);\n  const {\n    0: shippingSendData,\n    1: setShippingSendData\n  } = useState(null);\n  const {\n    0: isModal,\n    1: setIsModal\n  } = useState(false);\n  const {\n    0: failedRes,\n    1: setFailedRes\n  } = useState(null);\n  const {\n    0: isSuccess,\n    1: setIsSuccess\n  } = useState(null);\n  const {\n    0: order,\n    1: setOrder\n  } = useState(null);\n  useEffect(() => {\n    if (currentStep === 2) {\n      if (props.isEditable) {\n        props.setEditable(false);\n      }\n    } else {\n      if (!props.isEditable) {\n        props.setEditable(true);\n      }\n    }\n  });\n\n  const onInfoSubmit = async (e, values, address, addressShip) => {\n    console.log(\"reached here\");\n    console.log({\n      e,\n      values\n    });\n    console.log(address);\n    const {\n      newAddress,\n      sameShipping,\n      saveaddress,\n      saveaddress_ship,\n      newAddress_ship\n    } = values;\n    let addresses = {},\n        addressA = {},\n        addressB = {};\n\n    if (!newAddress) {\n      if (sameShipping) {\n        addressA = addressB = _objectSpread({}, values.addressSelect ? _objectSpread({}, values.addressSelect) : _objectSpread({}, address)); // addressB = { ...values.addressSelect };\n\n        console.log(\"checkA 1 \", addressA);\n      } else {\n        if (!newAddress_ship) {\n          addressA = _objectSpread({}, values.addressSelect ? _objectSpread({}, values.addressSelect) : _objectSpread({}, address));\n          addressB = _objectSpread({}, values.addressSelect_ship ? _objectSpread({}, values.addressSelect_ship) : _objectSpread({}, addressShip));\n          console.log(\"checkA 2\", addressA);\n        } else {\n          const {\n            addressSelect,\n            addressSelect_ship\n          } = values,\n                rest = _objectWithoutProperties(values, [\"addressSelect\", \"addressSelect_ship\"]);\n\n          addressA = _objectSpread({}, addressSelect);\n\n          const shippingData = _objectSpread({}, rest);\n\n          addressB = {\n            addressStr: `${shippingData[\"city-ship\"]}, ${shippingData[\"state-ship\"]}, ${shippingData[\"country-ship\"]}, ${shippingData[\"zip-ship\"]}`.trim(),\n            city: `${shippingData[\"city-ship\"]}`,\n            country: `${shippingData[\"country-ship\"]}`,\n            email: shippingData.email,\n            firstname: shippingData[\"firstname_ship\"],\n            lastname: shippingData[\"lastname_ship\"],\n            phone: shippingData[\"phone_ship\"],\n            state: shippingData[\"state-ship\"],\n            zip: shippingData[\"zip-ship\"],\n            other: `${shippingData[\"city-ship\"]}, ${shippingData[\"state-ship\"]}, ${shippingData[\"country-ship\"]}`.split(\",\" || \"\")[0]\n          };\n          console.log(\"checkA 3\", addressA);\n        }\n      }\n    } else {\n      if (sameShipping) {\n        const {\n          email,\n          phone\n        } = values;\n        addressA = addressB = _objectSpread(_objectSpread({}, address), {}, {\n          //...values,\n          email,\n          phone\n        });\n        console.log(\"checkA 4\", addressA);\n      } else {\n        if (!newAddress_ship) {\n          addressA = _objectSpread(_objectSpread({}, address), {}, {\n            phone: values.phone,\n            email: values.email\n          });\n          addressB = _objectSpread({}, values.addressSelect_ship);\n        } else {\n          addressA = _objectSpread(_objectSpread({}, address), {}, {\n            phone: values.phone,\n            email: values.email\n          });\n\n          const shippingData = _objectSpread({}, values);\n\n          addressB = {\n            addressStr: `${shippingData[\"city-ship\"]}, ${shippingData[\"state-ship\"]}, ${shippingData[\"country-ship\"]}, ${shippingData[\"zip-ship\"]}`.trim(),\n            city: `${shippingData[\"city-ship\"]}`,\n            country: `${shippingData[\"country-ship\"]}`,\n            email: shippingData.email,\n            firstname: shippingData[\"firstname_ship\"],\n            lastname: shippingData[\"lastname_ship\"],\n            phone: shippingData[\"phone_ship\"],\n            state: shippingData[\"state-ship\"],\n            zip: shippingData[\"zip-ship\"],\n            other: `${shippingData[\"city-ship\"]}, ${shippingData[\"state-ship\"]}, ${shippingData[\"country-ship\"]}`.split(\",\" || \"\")[0]\n          };\n        }\n      }\n    } // const {\n    //   email,\n    //   email_ship,\n    //   firstname,\n    //   firstname_ship,\n    //   lastname,\n    //   lastname_ship,\n    //   phone,\n    //   phone_ship,\n    //   sameShipping,\n    //   saveaddress,\n    //   saveaddress_ship,\n    //   addressSelect,\n    //   addressSelect_ship,\n    // } = values;\n    // const addressA = {\n    //   ...address,\n    //   email,\n    //   firstname,\n    //   lastname,\n    //   phone,\n    // };\n    // const addressB = {\n    //   ...addressShip,\n    //   email: email_ship,\n    //   firstname: firstname_ship,\n    //   lastname: lastname_ship,\n    //   phone: phone_ship,\n    // };\n\n\n    const allAddresses = props.address.address || [];\n    const idTime = new Date().getTime();\n    console.log({\n      user\n    });\n    const userId = user._id;\n\n    const newAddressA = _objectSpread(_objectSpread({}, addressA), {}, {\n      id: idTime\n    });\n\n    const newAddressB = _objectSpread(_objectSpread({}, addressB), {}, {\n      id: idTime + 10\n    });\n\n    console.log(newAddressA);\n    console.log(allAddresses);\n    const isDuplicateA = await checkAddressDuplicate(newAddressA, allAddresses);\n    const isDuplicateB = await checkAddressDuplicate(newAddressB, allAddresses);\n\n    if (saveaddress && saveaddress_ship) {\n      if (allAddresses.length < 1 || !isDuplicateA && !isDuplicateB) {\n        addAddress(userId, [newAddressA, newAddressB], props.address, allAddresses);\n      } else if (!isDuplicateA) {\n        addAddress(userId, newAddressA, props.address, allAddresses);\n      } else if (!isDuplicateB) {\n        addAddress(userId, newAddressA, props.address, allAddresses);\n      }\n    } else if (saveaddress) {\n      if (!isDuplicateA || allAddresses.length < 1) {\n        addAddress(userId, newAddressA, props.address, allAddresses);\n      }\n    } else if (saveaddress_ship) {\n      if (!isDuplicateB || allAddresses.length < 1) {\n        addAddress(userId, newAddressB, props.address, allAddresses);\n      }\n    } // const mainAddressRaw = addressSelect\n    //   ? {\n    //       ...addressSelect,\n    //       // phone,\n    //       email,\n    //     }\n    //   : {\n    //       ...address,\n    //       email,\n    //       phone,\n    //     };\n\n\n    setInfoDetails(_objectSpread({}, values));\n    console.log(\"reached here\");\n    console.log(\"A\", addressA);\n    console.log(\"B\", addressB);\n    setMainAddress(addressA);\n    setBillingAddress( //   addressSelect_ship || addressSelect || addressShip || address\n    addressB);\n    setCurrentStep(1);\n  };\n\n  const onShippingSubmit = (e, values, shippingSendData) => {\n    setShippingDetail(values);\n    setCurrentStep(2);\n    console.log({\n      shippingSendData\n    });\n    setShippingSendData(shippingSendData);\n  };\n\n  const onPaymentSubmit = order => {\n    if (order) {\n      setOrder(order);\n      setIsSuccess(true);\n    }\n  };\n\n  const onPaymentFail = res => {\n    console.log({\n      res\n    });\n\n    switch (res.config.url) {\n      case baseUrl + \"/ship/confirm/\":\n        setFailedRes(\"shipment failed\");\n        break;\n\n      case baseUrl + \"/authorize/create/subscription/\":\n      case baseUrl + \"/authorize/create/subscription/profile/\":\n      case baseUrl + \"/authorize/create/subscription/bank/\":\n        setFailedRes(\"subscription failed\");\n        break;\n\n      case baseUrl + \"/authorize/chargeprofile/\":\n      case baseUrl + \"/authorize/charge/\":\n      case baseUrl + \"/authorize/charge/bank/\":\n        setFailedRes(\"Transaction failed\");\n        break;\n\n      default:\n        setFailedRes(\"something went wrong\");\n    }\n\n    setIsModal(true);\n  };\n\n  console.log({\n    isLoading\n  });\n  let checkoutClass = \"\";\n  let loaderClass = \"c-hidden\";\n\n  if (isLoading) {\n    checkoutClass = \"c-hidden\";\n    loaderClass = \"\";\n  }\n\n  console.log({\n    loaderClass\n  });\n\n  if (!props.isPersist) {\n    return __jsx(\"div\", null, __jsx(Loader, null));\n  } else if (props.cartItems && props.cartItems.length == 0 && !isSuccess) {\n    return __jsx(Layout, {\n      headerTheme: \"black\"\n    }, __jsx(\"div\", {\n      className: \"o-success\"\n    }, __jsx(\"div\", {\n      className: \"o-success__main o-success__main--center\"\n    }, __jsx(Heading, {\n      versions: [\"large\", \"upper\"],\n      parentClass: \"c-privacy\"\n    }, \"0 Items\"), __jsx(\"div\", {\n      className: \"mt-3\"\n    }), __jsx(Heading, {\n      versions: [\"small\"],\n      parentClass: \"c-privacy \"\n    }, \"Your bag is empty.\")), __jsx(\"div\", {\n      className: \"o-success__btn-wrap w-30 m-auto \"\n    }, __jsx(\"div\", {\n      className: \"row\",\n      style: {\n        justifyContent: \"center\"\n      }\n    }, __jsx(Link, {\n      href: \"/shop\"\n    }, __jsx(\"a\", {\n      className: \"c-btn c-btn--dark\"\n    }, \"Continue shopping\"))))), __jsx(\"br\", null));\n  }\n\n  if (isSuccess) {\n    return __jsx(Layout, {\n      headerTheme: \"black\"\n    }, __jsx(\"div\", {\n      className: \"o-success\"\n    }, __jsx(\"div\", {\n      className: \"o-success__banner\"\n    }, __jsx(\"h1\", {\n      className: \"o-success__banner--text\"\n    }, \"thank you for your order\")), __jsx(\"div\", {\n      className: \"o-success__main o-success__main--center\"\n    }, __jsx(\"br\", null), __jsx(\"h1\", {\n      className: \"o-success__main--orderno\"\n    }, \"Order Number: \", order && order._id.slice(-8)), __jsx(\"br\", null), __jsx(\"p\", {\n      className: \"o-success__descp mt-3\"\n    }, \"The order information will be sent via e-mail to\", \" \", order && order.userDetails && order.userDetails.email, \" \")), __jsx(\"div\", {\n      className: \"o-success__btn-wrap w-30 m-auto \"\n    }, __jsx(\"div\", {\n      className: \"row\",\n      style: {\n        justifyContent: \"center\"\n      }\n    }, __jsx(Link, {\n      href: \"/shop\"\n    }, __jsx(\"a\", {\n      className: \"c-btn c-btn--dark\"\n    }, \"Continue Shopping\"))))), __jsx(\"br\", null));\n  }\n\n  return __jsx(\"div\", {\n    className: \"loaderClass\"\n  }, isLoading && __jsx(Loader, null), __jsx(\"div\", {\n    className: checkoutClass\n  }, __jsx(CheckoutLayout, null, __jsx(\"div\", {\n    className: \"c-checkout\"\n  }, __jsx(Heading, {\n    parentClass: \"d-none d-md-block c-checkout \",\n    versions: [\"default\", \"upper\"]\n  }, \"Checkout\"), __jsx(\"div\", {\n    className: \"c-checkout__nav-wrapper\"\n  }, __jsx(Steps, {\n    current: currentStep\n  }, __jsx(Steps.Step, {\n    onClick: () => {\n      currentStep > 0 && setCurrentStep(0);\n    },\n    title: \"Information\"\n  }), __jsx(Steps.Step, {\n    onClick: () => {\n      currentStep > 1 && setCurrentStep(1);\n    },\n    title: \"Shipping\"\n  }), __jsx(Steps.Step, {\n    onClick: () => {\n      currentStep > 2 && setCurrentStep(2);\n    },\n    title: \"Payment\"\n  }))), __jsx(\"div\", {\n    className: \"c-checkout__main-wrapper\"\n  }, currentStep === 0 && __jsx(CheckoutInfo, {\n    oldValues: infoDetails,\n    onSubmit: onInfoSubmit\n  }), currentStep == 1 && __jsx(CheckoutShipping, {\n    oldValues: shippingDetail,\n    email: infoDetails.email,\n    address: mainAddress,\n    onSubmit: onShippingSubmit\n  }), currentStep === 2 && __jsx(CheckoutPayment, {\n    oldValues: null,\n    email: infoDetails.email,\n    onFailed: onPaymentFail,\n    shippingDetail: shippingDetail,\n    address: mainAddress,\n    billingAddress: billingAddress,\n    shippingSendData: shippingSendData,\n    onSubmit: onPaymentSubmit\n  }))), __jsx(FullModal, {\n    isOpen: isModal,\n    toggle: () => setIsModal(!isModal)\n  }, __jsx(\"div\", {\n    className: \"c-submit-r__product-selector\"\n  }, __jsx(\"div\", {\n    className: \"modal__logo-wrapper\"\n  }, __jsx(\"a\", {\n    className: \"c-logo  modal-footer__logo\",\n    href: \"/\"\n  }, __jsx(LazyLoadImage, {\n    src: \"/images/logo-new.png\",\n    className: \"modal__logo-img\",\n    alt: projectName\n  })), __jsx(\"div\", {\n    className: \"modal__heading\"\n  }, __jsx(\"h2\", {\n    className: \"modal__heading-text\"\n  }, \"Order Failed :-\"))), __jsx(\"div\", {\n    className: \"modal-dismiss\",\n    onClick: () => setIsModal(!isModal)\n  }, __jsx(ReactIcon, {\n    icon: ic_clear,\n    size: \"32\"\n  })), __jsx(\"div\", {\n    className: \"c-susbmit-r__wrapper justify-content-center\"\n  }, __jsx(Icon, {\n    icon: ic_error_outline,\n    className: \"text-center mr-4 clr-red\",\n    size: \"64\"\n  }), __jsx(\"h3\", null, failedRes)))))));\n};\n\nconst mapStateToProps = state => ({\n  address: state.address,\n  user: state.user,\n  isLoading: state.loading.isLoading,\n  isEditable: state.cart.isEditable,\n  cartItems: state.cart.items\n});\n\nconst mapActionToProps = {\n  addAddress,\n  setEditable\n};\nexport default connect(mapStateToProps, mapActionToProps)(Checkout);","map":null,"metadata":{},"sourceType":"module"}