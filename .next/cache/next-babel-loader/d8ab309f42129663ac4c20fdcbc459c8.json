{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _ from \"lodash\";\nimport { expireMonthInvalid, expireYearInvalid, cardNumberInvalid, cardDetailsNotMAtch, shippingExtraRate, defaultOrderStatus, defaultStatusInOrder, shippingStaticRate } from \"../../constants/constantMessage\"; // import { referralPresent } from \"../../components\";\n\nvar referralPresent = 25;\nimport { combineLoop } from \"box-dimension-calculator\"; // import { variablePriceSet } from \"./cartHealpers\";\n\nvar BasicFunction = /*#__PURE__*/function () {\n  function BasicFunction() {\n    _classCallCheck(this, BasicFunction);\n\n    _defineProperty(this, \"removeEmpty\", function (obj) {\n      Object.keys(obj).forEach(function (key) {\n        return obj[key] === null && delete obj[key];\n      });\n    });\n\n    _defineProperty(this, \"getSelectedAttributes\", function (item) {\n      if (item.producttype === \"variable\") return item.attributes.map(function (el) {\n        return _defineProperty({}, el.names, item[el.names].value);\n      }).filter(function (el) {\n        return el;\n      }).reduce(function (a, b) {\n        return _objectSpread(_objectSpread({}, a), b);\n      }, {});\n      return null;\n    });\n\n    _defineProperty(this, \"calculatePrice\", function (item) {\n      var saleprice = item.saleprice,\n          regularprice = item.regularprice,\n          subscribedDiscountPersent = item.subscribedDiscountPersent,\n          value = item.qty.value,\n          subscribed = item.subscribed;\n\n      if (subscribed) {\n        if (saleprice) {\n          var price = parseFloat(saleprice) * parseFloat(value) / parseFloat(subscribedDiscountPersent);\n          return price;\n        } else if (regularprice) {\n          var _price = parseFloat(regularprice) * parseFloat(value) / parseFloat(subscribedDiscountPersent);\n\n          return _price;\n        }\n\n        return 0;\n      }\n    });\n\n    _defineProperty(this, \"convertCardErrors\", function (error) {\n      switch (error) {\n        case \"Your card number is incorrect.\":\n          return cardNumberInvalid;\n\n        case \"Missing required param: card[exp_year].\":\n          return expireYearInvalid;\n\n        case \"Could not find payment information.\":\n          return cardDetailsNotMAtch;\n\n        case \"Your card's expiration year is invalid.\":\n          return expireYearInvalid;\n\n        case \"Your card's expiration month is invalid.\":\n          return expireMonthInvalid;\n\n        default:\n          return expireMonthInvalid;\n      }\n    });\n\n    _defineProperty(this, \"stripeCheckValidation\", function (paymentDetail) {\n      var cvNumber = paymentDetail.cvNumber,\n          expDate = paymentDetail.expDate,\n          cardNumber = paymentDetail.cardNumber;\n\n      if (cvNumber && cvNumber.length <= 2) {\n        return false;\n      }\n\n      if (expDate && expDate.length <= 4) {\n        return false;\n      }\n\n      if (cardNumber && cardNumber.length <= 18) {\n        return false;\n      }\n\n      return true;\n    });\n\n    _defineProperty(this, \"getShippingRates\", function (rateArr) {\n      if (rateArr.length > 0) {\n        var filteredRates = _.uniqBy(rateArr, function (e) {\n          return e.service;\n        });\n\n        var smallSorted = filteredRates.sort(function (a, b) {\n          return parseFloat(a.rate || 0) - parseFloat(b.rate || 0);\n        });\n        var Smallest = smallSorted[0];\n        var Smallest1 = smallSorted[1];\n        var Smallest2 = smallSorted[2];\n        var PriorityRaw = filteredRates.find(function (el) {\n          return el.service === \"Priority\";\n        });\n        var ExpressRaw = filteredRates.find(function (el) {\n          return el.service === \"Express\";\n        }); // const standard =\n        //   Smallest.service === \"Priority\" || Smallest.service === \"Express\"\n        //     ? null\n        //     : {\n        //         ...Smallest,\n        //         customName: \"Standard\",\n        //         customRate: parseFloat(Smallest.rate) + shippingExtraRate\n        //       };\n        // const Priority = PriorityRaw\n        //   ? {\n        //       ...PriorityRaw,\n        //       customName: \"Priority\",\n        //       customRate: parseFloat(PriorityRaw.rate) + shippingExtraRate\n        //     }\n        //   : null;\n        // const Express = ExpressRaw\n        //   ? {\n        //       ...ExpressRaw,\n        //       customName: \"Express\",\n        //       customRate: parseFloat(ExpressRaw.rate) + shippingExtraRate\n        //     }\n        //   : null;\n\n        var standard = Smallest && _objectSpread(_objectSpread({}, Smallest), {}, {\n          customName: \"Standard\",\n          customRate: parseFloat(Smallest.rate) + shippingExtraRate\n        });\n\n        var Priority = Smallest1 && _objectSpread(_objectSpread({}, Smallest1), {}, {\n          customName: \"Priority\",\n          customRate: parseFloat(Smallest1.rate) + shippingExtraRate\n        });\n\n        var Express = Smallest2 && _objectSpread(_objectSpread({}, Smallest2), {}, {\n          customName: \"Express\",\n          customRate: parseFloat(Smallest2.rate) + shippingExtraRate\n        });\n\n        return [standard, Priority, Express].filter(function (el) {\n          return el;\n        });\n      }\n\n      return rateArr; // return [\n      //   {\n      //     carrier: \"Carrier_Not_Found\",\n      //     created_at: new Date(),\n      //     currency: \"USD\",\n      //     mode: \"test\",\n      //     object: \"Rate\",\n      //     customName: \"Standard\",\n      //     rate: shippingStaticRate,\n      //     customRate: shippingStaticRate,\n      //     retail_currency: \"USD\",\n      //   }\n      // ]\n    });\n  }\n\n  _createClass(BasicFunction, [{\n    key: \"dateFun\",\n    value: function dateFun(date) {\n      var d = new Date(date),\n          month = \"\" + (d.getMonth() + 1),\n          day = \"\" + d.getDate(),\n          year = d.getFullYear();\n      if (month.length < 2) month = \"0\" + month;\n      if (day.length < 2) day = \"0\" + day;\n      return [month, day, year].join(\"/\");\n    }\n  }, {\n    key: \"dateFun2\",\n    value: function dateFun2(date) {\n      var d = new Date(date),\n          month = \"\" + (d.getMonth() + 1),\n          day = \"\" + d.getDate(),\n          year = d.getFullYear();\n      if (month.length < 2) month = \"0\" + month;\n      if (day.length < 2) day = \"0\" + day;\n      return [month, day, year].join(\"/\");\n    }\n  }, {\n    key: \"dateTimeAmPm\",\n    value: function dateTimeAmPm(date) {\n      var d = new Date(date),\n          month = \"\" + (d.getMonth() + 1),\n          day = \"\" + d.getDate(),\n          year = d.getFullYear();\n      if (month.length < 2) month = \"0\" + month;\n      if (day.length < 2) day = \"0\" + day;\n      var dateis = month + \"/\" + day + \"/\" + year + \" \";\n      var hours = d.getHours();\n      var minutes = d.getMinutes();\n      var ampm = hours >= 12 ? \"PM\" : \"AM\";\n      hours = hours % 12;\n      hours = hours ? hours : 12; // the hour '0' should be '12'\n\n      minutes = minutes < 10 ? \"0\" + minutes : minutes;\n      var strTime = hours + \":\" + minutes + \" \" + ampm;\n      return dateis + strTime;\n    }\n  }, {\n    key: \"dateTimeAmPmOld\",\n    value: function dateTimeAmPmOld(date) {\n      var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      var d = new Date(date),\n          month = \"\" + (d.getMonth() + 1),\n          day = \"\" + d.getDate(),\n          year = d.getFullYear();\n      if (month.length < 2) month = \"0\" + month;\n      if (day.length < 2) day = \"0\" + day;\n      var monthnameis = monthNames[month - 1];\n      var dateis = monthnameis + \" \" + day + \",\" + year + \" \";\n      var hours = d.getHours();\n      var minutes = d.getMinutes();\n      var ampm = hours >= 12 ? \"PM\" : \"AM\";\n      hours = hours % 12;\n      hours = hours ? hours : 12; // the hour '0' should be '12'\n\n      minutes = minutes < 10 ? \"0\" + minutes : minutes;\n      var strTime = hours + \":\" + minutes + \" \" + ampm;\n      return dateis + strTime;\n    }\n  }, {\n    key: \"dateTimeInMonthName\",\n    value: function dateTimeInMonthName(date) {\n      if (!date) return \"-\";\n      var monthNames = [\"Jan\", \"Feb\", \"March\", \"April\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n      var d = new Date(date),\n          month = \"\" + (d.getMonth() + 1),\n          day = \"\" + d.getDate(),\n          year = d.getFullYear();\n      if (month.length < 2) month = \"0\" + month;\n      if (day.length < 2) day = \"0\" + day;\n      var monthnameis = monthNames[month - 1];\n      var dateis = monthnameis + \" \" + day + \", \" + year + \" \"; //var hours = d.getHours();\n      // var minutes = d.getMinutes();\n      //  hours = hours % 12;\n      //  hours = hours ? hours : 12; // the hour '0' should be '12'\n      // minutes = minutes < 10 ? \"0\" + minutes : minutes;\n\n      return dateis;\n    }\n  }, {\n    key: \"currancyAdd\",\n    value: function currancyAdd(number) {\n      if (number >= 0) {\n        return \"$\" + number;\n      } else {\n        return \"-$\" + Math.abs(number);\n      }\n    }\n  }, {\n    key: \"nombarFormat\",\n    value: function nombarFormat(nbr) {\n      if (nbr === 0 && nbr === \"\") {\n        return \"0.00\";\n      } else {\n        if (nbr) {\n          var nr = nbr.toFixed(2);\n          nr = nr.toString();\n          var pattern = /(-?\\d+)(\\d{3})/;\n\n          while (pattern.test(nr)) {\n            nr = nr.replace(pattern, \"$1,$2\");\n          }\n\n          return nr;\n        } else {\n          return 0.0;\n        }\n      }\n    }\n  }, {\n    key: \"currancyAddWithNumber\",\n    value: function currancyAddWithNumber(numberX) {\n      var number = parseFloat(numberX);\n      var withoutUsd = this.currencyWithoutUsd(number); // return `${withoutUsd} USD`;\n\n      return \"\".concat(withoutUsd);\n    }\n  }, {\n    key: \"currencyWithoutUsd\",\n    value: function currencyWithoutUsd(numberX) {\n      if (numberX) {\n        var number = parseFloat(numberX);\n        number = number.toFixed(2);\n        var pattern = /(-?\\d+)(\\d{3})/;\n\n        if (number >= 0) {\n          number = number.toString();\n\n          while (pattern.test(number)) {\n            number = number.replace(pattern, \"$1,$2\");\n          }\n\n          return \"$\" + number;\n        } else {\n          var num = Math.abs(number);\n          num = num.toFixed(2);\n          num = num.toString();\n\n          while (pattern.test(num)) {\n            num = num.replace(pattern, \"$1,$2\");\n          }\n\n          return \"-$\" + num;\n        }\n      } else {\n        return \"$0.00\";\n      }\n    }\n  }, {\n    key: \"capitalizeFirstLetter\",\n    value: function capitalizeFirstLetter(string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n  }, {\n    key: \"sliceToNumber\",\n    value: function sliceToNumber() {\n      var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var digit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return string.slice(0, digit);\n    }\n  }, {\n    key: \"timeConverter\",\n    value: function timeConverter(UNIX_timestamp) {\n      var a = new Date(UNIX_timestamp * 1000); // var months = [\n      //   \"Jan\",\n      //   \"Feb\",\n      //   \"Mar\",\n      //   \"Apr\",\n      //   \"May\",\n      //   \"Jun\",\n      //   \"Jul\",\n      //   \"Aug\",\n      //   \"Sep\",\n      //   \"Oct\",\n      //   \"Nov\",\n      //   \"Dec\"\n      // ];\n      // var year = a.getFullYear();\n      // var month = months[a.getMonth()];\n      // var date = a.getDate();\n\n      var hour = a.getHours();\n      var min = a.getMinutes(); // var sec = a.getSeconds();\n\n      if (min < 10) {\n        min = \"0\" + min;\n      } // var ampm = \"AM\";\n\n\n      var timeis = \"\";\n\n      if (hour <= 12) {\n        timeis = hour + \":\" + min + \"AM\";\n      } else {\n        hour = parseFloat(hour) - 12;\n        timeis = hour + \":\" + min + \"PM\";\n      } //   var res = hour + \":\" + min;\n\n\n      return timeis;\n    }\n  }, {\n    key: \"currentDate\",\n    value: function currentDate() {\n      var d = new Date();\n      var year = parseInt(d.getYear()) - 100;\n      var month = d.getMonth() + 1;\n      return \"20\" + year + \"/\" + month + \"/\" + d.getDate();\n    }\n  }, {\n    key: \"currentDateYesterday\",\n    value: function currentDateYesterday() {\n      var d = new Date();\n      var year = parseInt(d.getYear()) - 100;\n      var month = d.getMonth() + 1;\n      var yesterday = new Date(d.getTime());\n      yesterday.setDate(d.getDate() - 1);\n      var date = yesterday.getDate();\n      return \"20\" + year + \"/\" + month + \"/\" + date;\n    }\n  }, {\n    key: \"currentDateBeforeDay\",\n    value: function currentDateBeforeDay(beforeDay) {\n      var d = new Date();\n      var yesterday = new Date(d.getTime());\n      yesterday.setDate(d.getDate() - parseInt(beforeDay));\n      var date = yesterday.getDate();\n      var year = parseInt(yesterday.getYear()) - 100;\n      var month = yesterday.getMonth() + 1;\n      return \"20\" + year + \"/\" + month + \"/\" + date;\n    }\n  }, {\n    key: \"currentDateBeforeMonth\",\n    value: function currentDateBeforeMonth(beforeMonth) {\n      var d = new Date();\n      d.setMonth(d.getMonth() - parseInt(beforeMonth));\n      var month = d.getMonth() + parseInt(1);\n      var year = parseInt(d.getYear()) - 100;\n      return \"20\" + year + \"/\" + month + \"/\" + d.getDate();\n    }\n  }, {\n    key: \"currentDateBeforeYear\",\n    value: function currentDateBeforeYear(beforeYear) {\n      var d = new Date();\n      var month = d.getMonth() + parseInt(1);\n      var year = parseInt(d.getYear()) - 100;\n      year = year - parseInt(beforeYear);\n      return \"20\" + year + \"/\" + month + \"/\" + d.getDate();\n    }\n  }, {\n    key: \"graphColorPostion\",\n    value: function graphColorPostion(data) {\n      if (data >= 0) {\n        return \"#1fa764\";\n      } else {\n        return \"#ed5454\";\n      }\n    }\n  }, {\n    key: \"graphColorFillPostion\",\n    value: function graphColorFillPostion(data) {\n      if (data >= 0) {\n        return \"#abe5c1\";\n      } else {\n        return \"#ffa1a9\";\n      }\n    }\n  }, {\n    key: \"stringToArray\",\n    value: function stringToArray(str) {\n      var res = str.split(\",\");\n      var newArray = [];\n      res.forEach(function (character) {\n        if (character === character.toUpperCase()) {\n          if (character.length <= 4) {\n            newArray.push(character);\n          }\n        }\n      });\n      return newArray.slice(0, 10);\n    }\n  }, {\n    key: \"checkIsUpparCashOrNot\",\n    value: function checkIsUpparCashOrNot(character) {\n      if (character === character.toUpperCase()) {\n        if (character.length <= 4) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"stringCheckResponseInColor\",\n    value: function stringCheckResponseInColor(str, spn) {\n      var innerHTML = str;\n      spn = spn.toUpperCase();\n      var index = innerHTML.indexOf(spn);\n\n      if (index >= 0) {\n        innerHTML = innerHTML.substring(0, index) + \"<span className='highlight'>\" + innerHTML.substring(index, index + spn.length) + \"</span>\" + innerHTML.substring(index + spn.length); // return 'ram';\n      }\n\n      return innerHTML;\n    }\n  }, {\n    key: \"subStrStartEnd\",\n    value: function subStrStartEnd(str, starting, ending) {\n      if (str) {\n        return str.substr(starting, ending);\n      } else {\n        return str;\n      }\n    }\n  }, {\n    key: \"bodyColor\",\n    value: function bodyColor() {\n      var currentUrl = window.location.href;\n      var ar = currentUrl.split(\"/\");\n\n      if (ar[3] === \"stocks\") {\n        return \"black\";\n      } else {\n        return \"\";\n      }\n    }\n  }, {\n    key: \"getParchantage\",\n    value: function getParchantage(parValue, totalvalue) {\n      return parseFloat(parValue) * parseFloat(totalvalue) / 100;\n    }\n  }, {\n    key: \"getUnknownParchantage\",\n    value: function getUnknownParchantage(parValue, totalvalue) {\n      return parseFloat(parValue) / totalvalue * 100;\n    }\n  }, {\n    key: \"getMinMaxValue\",\n    value: function getMinMaxValue(ar) {\n      /*eslint no-extend-native: [\"error\", { \"exceptions\": [\"Array\"] }]*/\n      if (ar.producttype === \"variable\") {\n        var arr = [];\n        ar.variation.map(function (key) {\n          arr.push(key.sale_price);\n          return null;\n        });\n\n        Array.prototype.max = function () {\n          return Math.max.apply(null, this);\n        };\n\n        Array.prototype.min = function () {\n          return Math.min.apply(null, this);\n        };\n\n        if (arr.length > 1) {\n          if (arr.min() === arr.max()) {\n            var _returnString = \"From $\" + this.nombarFormat(arr.min());\n\n            return _returnString;\n          }\n\n          var returnString = \"From $\" + this.nombarFormat(arr.min()) + \" - $\" + this.nombarFormat(arr.max());\n          return returnString;\n        } else {\n          var _returnString2 = \"From $\" + this.nombarFormat(arr.min());\n\n          return _returnString2;\n        }\n      }\n    }\n  }, {\n    key: \"getMinMaxValue2\",\n    value: function getMinMaxValue2(ar) {\n      /*eslint no-extend-native: [\"error\", { \"exceptions\": [\"Array\"] }]*/\n      if (ar.producttype === \"variable\") {\n        var arr = [];\n        ar.variation.map(function (key) {\n          arr.push(key.sale_price);\n          return null;\n        });\n\n        Array.prototype.max = function () {\n          return Math.max.apply(null, this);\n        };\n\n        Array.prototype.min = function () {\n          return Math.min.apply(null, this);\n        };\n\n        if (arr.length > 1) {\n          if (arr.min() === arr.max()) {\n            var _returnString3 = \"$\" + this.nombarFormat(arr.min());\n\n            return _returnString3;\n          }\n\n          var returnString = \"$\" + this.nombarFormat(arr.min()) + \" - $\" + this.nombarFormat(arr.max());\n          return returnString;\n        } else {\n          var _returnString4 = \"$\" + this.nombarFormat(arr.min());\n\n          return _returnString4;\n        }\n      }\n    }\n  }, {\n    key: \"getMinMaxValueWithVariation\",\n    value: function getMinMaxValueWithVariation(ar) {\n      if (ar.producttype === \"variable\") {\n        var arr = [];\n        ar.variation.map(function (key) {\n          arr.push(key.sale_price);\n          return null;\n        });\n\n        Array.prototype.max = function () {\n          return Math.max.apply(null, this);\n        };\n\n        Array.prototype.min = function () {\n          return Math.min.apply(null, this);\n        };\n\n        if (arr.length > 1) {\n          var returnString = \"From $\" + this.nombarFormat(arr.min()) + \" - $\" + this.nombarFormat(arr.max());\n          return returnString;\n        } else {\n          var _returnString5 = \"From $\" + this.nombarFormat(arr.min());\n\n          return _returnString5;\n        }\n      } else {\n        if (ar.dsaleprice) {\n          var _returnString6 = \"From $\" + this.nombarFormat(ar.dsaleprice);\n\n          return _returnString6;\n        } else {\n          var _returnString7 = \"From $\" + this.nombarFormat(ar.dregularprice);\n\n          return _returnString7;\n        }\n      }\n    }\n  }, {\n    key: \"isLoaded\",\n    value: function isLoaded(obj) {\n      return Object.values(obj).every(function (el) {\n        return el;\n      });\n    }\n  }, {\n    key: \"removeParams\",\n    value: function removeParams(url, sParam) {\n      url = url.split(\"?\")[0] + \"?\";\n      var sPageURL = decodeURIComponent(window.location.search.substring(1)),\n          sURLVariables = sPageURL.split(\"&\"),\n          sParameterName,\n          i;\n\n      for (i = 0; i < sURLVariables.length; i++) {\n        sParameterName = sURLVariables[i].split(\"=\");\n\n        if (sParameterName[0] !== sParam) {\n          url = url + sParameterName[0] + \"=\" + sParameterName[1] + \"&\";\n        }\n      }\n\n      return url.substring(0, url.length - 1);\n    }\n  }, {\n    key: \"returnReferringUrl\",\n    value: function returnReferringUrl(url) {\n      if (!url) return \"Direct traffic\";\n      if (url.trim() === \"\") return \"Direct traffic\";\n      return url;\n    }\n  }, {\n    key: \"getDialCode\",\n    value: function getDialCode(countryCodeList, countryCode) {\n      var returnCuntryCode = \"\";\n      countryCodeList.forEach(function (element) {\n        if (element.code === countryCode) {\n          returnCuntryCode = element.dial_code;\n        }\n      });\n      return returnCuntryCode;\n    }\n  }, {\n    key: \"showExportMsg\",\n    value: function showExportMsg(shippingType, isSame, billingAddress, shippingAddress) {\n      if (shippingType !== \"express\") return false;\n\n      if (isSame) {\n        if (billingAddress) if (billingAddress.toLowerCase().trim() === \"usa\") {\n          return false;\n        }\n      } else {\n        if (shippingAddress) if (shippingAddress.toLowerCase().trim() === \"usa\") {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"parseOrderProduct\",\n    value: function parseOrderProduct(item) {\n      var isCombo = item.combo ? true : false,\n          comboId = item.combo ? item._id : null,\n          productId = item.combo ? null : item.productid._id,\n          productMeta = item.combo ? null : item._id,\n          isSubscribed = item.subscribed ? true : false,\n          subscriptionMeta = item.subscribed ? {\n        duration: item.subscribedTime\n      } : null,\n          itemId = item._id,\n          _id = item._id,\n          qty = item.qty.value,\n          title = item.combo ? item.title : item.productid.producttitle,\n          unitPrice = item.saleprice ? item.saleprice : item.regularprice,\n          subTotal = item.saleprice ? this.multiply(item.saleprice, item.qty.value) : this.multiply(item.regularprice, item.qty.value),\n          attribute = this.getSelectedAttributes(item),\n          height = item.shipping_height,\n          width = item.shipping_width,\n          length = item.shipping_length,\n          volume = item.volume,\n          weight = item.weight;\n      var order = {\n        isCombo: isCombo,\n        comboId: comboId,\n        productId: productId,\n        productMeta: productMeta,\n        isSubscribed: isSubscribed,\n        subscriptionMeta: subscriptionMeta,\n        itemId: itemId,\n        _id: _id,\n        qty: qty,\n        unitPrice: unitPrice,\n        subTotal: subTotal,\n        attribute: attribute,\n        width: width,\n        length: length,\n        height: height,\n        title: title,\n        volume: volume,\n        weight: weight\n      };\n      this.removeEmpty(order);\n      return order;\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(a, b) {\n      return parseFloat(a) * parseFloat(b);\n    }\n  }, {\n    key: \"generateOrderNew\",\n    value: function generateOrderNew(stateObj) {\n      var _this = this;\n\n      var paymentResponse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n      var referralId = arguments.length > 2 ? arguments[2] : undefined;\n      var cart = arguments.length > 3 ? arguments[3] : undefined;\n      var user = arguments.length > 4 ? arguments[4] : undefined;\n      var confirmShipRes = arguments.length > 5 ? arguments[5] : undefined;\n\n      var service = confirmShipRes.service,\n          confirmRest = _objectWithoutProperties(confirmShipRes, [\"service\"]);\n\n      var paymentMethod = stateObj.paymentMethod;\n      var items = cart.items,\n          shippingCharge = cart.shippingCharge,\n          subTotal = cart.subTotal,\n          totalWeight = cart.totalWeight,\n          totalVolume = cart.totalVolume,\n          taxValue = cart.taxValue,\n          taxPercent = cart.taxPercent,\n          taxCouponDiscount = cart.taxCouponDiscount,\n          taxCouponCode = cart.taxCouponCode;\n      var orderProducts = items.map(function (el) {\n        return _this.parseOrderProduct(el);\n      });\n\n      var _this$getHeightWeight = this.getHeightWeight(orderProducts),\n          totalHeight = _this$getHeightWeight.height,\n          totalLength = _this$getHeightWeight.length,\n          totalWidth = _this$getHeightWeight.width;\n\n      var order = _objectSpread({\n        totalVolume: totalVolume,\n        totalWeight: totalWeight,\n        shippingMethod: service,\n        products: orderProducts,\n        countryTax: taxPercent * 100,\n        taxAmount: taxValue || parseFloat(cart.subTotal || 0) * parseFloat(taxPercent || 0) || 0,\n        shippingCharge: shippingCharge,\n        userDetails: this.getUserDetails(stateObj).user,\n        orderStatus: defaultOrderStatus,\n        paymentMethod: paymentMethod === \"stripe\" ? \"Authorize\" : paymentMethod,\n        status: defaultStatusInOrder,\n        wholeSubtotal: parseFloat(subTotal.toFixed(2)),\n        wasReferred: referralId ? true : false,\n        referral: referralId ? referralId : null,\n        isCoupon: taxCouponCode ? true : false,\n        couponId: taxCouponCode,\n        couponDisc: taxCouponCode ? taxCouponDiscount : null,\n        grandTotal: this.getGrandTotal(subTotal, taxPercent, shippingCharge, taxCouponDiscount),\n        isGuest: user._id ? false : true,\n        userId: user._id ? user._id : null,\n        userMetaId: user.userMetaId ? user.userMetaId : null,\n        totalHeight: totalHeight,\n        totalWidth: totalWidth,\n        totalLength: totalLength,\n        refPercentage: referralPresent\n      }, confirmRest);\n\n      this.removeEmpty(order);\n      return order;\n    }\n  }, {\n    key: \"getDiscount\",\n    value: function getDiscount(discount, subTotal) {\n      return discount * subTotal / 100 || 0;\n    }\n  }, {\n    key: \"getGrandTotal\",\n    value: function getGrandTotal(subTotal, taxPresent, shippingCharge, discount) {\n      var amountWithTax = subTotal + taxPresent * subTotal + shippingCharge;\n      var discountAmount = this.getDiscount(discount, subTotal);\n      var total = parseFloat(amountWithTax || 0) - parseFloat(discountAmount || 0);\n      return parseFloat(total.toFixed(2));\n    }\n  }, {\n    key: \"getHeightWeight\",\n    value: function getHeightWeight(items) {\n      var height = items.map(function (el) {\n        return el.height * parseFloat(el.qty);\n      });\n      var width = items.map(function (el) {\n        return el.width * parseFloat(el.qty);\n      });\n      var length = items.map(function (el) {\n        return el.length * parseFloat(el.qty);\n      });\n      var shape = {\n        height: height.reduce(function (a, b) {\n          return a + b;\n        }, 0),\n        width: width.reduce(function (a, b) {\n          return a + b;\n        }, 0),\n        length: length.reduce(function (a, b) {\n          return a + b;\n        }, 0)\n      };\n      return shape;\n    }\n  }, {\n    key: \"generateOrder\",\n    value: function generateOrder(stateObj) {\n      var paymentResponse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n      var referrer_url_id = arguments.length > 2 ? arguments[2] : undefined;\n      var cart = arguments.length > 3 ? arguments[3] : undefined;\n      var user = arguments.length > 4 ? arguments[4] : undefined;\n      var confirmShipRes = arguments.length > 5 ? arguments[5] : undefined;\n\n      var service = confirmShipRes.service,\n          confirmRest = _objectWithoutProperties(confirmShipRes, [\"service\"]);\n\n      var transactionId = \"000\";\n      var payType = stateObj.paymentMethod;\n\n      if (stateObj.paymentMethod === \"stripe\" && paymentResponse) {\n        transactionId = paymentResponse;\n      }\n\n      if (stateObj.paymentMethod === \"paypal\" && paymentResponse && paymentResponse.paymentID) {\n        transactionId = paymentResponse.paymentID;\n      } // return false;\n\n\n      var items = cart.items,\n          shippingCharge = cart.shippingCharge,\n          subTotal = cart.subTotal,\n          totalWeight = cart.totalWeight,\n          totalVolume = cart.totalVolume,\n          taxValue = cart.taxValue,\n          taxPercent = cart.taxPercent,\n          taxCouponDiscount = cart.taxCouponDiscount,\n          taxCouponCode = cart.taxCouponCode;\n      var billing_first_name = stateObj.billing_first_name,\n          billing_last_name = stateObj.billing_last_name,\n          billing_email_name = stateObj.billing_email_name,\n          billing_phone_name = stateObj.billing_phone_name,\n          billing_address_name_01 = stateObj.billing_address_name_01,\n          billing_address_name_02 = stateObj.billing_address_name_02,\n          billing_address_town = stateObj.billing_address_town,\n          shipping_first_name = stateObj.shipping_first_name,\n          shipping_last_name = stateObj.shipping_last_name,\n          shipping_address_name_01 = stateObj.shipping_address_name_01,\n          shipping_address_name_02 = stateObj.shipping_address_name_02,\n          shipping_address_town = stateObj.shipping_address_town,\n          selectedShippingCity = stateObj.selectedShippingCity,\n          selectedCity = stateObj.selectedCity,\n          selectedShippingCountry = stateObj.selectedShippingCountry,\n          selectedCountry = stateObj.selectedCountry,\n          shipping_zip_code = stateObj.shipping_zip_code,\n          billing_zip_code = stateObj.billing_zip_code,\n          sameShipping = stateObj.sameShipping;\n      var order = {};\n      var country = \"\";\n\n      if (selectedShippingCountry) {\n        country = selectedShippingCountry;\n      } else if (selectedCountry) {\n        country = selectedCountry || \"\";\n      }\n\n      var state = \"\";\n\n      if (selectedShippingCity) {\n        state = selectedShippingCity;\n      } else if (selectedCity) {\n        state = selectedCity || \"\";\n      }\n\n      var zipcode = \"\";\n\n      if (shipping_zip_code) {\n        zipcode = shipping_zip_code;\n      } else if (billing_zip_code) {\n        zipcode = billing_zip_code;\n      }\n\n      order.orderproduct = items.map(function (el) {\n        // console.log({el})\n        // this.parseOrderProduct(el);\n        // console.log({\n        //   checkOrder: this.parseOrderProduct(el)\n        // })\n        // return this.parseOrderProduct(el)\n        var returnItem = {\n          productmetaid: el._id,\n          proucttitle: el.combo ? el.title : el.productid.producttitle,\n          quantity: el.qty.value,\n          singleprice: el.saleprice ? el.saleprice : el.regularprice,\n          subtotal: 0,\n          orderdate: Date(),\n          country: country,\n          isguest: true || false,\n          subscribed: el.subscribed,\n          subscribedDiscountPersent: el.subscribedDiscountPersent\n        };\n        var subtotal = parseInt(returnItem.quantity || 1) * parseInt(returnItem.singleprice || 1);\n        var attribute = {};\n\n        if (el.producttype === \"variable\") {\n          el.attributes.map(function (item, index) {\n            attribute = _objectSpread(_objectSpread({}, attribute), {}, _defineProperty({}, item.names, el[item.names].value));\n            return null;\n          });\n        }\n\n        returnItem = _objectSpread(_objectSpread({}, returnItem), {}, {\n          subtotal: subtotal,\n          attribute: attribute\n        });\n        return _objectSpread({}, returnItem);\n      });\n      var shippingAddress = \"\".concat(shipping_first_name, \" \").concat(shipping_last_name, \", \").concat(shipping_address_name_01, \" \").concat(shipping_address_name_02, \" \").concat(shipping_address_town, \" \");\n      var billingAddress = \"\".concat(billing_first_name, \" \").concat(billing_last_name, \", \").concat(billing_address_name_01, \" \").concat(billing_address_name_02, \" \").concat(billing_address_town, \" \");\n      var TaxgrandTotalWithTax = subTotal + taxPercent * subTotal + shippingCharge;\n      var discount = taxCouponDiscount * subTotal / 100;\n\n      if (user._id) {\n        var userid = user._id;\n        order.userid = userid;\n      }\n\n      order.grandtotal = parseFloat(TaxgrandTotalWithTax || 0) - parseFloat(discount || 0);\n      order.coupondisc = taxCouponDiscount;\n      order.couponid = taxCouponCode;\n      order.country = country;\n      order.offerprice = 100;\n      order.shippingmethod = service || \"Express shipping\" || \"Normal shipping\";\n      order.wholesubtotal = subTotal;\n      order.shippingcharge = shippingCharge || 0;\n      order.paymentmethod = payType;\n      order.ordernote = \"Make it quick\";\n      order.status = \"in process\";\n      order.paymentstatus = \"Done\";\n      order.transactionid = transactionId;\n      order.country_tax = taxPercent * 100;\n      order.totalweight = totalWeight;\n      order.totalvolume = totalVolume;\n      order.taxamount = taxValue;\n      order.userdetails = {\n        country: country,\n        firstname: billing_first_name,\n        lastname: billing_last_name,\n        email: billing_email_name,\n        shippingaddress: sameShipping ? billingAddress : shippingAddress,\n        billingaddress: billingAddress,\n        extraaddress: \"jdjdjd\",\n        city: shipping_address_town ? shipping_address_town : billing_address_town,\n        state: state,\n        zipcode: zipcode,\n        phonenumber: billing_phone_name\n      };\n      order.orderstatus = \"Not delivered\";\n\n      if (referrer_url_id) {\n        order.wasreferred = true;\n        order.referral = referrer_url_id;\n      }\n\n      return _objectSpread(_objectSpread({}, order), confirmRest);\n    }\n  }, {\n    key: \"getUserDetails\",\n    value: function getUserDetails(stateObj) {\n      var billing_first_name = stateObj.billing_first_name,\n          billing_last_name = stateObj.billing_last_name,\n          billing_email_name = stateObj.billing_email_name,\n          billing_phone_name = stateObj.billing_phone_name,\n          billing_address_name_01 = stateObj.billing_address_name_01,\n          billing_address_name_02 = stateObj.billing_address_name_02,\n          billing_address_town = stateObj.billing_address_town,\n          shipping_first_name = stateObj.shipping_first_name,\n          shipping_last_name = stateObj.shipping_last_name,\n          shipping_address_name_01 = stateObj.shipping_address_name_01,\n          shipping_address_name_02 = stateObj.shipping_address_name_02,\n          shipping_address_town = stateObj.shipping_address_town,\n          selectedShippingCity = stateObj.selectedShippingCity,\n          selectedCity = stateObj.selectedCity,\n          selectedShippingCountry = stateObj.selectedShippingCountry,\n          selectedCountry = stateObj.selectedCountry,\n          shipping_zip_code = stateObj.shipping_zip_code,\n          billing_zip_code = stateObj.billing_zip_code,\n          sameShipping = stateObj.sameShipping;\n      var shippingAddress = \"\".concat(shipping_first_name, \" \").concat(shipping_last_name, \", \").concat(shipping_address_name_01, \" \").concat(shipping_address_name_02, \" \").concat(shipping_address_town, \" \");\n      var billingAddress = \"\".concat(billing_first_name, \" \").concat(billing_last_name, \", \").concat(billing_address_name_01, \" \").concat(billing_address_name_02, \" \").concat(billing_address_town, \" \");\n      var user = {\n        firstname: billing_first_name,\n        lastname: billing_last_name,\n        email: billing_email_name,\n        shippingaddress: sameShipping ? billingAddress : shippingAddress,\n        billingaddress: billingAddress,\n        phonenumber: billing_phone_name,\n        country: this.getOneValid(selectedShippingCountry, selectedCountry),\n        zipcode: this.getOneValid(shipping_zip_code, billing_zip_code),\n        state: this.getOneValid(selectedShippingCity, selectedCity)\n      };\n      return {\n        user: user,\n        shippingAddress: shippingAddress,\n        billingAddress: billingAddress\n      };\n    }\n  }, {\n    key: \"getOneValid\",\n    value: function getOneValid(a, b) {\n      if (a && a.trim()) return a;\n      if (b && b.trim()) return b;\n      return \"\";\n    }\n  }, {\n    key: \"checkProductInWishList\",\n    value: function checkProductInWishList() {\n      var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var product_id = arguments.length > 1 ? arguments[1] : undefined;\n      var flag = false; // console.log(list)\n      // console.log(product_id)\n\n      if (list.length > 0) {\n        list.forEach(function (itm, i) {\n          if (itm.productid === product_id) {\n            flag = i;\n          }\n        });\n      }\n\n      return flag;\n    }\n  }, {\n    key: \"getSingleElementByMultipleObject\",\n    value: function getSingleElementByMultipleObject(arrayData, f) {\n      var result = arrayData.reduce(function (r, a) {\n        r[a.carrier] = r[a.carrier] || [];\n        r[a.carrier].push(a);\n        return r;\n      }, {});\n      return result;\n    }\n  }, {\n    key: \"shippingStringRate\",\n    value: function shippingStringRate(key) {\n      if (key && key.est_delivery_days) {\n        return \" in \" + key.est_delivery_days + \" Days .\";\n      } else {\n        return \" in - Days .\";\n      }\n    }\n  }, {\n    key: \"cartHeightWidhtCalculation\",\n    value: function cartHeightWidhtCalculation(item) {\n      var height = 0;\n      var width = 0;\n      var length = 0;\n      var weight = 0;\n\n      if (item.length > 0) {\n        item.forEach(function (itm) {\n          height = height + itm.shipping_height;\n          width = width + itm.shipping_width;\n          length = length + itm.shipping_length;\n          weight = weight + itm.weight;\n        });\n      }\n\n      return {\n        height: height,\n        width: width,\n        length: length,\n        weight: weight\n      };\n    }\n  }, {\n    key: \"cartHeightWidhtCalculation2\",\n    value: function cartHeightWidhtCalculation2(itemA) {\n      var height = 0;\n      var width = 0;\n      var length = 0;\n      var weight = 0;\n\n      function flatten(arr) {\n        return arr.reduce(function (flat, toFlatten) {\n          return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);\n        }, []);\n      }\n\n      var item = flatten(itemA.map(function (el) {\n        var qty = el.qty ? el.qty.value ? parseInt(el.qty.value) : 1 : 1;\n        if (qty > 1) return new Array(qty).fill(el);\n        return el;\n      }));\n\n      var getGreater = function getGreater(a, b) {\n        if (a > b) return a;\n        return b;\n      };\n\n      if (item.length > 0) {\n        item.forEach(function (itm) {\n          // height = getGreater(height, itm.shipping_height);\n          // width = width + itm.shipping_width;\n          // length = getGreater(length, itm.shipping_length);\n          weight = weight + itm.weight;\n        });\n      }\n\n      var itemsB = itemA.map(function (el) {\n        return {\n          h: el.shipping_height,\n          l: el.shipping_length,\n          w: el.shipping_width,\n          qty: el.qty.value\n        };\n      });\n      var itemsC = [].concat.apply([], itemsB);\n      var itemsD = combineLoop(itemsC)[0];\n      return {\n        height: itemsD.h,\n        width: itemsD.w,\n        length: itemsD.l,\n        weight: weight\n      };\n    }\n  }, {\n    key: \"exportToJson\",\n    value: function exportToJson(objectData) {\n      var fileName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"export\";\n      var filename = \"\".concat(fileName, \".json\");\n      var contentType = \"application/json;charset=utf-8;\";\n\n      if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n        var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], {\n          type: contentType\n        });\n        navigator.msSaveOrOpenBlob(blob, filename);\n      } else {\n        var a = document.createElement(\"a\");\n        a.download = filename;\n        a.href = \"data:\" + contentType + \",\" + encodeURIComponent(JSON.stringify(objectData));\n        a.target = \"_blank\";\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n      }\n    }\n  }, {\n    key: \"qtyList\",\n    value: function qtyList() {\n      var qty = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      var quantity = parseFloat(qty) > 10 ? parseFloat(qty) : 10;\n      var temp = new Array(quantity).fill(\"\");\n      var newarray = temp.map(function (el, index) {\n        return {\n          label: index + 1,\n          value: index + 1\n        };\n      });\n      return newarray;\n    }\n  }]);\n\n  return BasicFunction;\n}();\n\nexport { BasicFunction as default };","map":null,"metadata":{},"sourceType":"module"}