{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport sessionStorage from 'redux-persist/lib/storage/session';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { createStateSyncMiddleware } from 'redux-state-sync';\nvar SET_CLIENT_STATE = 'SET_CLIENT_STATE';\nvar middlewares = [thunk, createStateSyncMiddleware({\n  // blacklist: [\"extras\", \"products\"]\n  whitelist: ['cart', 'user', 'wishList', 'checkout', 'firstSetting', 'ambassadoruser']\n})];\nvar persistConfig = {\n  key: 'root',\n  storage: storage,\n  whitelist: ['cart', 'user', 'firstSetting', 'ambassadoruser']\n};\nvar sessionRedConfig = {\n  key: 'referrer',\n  storage: sessionStorage\n};\n\nvar referrer = rootReducer.referrer,\n    otherReducer = _objectWithoutProperties(rootReducer, [\"referrer\"]);\n\nvar allReducers = combineReducers(_objectSpread(_objectSpread({}, otherReducer), {}, {\n  referrer: persistReducer(sessionRedConfig, referrer)\n}));\nvar persistedReducer = persistReducer(persistConfig, allReducers);\n\nvar makeConfiguredStore = function makeConfiguredStore(reducer, initialState) {\n  return createStore(reducer, initialState, applyMiddleware.apply(void 0, middlewares));\n};\n\nexport var makeStore = function makeStore(initialState, _ref) {\n  var isServer = _ref.isServer,\n      req = _ref.req,\n      debug = _ref.debug,\n      storeKey = _ref.storeKey;\n\n  if (isServer) {\n    initialState = initialState || {\n      fromServer: 'foo'\n    };\n    return makeConfiguredStore(allReducers, initialState);\n  } else {\n    // we need it only on client side\n    var store = makeConfiguredStore(persistedReducer, initialState);\n    store.__persistor = persistStore(store); // Nasty hack\n\n    return store;\n  }\n};\nexport var setClientState = function setClientState(clientState) {\n  return {\n    type: SET_CLIENT_STATE,\n    payload: clientState\n  };\n}; // export default (preloadedState = undefined) => {\n//   let store = createStore(\n//     persistedReducer,\n//     // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n//     preloadedState,\n//     composeWithDevTools(applyMiddleware(...middlewares))\n//   );\n//   let persistor = persistStore(store);\n//   // return { store, persistor };\n//   return store\n// };","map":{"version":3,"sources":["/Users/akshataggarwal/Documents/Coding Files/webd projects/missvalentine-front/redux/store.js"],"names":["createStore","applyMiddleware","combineReducers","persistStore","persistReducer","storage","sessionStorage","thunk","rootReducer","createStateSyncMiddleware","SET_CLIENT_STATE","middlewares","whitelist","persistConfig","key","sessionRedConfig","referrer","otherReducer","allReducers","persistedReducer","makeConfiguredStore","reducer","initialState","makeStore","isServer","req","debug","storeKey","fromServer","store","__persistor","setClientState","clientState","type","payload"],"mappings":";;;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,SAASC,yBAAT,QAA0C,kBAA1C;AAEA,IAAMC,gBAAgB,GAAG,kBAAzB;AACA,IAAMC,WAAW,GAAG,CAClBJ,KADkB,EAElBE,yBAAyB,CAAC;AACxB;AACAG,EAAAA,SAAS,EAAE,CACT,MADS,EAET,MAFS,EAGT,UAHS,EAIT,UAJS,EAKT,cALS,EAMT,gBANS;AAFa,CAAD,CAFP,CAApB;AAeA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBT,EAAAA,OAAO,EAAPA,OAFoB;AAGpBO,EAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,cAAjB,EAAiC,gBAAjC;AAHS,CAAtB;AAMA,IAAMG,gBAAgB,GAAG;AACvBD,EAAAA,GAAG,EAAE,UADkB;AAEvBT,EAAAA,OAAO,EAAEC;AAFc,CAAzB;;IAKQU,Q,GAA8BR,W,CAA9BQ,Q;IAAaC,Y,4BAAiBT,W;;AAEtC,IAAMU,WAAW,GAAGhB,eAAe,iCAC9Be,YAD8B;AAEjCD,EAAAA,QAAQ,EAAEZ,cAAc,CAACW,gBAAD,EAAmBC,QAAnB;AAFS,GAAnC;AAKA,IAAMG,gBAAgB,GAAGf,cAAc,CAACS,aAAD,EAAgBK,WAAhB,CAAvC;;AAEA,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,OAAD,EAAUC,YAAV;AAAA,SAC1BtB,WAAW,CAACqB,OAAD,EAAUC,YAAV,EAAwBrB,eAAe,MAAf,SAAmBU,WAAnB,CAAxB,CADe;AAAA,CAA5B;;AAGA,OAAO,IAAMY,SAAS,GAAG,SAAZA,SAAY,CAACD,YAAD,QAAsD;AAAA,MAArCE,QAAqC,QAArCA,QAAqC;AAAA,MAA3BC,GAA2B,QAA3BA,GAA2B;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAC7E,MAAIH,QAAJ,EAAc;AACZF,IAAAA,YAAY,GAAGA,YAAY,IAAI;AAAEM,MAAAA,UAAU,EAAE;AAAd,KAA/B;AAEA,WAAOR,mBAAmB,CAACF,WAAD,EAAcI,YAAd,CAA1B;AACD,GAJD,MAIO;AACL;AAEA,QAAMO,KAAK,GAAGT,mBAAmB,CAACD,gBAAD,EAAmBG,YAAnB,CAAjC;AAEAO,IAAAA,KAAK,CAACC,WAAN,GAAoB3B,YAAY,CAAC0B,KAAD,CAAhC,CALK,CAKoC;;AAEzC,WAAOA,KAAP;AACD;AACF,CAdM;AAgBP,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACC,WAAD;AAAA,SAAkB;AAC9CC,IAAAA,IAAI,EAAEvB,gBADwC;AAE9CwB,IAAAA,OAAO,EAAEF;AAFqC,GAAlB;AAAA,CAAvB,C,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport sessionStorage from 'redux-persist/lib/storage/session';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { createStateSyncMiddleware } from 'redux-state-sync';\n\nconst SET_CLIENT_STATE = 'SET_CLIENT_STATE';\nconst middlewares = [\n  thunk,\n  createStateSyncMiddleware({\n    // blacklist: [\"extras\", \"products\"]\n    whitelist: [\n      'cart',\n      'user',\n      'wishList',\n      'checkout',\n      'firstSetting',\n      'ambassadoruser',\n    ],\n  }),\n];\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['cart', 'user', 'firstSetting', 'ambassadoruser'],\n};\n\nconst sessionRedConfig = {\n  key: 'referrer',\n  storage: sessionStorage,\n};\n\nconst { referrer, ...otherReducer } = rootReducer;\n\nconst allReducers = combineReducers({\n  ...otherReducer,\n  referrer: persistReducer(sessionRedConfig, referrer),\n});\n\nconst persistedReducer = persistReducer(persistConfig, allReducers);\n\nconst makeConfiguredStore = (reducer, initialState) =>\n  createStore(reducer, initialState, applyMiddleware(...middlewares));\n\nexport const makeStore = (initialState, { isServer, req, debug, storeKey }) => {\n  if (isServer) {\n    initialState = initialState || { fromServer: 'foo' };\n\n    return makeConfiguredStore(allReducers, initialState);\n  } else {\n    // we need it only on client side\n\n    const store = makeConfiguredStore(persistedReducer, initialState);\n\n    store.__persistor = persistStore(store); // Nasty hack\n\n    return store;\n  }\n};\n\nexport const setClientState = (clientState) => ({\n  type: SET_CLIENT_STATE,\n  payload: clientState,\n});\n// export default (preloadedState = undefined) => {\n//   let store = createStore(\n//     persistedReducer,\n//     // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n//     preloadedState,\n//     composeWithDevTools(applyMiddleware(...middlewares))\n//   );\n//   let persistor = persistStore(store);\n//   // return { store, persistor };\n//   return store\n// };\n"]},"metadata":{},"sourceType":"module"}