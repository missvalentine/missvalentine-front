{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport dynamic from 'next/dynamic';\nimport { Form, Spin, Icon } from \"antd\";\n;\nconst Heading = dynamic(() => import(\"../Heading\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../Heading\")],\n    modules: [\"../Heading\"]\n  }\n});\n;\nconst Input = dynamic(() => import(\"../form-components/Input\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../form-components/Input\")],\n    modules: [\"../form-components/Input\"]\n  }\n});\nimport { connect } from \"react-redux\";\n;\nconst Button = dynamic(() => import(\"../form-components/Button\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../form-components/Button\")],\n    modules: [\"../form-components/Button\"]\n  }\n});\nimport { forgotPassword } from \"../../services/api\";\nimport { drawerToDisplay, toggleRegBar } from \"../../redux/actions/drawers\";\nimport { setUser } from \"../../redux/actions/user\";\nimport regex from \"../../services/helpers/regex\";\nimport { sendEmailMsg } from \"../../constants/constantMessage\";\nimport reactComponentDebounce from \"react-component-debounce\";\nconst DebounceInput = reactComponentDebounce({\n  valuePropName: \"value\",\n  triggerMs: 1000\n})(Input);\n\nclass ForgetForm extends React.Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"handleSubmit\", e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log(\"Received values of form: \", values);\n          const {\n            email,\n            password\n          } = values;\n          this.setState({\n            isLoading: true,\n            error: null\n          });\n          forgotPassword({\n            email,\n            firststep: 1\n          }).then(res => {\n            this.setState({\n              isLoading: false\n            });\n\n            if (res.status === 200) {\n              if (res.data.status || res.data.success) {\n                this.setState({\n                  mailSent: true\n                });\n              } else {\n                this.setState({\n                  error: res.data.message || \"User not found\"\n                });\n              }\n            } else {\n              this.setState({\n                error: \"User not found\"\n              });\n            }\n          }).catch(err => {\n            console.log({\n              err\n            });\n            this.setState({\n              isLoading: false,\n              error: \"User not found\"\n            });\n          });\n        }\n      });\n    });\n\n    this.state = {\n      isLoading: false,\n      error: null,\n      isAlreadyUser: false,\n      mailSent: false\n    };\n  }\n\n  render() {\n    const {\n      drawerToDisplay,\n      form: {\n        getFieldDecorator\n      }\n    } = this.props;\n    const {\n      isLoading,\n      error,\n      isAlreadyUser,\n      mailSent\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"c-registration\"\n    }, __jsx(Heading, {\n      parentClass: \"c-registration\"\n    }, mailSent ? __jsx(React.Fragment, null, \" \", sendEmailMsg, \"  \", __jsx(\"div\", null, __jsx(\"p\", {\n      style: {\n        fontSize: \"16px\",\n        fontFamily: \"futuraBT-light\",\n        marginTop: \"20px\"\n      },\n      className: \"c-registration__inst\"\n    }, \"Back to\", __jsx(\"span\", {\n      style: {\n        marginLeft: \"5px\"\n      },\n      onClick: () => {\n        drawerToDisplay(\"login\");\n      },\n      className: \"c-registration__link\"\n    }, \"LOGIN\"))), \" \") : \"Forgot Your Password?\"), !mailSent && __jsx(Heading, {\n      className: \"c-registration__sub-heading\",\n      subHeading: true,\n      versions: [\"dark\"],\n      parentClass: \"c-registration\"\n    }, \"Enter your email to reset your password\"), !mailSent && __jsx(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"c-ant-from c-registration__form\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"email\", {\n      rules: [{\n        max: 40,\n        message: \"You can't use more than 40 characters.\"\n      }, {\n        required: true,\n        message: \"Please input your e-mail!\"\n      }, {\n        pattern: regex.email,\n        message: \"Please enter a valid E-mail.\"\n      }]\n    })(__jsx(DebounceInput, {\n      style: {\n        padding: \"0px\",\n        fontSize: \"16px\",\n        fontFamily: \"futuraBT-book\",\n        marginBottom: \"15px\"\n      },\n      versions: [\"dark\"],\n      parentClass: \"c-registration\",\n      label: \"E-mail\"\n    }))), __jsx(\"div\", null, __jsx(\"p\", {\n      style: {\n        fontSize: \"16px\",\n        fontFamily: \"futuraBT-light\"\n      },\n      className: \"c-registration__inst\"\n    }, \"Back to\", __jsx(\"span\", {\n      style: {\n        marginLeft: \"5px\"\n      },\n      onClick: () => {\n        drawerToDisplay(\"login\");\n      },\n      className: \"c-registration__link\"\n    }, \"LOGIN\"))), __jsx(\"div\", {\n      className: \"c-registration__error-block\"\n    }, isLoading && __jsx(Icon, {\n      type: \"loading\",\n      className: \"c-registration__spinner c-spinner\",\n      style: {\n        fontSize: 24\n      },\n      spin: true\n    }), error && __jsx(\"p\", {\n      className: \"c-registration__error\"\n    }, error)), __jsx(\"div\", {\n      className: \"row\",\n      style: {\n        justifyContent: \"space-around\"\n      }\n    }, __jsx(Button, {\n      theme: \"dark\",\n      disabled: isLoading\n    }, \"Reset Password\"))));\n  }\n\n}\n\nconst ForgetPassword = Form.create({\n  name: \"registration\"\n})(ForgetForm);\nconst mapActionToProps = {\n  drawerToDisplay,\n  setUser,\n  toggleRegBar\n};\nexport default connect(state => state, mapActionToProps)(ForgetPassword);","map":null,"metadata":{},"sourceType":"module"}