{"ast":null,"code":"import { useRef, useLayoutEffect } from 'react';\nconst isBrowser = false;\n\nfunction getScrollPosition({\n  element,\n  useWindow\n}) {\n  if (!isBrowser) return {\n    x: 0,\n    y: 0\n  };\n  const target = element ? element.current : document.body;\n  const position = target.getBoundingClientRect();\n  return useWindow ? {\n    x: window.scrollX,\n    y: window.scrollY\n  } : {\n    x: position.left,\n    y: position.top\n  };\n}\n\nexport function useScrollPosition(effect, deps, element, useWindow, wait) {\n  const position = useRef(getScrollPosition({\n    useWindow\n  }));\n  let throttleTimeout = null;\n\n  const callBack = () => {\n    const currPos = getScrollPosition({\n      element,\n      useWindow\n    });\n    effect({\n      prevPos: position.current,\n      currPos\n    });\n    position.current = currPos;\n    throttleTimeout = null;\n  };\n\n  useLayoutEffect(() => {\n    const handleScroll = () => {\n      if (wait) {\n        if (throttleTimeout === null) {\n          throttleTimeout = setTimeout(callBack, wait);\n        }\n      } else {\n        callBack();\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, deps);\n}","map":null,"metadata":{},"sourceType":"module"}