{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport dynamic from 'next/dynamic';\nimport { connect } from \"react-redux\";\nimport classNames from \"classnames\";\nimport moment from \"moment\";\nimport { getOrders } from \"../../services/api\";\nimport { makeCancelable } from \"../../services/makeCancelable\";\nimport ChatMsgList from \"./ChatMsgList\";\nconst chatMsgList = new ChatMsgList();\n\nclass ChatOrderList extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"getOrderList\", () => {\n      this.cancelableOrders = makeCancelable(getOrders(this.props.user.userMetaId), res => {\n        const resJson = res.data;\n\n        if (resJson.status) {\n          const orderList = resJson.orders.sort(function (a, b) {\n            return new Date(b.createdOn) - new Date(a.createdOn);\n          });\n\n          if (!orderList || orderList && orderList.length < 1) {\n            this.props.triggerNextStep({\n              trigger: \"repeat\"\n            });\n          }\n\n          this.setState({\n            orderList: orderList,\n            isLoading: false\n          });\n        }\n      }, err => {\n        console.log({\n          err\n        });\n      });\n    });\n\n    this.state = {\n      orderList: [],\n      isLoading: true,\n      selected: null\n    };\n  }\n\n  componentDidMount() {\n    this.getOrderList();\n  }\n\n  componentWillUnmount() {\n    if (this.cancelableOrders) this.cancelableOrders();\n  }\n\n  render() {\n    const {\n      orderList,\n      isLoading,\n      selected\n    } = this.state;\n    return __jsx(\"div\", null, isLoading && __jsx(\"div\", null, \"...\"), isLoading && (!orderList || orderList && orderList.length < 1) && __jsx(\"div\", null, chatMsgList.noOrdersMsg()), !isLoading && orderList && orderList.length > 0 && orderList.map((el, index) => {\n      const product = el.products && el.products[0].title;\n      return __jsx(\"p\", {\n        className: classNames(\"chat-custom-option\", {\n          selected: selected === el._id\n        }),\n        onClick: () => {\n          if (!selected) {\n            this.setState({\n              orderList: orderList.filter(elx => elx._id === el._id),\n              selected: el._id\n            }, () => {\n              this.props.triggerNextStep({\n                value: el\n              });\n            });\n          }\n        },\n        key: index\n      }, el.createdOn ? moment(el.createdOn).format(\"MMM DD, YYYY\") + ` (${product})` : product);\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  user: state.user\n});\n\nexport default connect(mapStateToProps)(ChatOrderList);","map":null,"metadata":{},"sourceType":"module"}