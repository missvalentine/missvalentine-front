{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport classNames from \"classnames\";\nimport { Input as AntInput } from \"antd\";\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons';\n\nclass Input extends React.Component {\n  render() {\n    const _this$props = this.props,\n          {\n      value,\n      onChange,\n      parentClass,\n      inputId,\n      label,\n      type,\n      suffix,\n      prefix,\n      versions,\n      name,\n      wrapperClass\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"value\", \"onChange\", \"parentClass\", \"inputId\", \"label\", \"type\", \"suffix\", \"prefix\", \"versions\", \"name\", \"wrapperClass\"]);\n\n    const componentClass = \"c-input\";\n    const versionClass = versions.map(el => `${componentClass}--${el}`).join(\" \");\n    const parent = `${parentClass}__${componentClass.replace(\"c-\", \"\")}`;\n    const className = classNames(componentClass, {\n      [versionClass]: versions,\n      [parent]: parentClass,\n      [wrapperClass]: wrapperClass\n    });\n\n    if (type == \"password\") {\n      return __jsx(\"div\", {\n        className: className\n      }, __jsx(AntInput.Password, _extends({\n        onChange: onChange // id={inputId}\n\n      }, props, {\n        name: name,\n        type: type,\n        value: value,\n        placeholder: label,\n        prefix: prefix,\n        suffix: suffix,\n        allowClear: versions.filter(version => version === \"discount\")[0] === \"discount\" ? true : false,\n        className: versions[0] === \"discount\" ? \"c-input\" : \"c-input__input\"\n      })));\n    } else {\n      return __jsx(\"div\", {\n        className: className,\n        style: {\n          width: '100%'\n        }\n      }, __jsx(AntInput, _extends({\n        onChange: onChange // id={inputId}\n\n      }, props, {\n        name: name,\n        type: type,\n        value: value,\n        placeholder: label,\n        prefix: prefix,\n        suffix: suffix,\n        allowClear: versions.filter(version => version === \"discount\")[0] === \"discount\" ? true : false,\n        className: versions[0] === \"discount\" ? \"c-input\" : \"c-input__input\"\n      })));\n    }\n  }\n\n}\n\nInput.defaultProps = {\n  inputId: `${parseInt(Math.random() * new Date().getTime())}`,\n  type: \"text\",\n  versions: [\"default\"]\n};\nexport default Input;","map":null,"metadata":{},"sourceType":"module"}