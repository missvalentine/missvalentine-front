{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SET_CARDS, SET_ERRORS, CLEAR_ERRORS, SET_USER } from \"./type\";\nimport { authorizeAddCard, updateUserDetails, getUserDetails, authorizeDeleteCard } from \"../../services/api\";\nexport const setCards = payload => ({\n  type: SET_CARDS,\n  payload\n});\nexport const getCards = id => async dispatch => {\n  getUserDetails(id).then(resRaw => {\n    const res = resRaw.data;\n    console.log(res);\n    const cards = returnCards(res);\n    dispatch(setCards(cards));\n  }).catch(err => console.log({\n    err\n  }));\n};\nexport const addCardAuthorize = data => dispatch => {\n  const {\n    user,\n    card,\n    bank,\n    oldCards\n  } = data;\n  const {\n    userMetaId,\n    _id,\n    userMetaObj\n  } = user;\n  console.log({\n    data,\n    dispatch\n  });\n\n  const sendCardDetails = (customData, userId) => {\n    console.log({\n      customData,\n      userId\n    });\n    authorizeAddCard(customData).then(response => {\n      const res = response.data;\n      const {\n        status,\n        card\n      } = res;\n\n      if (status && card && card.paymentProfile && card.messages && card.messages.resultCode === \"Ok\") {\n        //   if (userId) {\n        //     updateUserMeta(userId);\n        //   }\n        const {\n          customerProfileId,\n          customerPaymentProfileId,\n          payment\n        } = card.paymentProfile;\n\n        const newCard = _objectSpread({\n          customerProfileId,\n          customerPaymentProfileId\n        }, payment);\n\n        const allCardsPre = oldCards ? [...oldCards, newCard] : [newCard];\n        const defaultCard = allCardsPre.find(el => el.isDefault === true);\n        const allCards = allCardsPre.map((el, index) => {\n          if (index === 0 && !defaultCard) return _objectSpread(_objectSpread({}, el), {}, {\n            isDefault: true\n          });\n          return el;\n        });\n        updateUserDetails({\n          userid: _id,\n          carddetails: {\n            cards: allCards\n          }\n        }).then(response => {\n          console.log({\n            response\n          });\n          const res = response.data;\n          const cards = returnCards(res);\n          dispatch(setCards(cards)); // getUserMetaNoCart(userId);\n\n          dispatch({\n            type: CLEAR_ERRORS,\n            payload: {}\n          });\n          getUserDetails(userId).then(response => {\n            const res = response.data;\n\n            if (res.user && res.user._id) {\n              console.log(\"user meta found\", res);\n              dispatch({\n                type: SET_USER,\n                payload: _objectSpread(_objectSpread({}, res.user.userid), {}, {\n                  userMetaId: res.user._id,\n                  userMetaObj: res.user\n                })\n              });\n            }\n          });\n        }).catch(err => {\n          dispatch({\n            type: SET_ERRORS,\n            payload: {\n              cards: [\"Some thing wrong\"]\n            }\n          });\n          getUserDetails(userId).then(response => {\n            const res = response.data;\n\n            if (res.user && res.user._id) {\n              console.log(\"user meta found\", res);\n              dispatch({\n                type: SET_USER,\n                payload: _objectSpread(_objectSpread({}, res.user.userid), {}, {\n                  userMetaId: res.user._id,\n                  userMetaObj: res.user\n                })\n              });\n            }\n          });\n          console.log({\n            err\n          });\n        });\n        console.log({\n          customerProfileId,\n          customerPaymentProfileId,\n          payment,\n          customData\n        });\n      } else {\n        dispatch({\n          type: SET_ERRORS,\n          payload: {\n            cards: [\"Some thing wrong\"]\n          }\n        });\n      }\n    });\n  };\n\n  const chooseCardOrBank = (userMetaId, userMetaObj) => {\n    const {\n      customerProfile\n    } = userMetaObj;\n\n    if (customerProfile) {\n      if (card) {\n        const {\n          cardnumber,\n          cvc,\n          expmonth,\n          expyear\n        } = card;\n        const creditcard = {\n          cardNumber: cardnumber.split(\"-\").join(\"\"),\n          expirationDate: `20${expyear}-${expmonth}`,\n          cardCode: cvc\n        };\n        sendCardDetails({\n          creditcard,\n          profileid: customerProfile\n        });\n      } else if (bank) {\n        sendCardDetails({\n          bank,\n          profileid: customerProfile\n        });\n      }\n    } else {\n      if (card) {\n        const {\n          cardnumber,\n          cvc,\n          expmonth,\n          expyear\n        } = card;\n        const creditcard = {\n          cardNumber: cardnumber.split(\"-\").join(\"\"),\n          expirationDate: `20${expyear}-${expmonth}`,\n          cardCode: cvc\n        };\n        const userMetaIdId = userMetaId._id ? userMetaId._id : typeof userMetaId === \"string\" && userMetaId;\n        sendCardDetails({\n          creditcard,\n          email: userMetaIdId + \"@cbdbene.com\",\n          metaid: userMetaIdId\n        }, _id);\n      } else if (bank) {\n        const userMetaIdId = userMetaId._id ? userMetaId._id : typeof userMetaId === \"string\" && userMetaId;\n        sendCardDetails({\n          bank,\n          email: userMetaIdId + \"@cbdbene.com\",\n          metaid: userMetaIdId\n        }, _id);\n      }\n    }\n  };\n\n  if (userMetaObj && userMetaId) {\n    chooseCardOrBank(userMetaId, userMetaObj);\n  } else if (_id) {\n    getUserDetails(_id).then(res => {\n      console.log({\n        res\n      });\n      const {\n        user\n      } = res.data;\n      const userMetaId = user._id;\n      const userMetaObj = data.user;\n      chooseCardOrBank(userMetaId, userMetaObj);\n    });\n  }\n};\n\nconst returnCards = res => {\n  if (res.user) {\n    if (res.user.carddetails) {\n      return res.user.carddetails;\n    }\n  }\n\n  return {};\n};\n\nexport const addCard = (userid, card, oldDetail = {}, oldCards = []) => dispatch => {\n  console.log({\n    userid,\n    card\n  });\n  const found = oldCards.find(el => el.id === card.id);\n  console.log({\n    found\n  });\n\n  if (found) {\n    dispatch(editCard(userid, card, oldDetail, oldCards));\n  } else {\n    const allCardsPre = oldCards ? [...oldCards, card] : [card];\n    const defaultCard = allCardsPre.find(el => el.isDefault === true);\n    const allCards = allCardsPre.map((el, index) => {\n      if (index === 0 && !defaultCard) return _objectSpread(_objectSpread({}, el), {}, {\n        isDefault: true\n      });\n      return el;\n    });\n    updateUserDetails({\n      userid,\n      carddetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n        cards: allCards\n      })\n    }).then(rep => {\n      const res = rep.data;\n      console.log({\n        res\n      });\n      const cards = returnCards(res);\n      dispatch(setCards(cards));\n    }).catch(err => {\n      console.log({\n        err\n      });\n    });\n  }\n};\nexport const editCard = (userid, card, oldDetail = {}, oldCards = []) => dispatch => {\n  const newCard = oldCards.map(el => {\n    if (el.id === card.id) return card;\n    return el;\n  });\n  addUpdateUserDetails({\n    userid,\n    carddetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n      cards: newCard\n    })\n  }).then(rep => {\n    const res = rep.data;\n    console.log({\n      res\n    });\n    const cards = returnCards(res);\n    dispatch(setCards(cards));\n  }).catch(err => {\n    console.log({\n      err\n    });\n  });\n};\nexport const deleteCard = (userid, card, oldDetail = {}, oldCards = []) => dispatch => {\n  const newCard = oldCards.filter(el => el.customerPaymentProfileId !== card.customerPaymentProfileId);\n  authorizeDeleteCard({\n    paymentid: card.customerPaymentProfileId,\n    profileid: card.customerProfileId\n  }).then(rep => {\n    const res = rep.data;\n    console.log({\n      res\n    });\n\n    if (res && res.data && res.data.messages && res.data.messages.resultCode === \"Ok\") {\n      const defaultCard = newCard.find(el => el.isDefault === true);\n      const allCards = newCard.map((el, index) => {\n        if (index === 0 && !defaultCard) return _objectSpread(_objectSpread({}, el), {}, {\n          isDefault: true\n        });\n        return el;\n      });\n      updateUserDetails({\n        userid,\n        carddetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n          cards: allCards\n        })\n      }).then(rep => {\n        const res = rep.data;\n        console.log({\n          res\n        });\n        const cards = returnCards(res);\n        dispatch(setCards(cards));\n      }).catch(err => {\n        console.log({\n          err\n        });\n      });\n    }\n  });\n};\nexport const setDefaultCard = (userid, id, oldDetail = {}, oldCards = []) => dispatch => {\n  const newCard = oldCards.map(el => {\n    return _objectSpread(_objectSpread({}, el), {}, {\n      isDefault: el.customerPaymentProfileId === id\n    });\n  });\n  updateUserDetails({\n    userid,\n    carddetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n      cards: newCard\n    })\n  }).then(rep => {\n    const res = rep.data;\n    console.log({\n      res\n    });\n    const cards = returnCards(res);\n    dispatch(setCards(cards));\n  }).catch(err => {\n    console.log({\n      err\n    });\n  });\n};","map":{"version":3,"sources":["/Users/akshataggarwal/Documents/Coding Files/webd projects/missnew front/redux/actions/cards.js"],"names":["SET_CARDS","SET_ERRORS","CLEAR_ERRORS","SET_USER","authorizeAddCard","updateUserDetails","getUserDetails","authorizeDeleteCard","setCards","payload","type","getCards","id","dispatch","then","resRaw","res","data","console","log","cards","returnCards","catch","err","addCardAuthorize","user","card","bank","oldCards","userMetaId","_id","userMetaObj","sendCardDetails","customData","userId","response","status","paymentProfile","messages","resultCode","customerProfileId","customerPaymentProfileId","payment","newCard","allCardsPre","defaultCard","find","el","isDefault","allCards","map","index","userid","carddetails","chooseCardOrBank","customerProfile","cardnumber","cvc","expmonth","expyear","creditcard","cardNumber","split","join","expirationDate","cardCode","profileid","userMetaIdId","email","metaid","addCard","oldDetail","found","editCard","rep","addUpdateUserDetails","deleteCard","filter","paymentid","setDefaultCard"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,YAAhC,EAA8CC,QAA9C,QAA8D,QAA9D;AACA,SACEC,gBADF,EAEEC,iBAFF,EAGEC,cAHF,EAIEC,mBAJF,QAKO,oBALP;AAMA,OAAO,MAAMC,QAAQ,GAAGC,OAAO,KAAK;AAClCC,EAAAA,IAAI,EAAEV,SAD4B;AAElCS,EAAAA;AAFkC,CAAL,CAAxB;AAKP,OAAO,MAAME,QAAQ,GAAGC,EAAE,IAAI,MAAMC,QAAN,IAAkB;AAC9CP,EAAAA,cAAc,CAACM,EAAD,CAAd,CACGE,IADH,CACQC,MAAM,IAAI;AACd,UAAMC,GAAG,GAAGD,MAAM,CAACE,IAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,UAAMI,KAAK,GAAGC,WAAW,CAACL,GAAD,CAAzB;AACAH,IAAAA,QAAQ,CAACL,QAAQ,CAACY,KAAD,CAAT,CAAR;AACD,GANH,EAOGE,KAPH,CAOSC,GAAG,IAAIL,OAAO,CAACC,GAAR,CAAY;AAAEI,IAAAA;AAAF,GAAZ,CAPhB;AAQD,CATM;AAWP,OAAO,MAAMC,gBAAgB,GAAGP,IAAI,IAAIJ,QAAQ,IAAI;AAClD,QAAM;AAAEY,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA;AAApB,MAAiCX,IAAvC;AACA,QAAM;AAAEY,IAAAA,UAAF;AAAcC,IAAAA,GAAd;AAAmBC,IAAAA;AAAnB,MAAmCN,IAAzC;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY;AACVF,IAAAA,IADU;AACJJ,IAAAA;AADI,GAAZ;;AAGA,QAAMmB,eAAe,GAAG,CAACC,UAAD,EAAaC,MAAb,KAAwB;AAC9ChB,IAAAA,OAAO,CAACC,GAAR,CAAY;AACVc,MAAAA,UADU;AAEVC,MAAAA;AAFU,KAAZ;AAIA9B,IAAAA,gBAAgB,CAAC6B,UAAD,CAAhB,CACGnB,IADH,CACQqB,QAAQ,IAAI;AAChB,YAAMnB,GAAG,GAAGmB,QAAQ,CAAClB,IAArB;AACA,YAAM;AAAEmB,QAAAA,MAAF;AAAUV,QAAAA;AAAV,UAAmBV,GAAzB;;AACA,UACEoB,MAAM,IACNV,IADA,IAEAA,IAAI,CAACW,cAFL,IAGAX,IAAI,CAACY,QAHL,IAIAZ,IAAI,CAACY,QAAL,CAAcC,UAAd,KAA6B,IAL/B,EAME;AACF;AACA;AACA;AAEE,cAAM;AACJC,UAAAA,iBADI;AAEJC,UAAAA,wBAFI;AAGJC,UAAAA;AAHI,YAIFhB,IAAI,CAACW,cAJT;;AAMA,cAAMM,OAAO;AACXH,UAAAA,iBADW;AAEXC,UAAAA;AAFW,WAGRC,OAHQ,CAAb;;AAKA,cAAME,WAAW,GAAGhB,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAce,OAAd,CAAH,GAA4B,CAACA,OAAD,CAAxD;AACA,cAAME,WAAW,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,EAAE,IAAIA,EAAE,CAACC,SAAH,KAAiB,IAAxC,CAApB;AACA,cAAMC,QAAQ,GAAGL,WAAW,CAACM,GAAZ,CAAgB,CAACH,EAAD,EAAKI,KAAL,KAAc;AAC7C,cAAGA,KAAK,KAAK,CAAV,IAAe,CAACN,WAAnB,EACE,uCACKE,EADL;AAEEC,YAAAA,SAAS,EAAE;AAFb;AAIF,iBAAOD,EAAP;AACD,SAPgB,CAAjB;AAQA1C,QAAAA,iBAAiB,CAAC;AAChB+C,UAAAA,MAAM,EAAEtB,GADQ;AAEhBuB,UAAAA,WAAW,EAAE;AACXjC,YAAAA,KAAK,EAAE6B;AADI;AAFG,SAAD,CAAjB,CAMGnC,IANH,CAMQqB,QAAQ,IAAI;AAChBjB,UAAAA,OAAO,CAACC,GAAR,CAAY;AAAEgB,YAAAA;AAAF,WAAZ;AACA,gBAAMnB,GAAG,GAAGmB,QAAQ,CAAClB,IAArB;AACA,gBAAMG,KAAK,GAAGC,WAAW,CAACL,GAAD,CAAzB;AACAH,UAAAA,QAAQ,CAACL,QAAQ,CAACY,KAAD,CAAT,CAAR,CAJgB,CAKhB;;AACAP,UAAAA,QAAQ,CAAC;AACPH,YAAAA,IAAI,EAAER,YADC;AAEPO,YAAAA,OAAO,EAAE;AAFF,WAAD,CAAR;AAIAH,UAAAA,cAAc,CAAC4B,MAAD,CAAd,CACGpB,IADH,CACQqB,QAAQ,IAAI;AAChB,kBAAMnB,GAAG,GAAGmB,QAAQ,CAAClB,IAArB;;AACA,gBAAID,GAAG,CAACS,IAAJ,IAAYT,GAAG,CAACS,IAAJ,CAASK,GAAzB,EAA8B;AAC5BZ,cAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,GAA/B;AACAH,cAAAA,QAAQ,CAAC;AACPH,gBAAAA,IAAI,EAAEP,QADC;AAEPM,gBAAAA,OAAO,kCACFO,GAAG,CAACS,IAAJ,CAAS2B,MADP;AAELvB,kBAAAA,UAAU,EAAEb,GAAG,CAACS,IAAJ,CAASK,GAFhB;AAGLC,kBAAAA,WAAW,EAAEf,GAAG,CAACS;AAHZ;AAFA,eAAD,CAAR;AAQD;AACF,WAdH;AAeD,SA/BH,EAgCGH,KAhCH,CAgCSC,GAAG,IAAI;AACZV,UAAAA,QAAQ,CAAC;AACPH,YAAAA,IAAI,EAAET,UADC;AAEPQ,YAAAA,OAAO,EAAE;AACPW,cAAAA,KAAK,EAAE,CAAC,kBAAD;AADA;AAFF,WAAD,CAAR;AAOAd,UAAAA,cAAc,CAAC4B,MAAD,CAAd,CACGpB,IADH,CACQqB,QAAQ,IAAI;AACd,kBAAMnB,GAAG,GAAGmB,QAAQ,CAAClB,IAArB;;AACF,gBAAID,GAAG,CAACS,IAAJ,IAAYT,GAAG,CAACS,IAAJ,CAASK,GAAzB,EAA8B;AAC5BZ,cAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,GAA/B;AACAH,cAAAA,QAAQ,CAAC;AACPH,gBAAAA,IAAI,EAAEP,QADC;AAEPM,gBAAAA,OAAO,kCACFO,GAAG,CAACS,IAAJ,CAAS2B,MADP;AAELvB,kBAAAA,UAAU,EAAEb,GAAG,CAACS,IAAJ,CAASK,GAFhB;AAGLC,kBAAAA,WAAW,EAAEf,GAAG,CAACS;AAHZ;AAFA,eAAD,CAAR;AAQD;AACF,WAdH;AAeAP,UAAAA,OAAO,CAACC,GAAR,CAAY;AAAEI,YAAAA;AAAF,WAAZ;AACD,SAxDH;AAyDAL,QAAAA,OAAO,CAACC,GAAR,CAAY;AACVqB,UAAAA,iBADU;AAEVC,UAAAA,wBAFU;AAGVC,UAAAA,OAHU;AAIVT,UAAAA;AAJU,SAAZ;AAMD,OA/FD,MA+FO;AACLpB,QAAAA,QAAQ,CAAC;AACPH,UAAAA,IAAI,EAAET,UADC;AAEPQ,UAAAA,OAAO,EAAE;AACPW,YAAAA,KAAK,EAAE,CAAC,kBAAD;AADA;AAFF,SAAD,CAAR;AAMD;AACF,KA3GH;AA4GD,GAjHD;;AAkHA,QAAMkC,gBAAgB,GAAG,CAACzB,UAAD,EAAaE,WAAb,KAA6B;AACpD,UAAM;AAAEwB,MAAAA;AAAF,QAAsBxB,WAA5B;;AACA,QAAIwB,eAAJ,EAAqB;AACnB,UAAI7B,IAAJ,EAAU;AACR,cAAM;AAAE8B,UAAAA,UAAF;AAAcC,UAAAA,GAAd;AAAmBC,UAAAA,QAAnB;AAA6BC,UAAAA;AAA7B,YAAyCjC,IAA/C;AACA,cAAMkC,UAAU,GAAG;AACjBC,UAAAA,UAAU,EAAEL,UAAU,CAACM,KAAX,CAAiB,GAAjB,EAAsBC,IAAtB,CAA2B,EAA3B,CADK;AAEjBC,UAAAA,cAAc,EAAG,KAAIL,OAAQ,IAAGD,QAAS,EAFxB;AAGjBO,UAAAA,QAAQ,EAAER;AAHO,SAAnB;AAKAzB,QAAAA,eAAe,CAAC;AACd4B,UAAAA,UADc;AAEdM,UAAAA,SAAS,EAAEX;AAFG,SAAD,CAAf;AAID,OAXD,MAWO,IAAI5B,IAAJ,EAAU;AACfK,QAAAA,eAAe,CAAC;AACdL,UAAAA,IADc;AAEduC,UAAAA,SAAS,EAAEX;AAFG,SAAD,CAAf;AAID;AACF,KAlBD,MAkBO;AACL,UAAI7B,IAAJ,EAAU;AACR,cAAM;AAAE8B,UAAAA,UAAF;AAAcC,UAAAA,GAAd;AAAmBC,UAAAA,QAAnB;AAA6BC,UAAAA;AAA7B,YAAyCjC,IAA/C;AACA,cAAMkC,UAAU,GAAG;AACjBC,UAAAA,UAAU,EAAEL,UAAU,CAACM,KAAX,CAAiB,GAAjB,EAAsBC,IAAtB,CAA2B,EAA3B,CADK;AAEjBC,UAAAA,cAAc,EAAG,KAAIL,OAAQ,IAAGD,QAAS,EAFxB;AAGjBO,UAAAA,QAAQ,EAAER;AAHO,SAAnB;AAKA,cAAMU,YAAY,GAAGtC,UAAU,CAACC,GAAX,GAAiBD,UAAU,CAACC,GAA5B,GAAoC,OAAOD,UAAP,KAAsB,QAAtB,IAAkCA,UAA3F;AACAG,QAAAA,eAAe,CACb;AACE4B,UAAAA,UADF;AAEEQ,UAAAA,KAAK,EAAED,YAAY,GAAG,cAFxB;AAGEE,UAAAA,MAAM,EAAEF;AAHV,SADa,EAMbrC,GANa,CAAf;AAQD,OAhBD,MAgBO,IAAIH,IAAJ,EAAU;AACf,cAAMwC,YAAY,GAAGtC,UAAU,CAACC,GAAX,GAAiBD,UAAU,CAACC,GAA5B,GAAoC,OAAOD,UAAP,KAAsB,QAAtB,IAAkCA,UAA3F;AACAG,QAAAA,eAAe,CACb;AACEL,UAAAA,IADF;AAEEyC,UAAAA,KAAK,EAAED,YAAY,GAAG,cAFxB;AAGEE,UAAAA,MAAM,EAAEF;AAHV,SADa,EAMbrC,GANa,CAAf;AAQD;AACF;AACF,GAjDD;;AAkDA,MAAIC,WAAW,IAAIF,UAAnB,EAA+B;AAC7ByB,IAAAA,gBAAgB,CAACzB,UAAD,EAAaE,WAAb,CAAhB;AACD,GAFD,MAEM,IAAGD,GAAH,EAAO;AACXxB,IAAAA,cAAc,CAACwB,GAAD,CAAd,CAAoBhB,IAApB,CAAyBE,GAAG,IAAI;AAC9BE,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,QAAAA;AAAF,OAAZ;AACA,YAAM;AACJS,QAAAA;AADI,UAEFT,GAAG,CAACC,IAFR;AAGA,YAAMY,UAAU,GAAGJ,IAAI,CAACK,GAAxB;AACA,YAAMC,WAAW,GAAGd,IAAI,CAACQ,IAAzB;AACA6B,MAAAA,gBAAgB,CAACzB,UAAD,EAAaE,WAAb,CAAhB;AACD,KARD;AASD;AACF,CAvLM;;AAwLP,MAAMV,WAAW,GAAGL,GAAG,IAAI;AACzB,MAAIA,GAAG,CAACS,IAAR,EAAc;AACZ,QAAIT,GAAG,CAACS,IAAJ,CAAS4B,WAAb,EAA0B;AACxB,aAAOrC,GAAG,CAACS,IAAJ,CAAS4B,WAAhB;AACD;AACF;;AACD,SAAO,EAAP;AACD,CAPD;;AAQA,OAAO,MAAMiB,OAAO,GAAG,CACrBlB,MADqB,EAErB1B,IAFqB,EAGrB6C,SAAS,GAAG,EAHS,EAIrB3C,QAAQ,GAAG,EAJU,KAKlBf,QAAQ,IAAI;AACfK,EAAAA,OAAO,CAACC,GAAR,CAAY;AACViC,IAAAA,MADU;AAEV1B,IAAAA;AAFU,GAAZ;AAIA,QAAM8C,KAAK,GAAG5C,QAAQ,CAACkB,IAAT,CAAcC,EAAE,IAAIA,EAAE,CAACnC,EAAH,KAAUc,IAAI,CAACd,EAAnC,CAAd;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY;AACVqD,IAAAA;AADU,GAAZ;;AAGA,MAAIA,KAAJ,EAAW;AACT3D,IAAAA,QAAQ,CAAC4D,QAAQ,CAACrB,MAAD,EAAS1B,IAAT,EAAe6C,SAAf,EAA0B3C,QAA1B,CAAT,CAAR;AACD,GAFD,MAEO;AAEL,UAAMgB,WAAW,GAAGhB,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAcF,IAAd,CAAH,GAAyB,CAACA,IAAD,CAArD;AACA,UAAMmB,WAAW,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,EAAE,IAAIA,EAAE,CAACC,SAAH,KAAiB,IAAxC,CAApB;AACA,UAAMC,QAAQ,GAAGL,WAAW,CAACM,GAAZ,CAAgB,CAACH,EAAD,EAAKI,KAAL,KAAc;AAC7C,UAAGA,KAAK,KAAK,CAAV,IAAe,CAACN,WAAnB,EACE,uCACKE,EADL;AAEEC,QAAAA,SAAS,EAAE;AAFb;AAIF,aAAOD,EAAP;AACD,KAPgB,CAAjB;AAQA1C,IAAAA,iBAAiB,CAAC;AAChB+C,MAAAA,MADgB;AAEhBC,MAAAA,WAAW,kCACNkB,SADM;AAETnD,QAAAA,KAAK,EAAE6B;AAFE;AAFK,KAAD,CAAjB,CAOGnC,IAPH,CAOQ4D,GAAG,IAAI;AACX,YAAM1D,GAAG,GAAG0D,GAAG,CAACzD,IAAhB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,QAAAA;AAAF,OAAZ;AACA,YAAMI,KAAK,GAAGC,WAAW,CAACL,GAAD,CAAzB;AACAH,MAAAA,QAAQ,CAACL,QAAQ,CAACY,KAAD,CAAT,CAAR;AACD,KAZH,EAaGE,KAbH,CAaSC,GAAG,IAAI;AACZL,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEI,QAAAA;AAAF,OAAZ;AACD,KAfH;AAgBD;AACF,CA7CM;AA8CP,OAAO,MAAMkD,QAAQ,GAAG,CACtBrB,MADsB,EAEtB1B,IAFsB,EAGtB6C,SAAS,GAAG,EAHU,EAItB3C,QAAQ,GAAG,EAJW,KAKnBf,QAAQ,IAAI;AACf,QAAM8B,OAAO,GAAGf,QAAQ,CAACsB,GAAT,CAAaH,EAAE,IAAI;AACjC,QAAIA,EAAE,CAACnC,EAAH,KAAUc,IAAI,CAACd,EAAnB,EAAuB,OAAOc,IAAP;AAEvB,WAAOqB,EAAP;AACD,GAJe,CAAhB;AAKA4B,EAAAA,oBAAoB,CAAC;AACnBvB,IAAAA,MADmB;AAEnBC,IAAAA,WAAW,kCACNkB,SADM;AAETnD,MAAAA,KAAK,EAAEuB;AAFE;AAFQ,GAAD,CAApB,CAOG7B,IAPH,CAOQ4D,GAAG,IAAI;AACX,UAAM1D,GAAG,GAAG0D,GAAG,CAACzD,IAAhB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,MAAAA;AAAF,KAAZ;AACA,UAAMI,KAAK,GAAGC,WAAW,CAACL,GAAD,CAAzB;AACAH,IAAAA,QAAQ,CAACL,QAAQ,CAACY,KAAD,CAAT,CAAR;AACD,GAZH,EAaGE,KAbH,CAaSC,GAAG,IAAI;AACZL,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEI,MAAAA;AAAF,KAAZ;AACD,GAfH;AAgBD,CA3BM;AA4BP,OAAO,MAAMqD,UAAU,GAAG,CACxBxB,MADwB,EAExB1B,IAFwB,EAGxB6C,SAAS,GAAG,EAHY,EAIxB3C,QAAQ,GAAG,EAJa,KAKrBf,QAAQ,IAAI;AACf,QAAM8B,OAAO,GAAGf,QAAQ,CAACiD,MAAT,CACd9B,EAAE,IAAIA,EAAE,CAACN,wBAAH,KAAgCf,IAAI,CAACe,wBAD7B,CAAhB;AAIAlC,EAAAA,mBAAmB,CAAC;AAClBuE,IAAAA,SAAS,EAAEpD,IAAI,CAACe,wBADE;AAElByB,IAAAA,SAAS,EAAExC,IAAI,CAACc;AAFE,GAAD,CAAnB,CAIG1B,IAJH,CAIQ4D,GAAG,IAAI;AACX,UAAM1D,GAAG,GAAG0D,GAAG,CAACzD,IAAhB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AACVH,MAAAA;AADU,KAAZ;;AAGA,QACEA,GAAG,IACHA,GAAG,CAACC,IADJ,IAEAD,GAAG,CAACC,IAAJ,CAASqB,QAFT,IAGAtB,GAAG,CAACC,IAAJ,CAASqB,QAAT,CAAkBC,UAAlB,KAAiC,IAJnC,EAKE;AAEA,YAAMM,WAAW,GAAGF,OAAO,CAACG,IAAR,CAAaC,EAAE,IAAIA,EAAE,CAACC,SAAH,KAAiB,IAApC,CAApB;AACA,YAAMC,QAAQ,GAAGN,OAAO,CAACO,GAAR,CAAY,CAACH,EAAD,EAAKI,KAAL,KAAc;AACzC,YAAGA,KAAK,KAAK,CAAV,IAAe,CAACN,WAAnB,EACE,uCACKE,EADL;AAEEC,UAAAA,SAAS,EAAE;AAFb;AAIF,eAAOD,EAAP;AACD,OAPgB,CAAjB;AAQA1C,MAAAA,iBAAiB,CAAC;AAChB+C,QAAAA,MADgB;AAEhBC,QAAAA,WAAW,kCACNkB,SADM;AAETnD,UAAAA,KAAK,EAAE6B;AAFE;AAFK,OAAD,CAAjB,CAOGnC,IAPH,CAOQ4D,GAAG,IAAI;AACX,cAAM1D,GAAG,GAAG0D,GAAG,CAACzD,IAAhB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,UAAAA;AAAF,SAAZ;AACA,cAAMI,KAAK,GAAGC,WAAW,CAACL,GAAD,CAAzB;AACAH,QAAAA,QAAQ,CAACL,QAAQ,CAACY,KAAD,CAAT,CAAR;AACD,OAZH,EAaGE,KAbH,CAaSC,GAAG,IAAI;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAY;AAAEI,UAAAA;AAAF,SAAZ;AACD,OAfH;AAgBD;AACF,GA1CH;AA2CD,CArDM;AAsDP,OAAO,MAAMwD,cAAc,GAAG,CAC5B3B,MAD4B,EAE5BxC,EAF4B,EAG5B2D,SAAS,GAAG,EAHgB,EAI5B3C,QAAQ,GAAG,EAJiB,KAKzBf,QAAQ,IAAI;AACf,QAAM8B,OAAO,GAAGf,QAAQ,CAACsB,GAAT,CAAaH,EAAE,IAAI;AACjC,2CACKA,EADL;AAEEC,MAAAA,SAAS,EAAED,EAAE,CAACN,wBAAH,KAAgC7B;AAF7C;AAID,GALe,CAAhB;AAOAP,EAAAA,iBAAiB,CAAC;AAChB+C,IAAAA,MADgB;AAEhBC,IAAAA,WAAW,kCACNkB,SADM;AAETnD,MAAAA,KAAK,EAAEuB;AAFE;AAFK,GAAD,CAAjB,CAOG7B,IAPH,CAOQ4D,GAAG,IAAI;AACX,UAAM1D,GAAG,GAAG0D,GAAG,CAACzD,IAAhB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,MAAAA;AAAF,KAAZ;AACA,UAAMI,KAAK,GAAGC,WAAW,CAACL,GAAD,CAAzB;AACAH,IAAAA,QAAQ,CAACL,QAAQ,CAACY,KAAD,CAAT,CAAR;AACD,GAZH,EAaGE,KAbH,CAaSC,GAAG,IAAI;AACZL,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEI,MAAAA;AAAF,KAAZ;AACD,GAfH;AAgBD,CA7BM","sourcesContent":["import { SET_CARDS, SET_ERRORS, CLEAR_ERRORS, SET_USER } from \"./type\";\nimport { \n  authorizeAddCard, \n  updateUserDetails, \n  getUserDetails,\n  authorizeDeleteCard\n} from \"../../services/api\";\nexport const setCards = payload => ({\n  type: SET_CARDS,\n  payload\n});\n\nexport const getCards = id => async dispatch => {\n  getUserDetails(id)\n    .then(resRaw => {\n      const res = resRaw.data\n      console.log(res);\n      const cards = returnCards(res);\n      dispatch(setCards(cards));\n    })\n    .catch(err => console.log({ err }));\n};\n\nexport const addCardAuthorize = data => dispatch => {\n  const { user, card, bank, oldCards } = data;\n  const { userMetaId, _id, userMetaObj } = user;\n  console.log({\n    data, dispatch\n  })\n  const sendCardDetails = (customData, userId) => {\n    console.log({\n      customData,\n      userId\n    });\n    authorizeAddCard(customData)\n      .then(response => {\n        const res = response.data\n        const { status, card } = res;\n        if (\n          status &&\n          card &&\n          card.paymentProfile &&\n          card.messages &&\n          card.messages.resultCode === \"Ok\"\n        ) {\n        //   if (userId) {\n        //     updateUserMeta(userId);\n        //   }\n\n          const {\n            customerProfileId,\n            customerPaymentProfileId,\n            payment\n          } = card.paymentProfile;\n\n          const newCard = {\n            customerProfileId,\n            customerPaymentProfileId,\n            ...payment\n          };\n          const allCardsPre = oldCards ? [...oldCards, newCard] : [newCard]\n          const defaultCard = allCardsPre.find(el => el.isDefault === true)\n          const allCards = allCardsPre.map((el, index)=> {\n            if(index === 0 && !defaultCard)\n              return ({\n                ...el,\n                isDefault: true\n              })\n            return el\n          })\n          updateUserDetails({\n            userid: _id,\n            carddetails: {\n              cards: allCards\n            }\n          })\n            .then(response => {\n              console.log({ response });\n              const res = response.data\n              const cards = returnCards(res);\n              dispatch(setCards(cards));\n              // getUserMetaNoCart(userId);\n              dispatch({\n                type: CLEAR_ERRORS,\n                payload: {}\n              });\n              getUserDetails(userId)\n                .then(response => {\n                  const res = response.data\n                  if (res.user && res.user._id) {\n                    console.log(\"user meta found\", res);\n                    dispatch({\n                      type: SET_USER,\n                      payload: {\n                        ...res.user.userid,\n                        userMetaId: res.user._id,\n                        userMetaObj: res.user\n                      }\n                    });\n                  }\n                });\n            })\n            .catch(err => {\n              dispatch({\n                type: SET_ERRORS,\n                payload: {\n                  cards: [\"Some thing wrong\"]\n                }\n              });\n\n              getUserDetails(userId)\n                .then(response => {\n                    const res = response.data\n                  if (res.user && res.user._id) {\n                    console.log(\"user meta found\", res);\n                    dispatch({\n                      type: SET_USER,\n                      payload: {\n                        ...res.user.userid,\n                        userMetaId: res.user._id,\n                        userMetaObj: res.user\n                      }\n                    });\n                  }\n                });\n              console.log({ err });\n            });\n          console.log({\n            customerProfileId,\n            customerPaymentProfileId,\n            payment,\n            customData\n          });\n        } else {\n          dispatch({\n            type: SET_ERRORS,\n            payload: {\n              cards: [\"Some thing wrong\"]\n            }\n          });\n        }\n      });\n  };\n  const chooseCardOrBank = (userMetaId, userMetaObj) => {\n    const { customerProfile } = userMetaObj;\n    if (customerProfile) {\n      if (card) {\n        const { cardnumber, cvc, expmonth, expyear } = card;\n        const creditcard = {\n          cardNumber: cardnumber.split(\"-\").join(\"\"),\n          expirationDate: `20${expyear}-${expmonth}`,\n          cardCode: cvc\n        };\n        sendCardDetails({\n          creditcard,\n          profileid: customerProfile\n        });\n      } else if (bank) {\n        sendCardDetails({\n          bank,\n          profileid: customerProfile\n        });\n      }\n    } else {\n      if (card) {\n        const { cardnumber, cvc, expmonth, expyear } = card;\n        const creditcard = {\n          cardNumber: cardnumber.split(\"-\").join(\"\"),\n          expirationDate: `20${expyear}-${expmonth}`,\n          cardCode: cvc\n        };\n        const userMetaIdId = userMetaId._id ? userMetaId._id : ( typeof userMetaId === \"string\" && userMetaId ) \n        sendCardDetails(\n          {\n            creditcard,\n            email: userMetaIdId + \"@cbdbene.com\",\n            metaid: userMetaIdId\n          },\n          _id\n        );\n      } else if (bank) {\n        const userMetaIdId = userMetaId._id ? userMetaId._id : ( typeof userMetaId === \"string\" && userMetaId ) \n        sendCardDetails(\n          {\n            bank,\n            email: userMetaIdId + \"@cbdbene.com\",\n            metaid: userMetaIdId\n          },\n          _id\n        );\n      }\n    }\n  }\n  if (userMetaObj && userMetaId) {\n    chooseCardOrBank(userMetaId, userMetaObj, )\n  }else if(_id){\n    getUserDetails(_id).then(res => {\n      console.log({ res });\n      const {\n        user\n      } = res.data\n      const userMetaId = user._id;\n      const userMetaObj = data.user;\n      chooseCardOrBank(userMetaId, userMetaObj, )\n    })\n  }\n};\nconst returnCards = res => {\n  if (res.user) {\n    if (res.user.carddetails) {\n      return res.user.carddetails;\n    }\n  }\n  return {};\n};\nexport const addCard = (\n  userid,\n  card,\n  oldDetail = {},\n  oldCards = []\n) => dispatch => {\n  console.log({\n    userid,\n    card\n  });\n  const found = oldCards.find(el => el.id === card.id);\n  console.log({\n    found\n  });\n  if (found) {\n    dispatch(editCard(userid, card, oldDetail, oldCards));\n  } else {\n    \n    const allCardsPre = oldCards ? [...oldCards, card] : [card]\n    const defaultCard = allCardsPre.find(el => el.isDefault === true)\n    const allCards = allCardsPre.map((el, index)=> {\n      if(index === 0 && !defaultCard)\n        return ({\n          ...el,\n          isDefault: true\n        })\n      return el\n    })\n    updateUserDetails({\n      userid,\n      carddetails: {\n        ...oldDetail,\n        cards: allCards\n      }\n    })\n      .then(rep => {\n        const res = rep.data\n        console.log({ res });\n        const cards = returnCards(res);\n        dispatch(setCards(cards));\n      })\n      .catch(err => {\n        console.log({ err });\n      });\n  }\n};\nexport const editCard = (\n  userid,\n  card,\n  oldDetail = {},\n  oldCards = []\n) => dispatch => {\n  const newCard = oldCards.map(el => {\n    if (el.id === card.id) return card;\n\n    return el;\n  });\n  addUpdateUserDetails({\n    userid,\n    carddetails: {\n      ...oldDetail,\n      cards: newCard\n    }\n  })\n    .then(rep => {\n      const res = rep.data\n      console.log({ res });\n      const cards = returnCards(res);\n      dispatch(setCards(cards));\n    })\n    .catch(err => {\n      console.log({ err });\n    });\n};\nexport const deleteCard = (\n  userid,\n  card,\n  oldDetail = {},\n  oldCards = []\n) => dispatch => {\n  const newCard = oldCards.filter(\n    el => el.customerPaymentProfileId !== card.customerPaymentProfileId\n  );\n\n  authorizeDeleteCard({\n    paymentid: card.customerPaymentProfileId,\n    profileid: card.customerProfileId\n  })\n    .then(rep => {\n      const res = rep.data\n      console.log({\n        res\n      });\n      if (\n        res &&\n        res.data &&\n        res.data.messages &&\n        res.data.messages.resultCode === \"Ok\"\n      ) {\n        \n        const defaultCard = newCard.find(el => el.isDefault === true)\n        const allCards = newCard.map((el, index)=> {\n          if(index === 0 && !defaultCard)\n            return ({\n              ...el,\n              isDefault: true\n            })\n          return el\n        })\n        updateUserDetails({\n          userid,\n          carddetails: {\n            ...oldDetail,\n            cards: allCards\n          }\n        })\n          .then(rep => {\n            const res = rep.data\n            console.log({ res });\n            const cards = returnCards(res);\n            dispatch(setCards(cards));\n          })\n          .catch(err => {\n            console.log({ err });\n          });\n      }\n    });\n};\nexport const setDefaultCard = (\n  userid,\n  id,\n  oldDetail = {},\n  oldCards = []\n) => dispatch => {\n  const newCard = oldCards.map(el => {\n    return {\n      ...el,\n      isDefault: el.customerPaymentProfileId === id\n    };\n  });\n\n  updateUserDetails({\n    userid,\n    carddetails: {\n      ...oldDetail,\n      cards: newCard\n    }\n  })\n    .then(rep => {\n      const res = rep.data\n      console.log({ res });\n      const cards = returnCards(res);\n      dispatch(setCards(cards));\n    })\n    .catch(err => {\n      console.log({ err });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}