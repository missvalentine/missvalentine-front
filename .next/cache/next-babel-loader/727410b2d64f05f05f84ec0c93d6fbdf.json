{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRef, useLayoutEffect } from 'react';\nvar isBrowser = true;\n\nfunction getScrollPosition(_ref) {\n  var element = _ref.element,\n      useWindow = _ref.useWindow;\n  if (!isBrowser) return {\n    x: 0,\n    y: 0\n  };\n  var target = element ? element.current : document.body;\n  var position = target.getBoundingClientRect();\n  return useWindow ? {\n    x: window.scrollX,\n    y: window.scrollY\n  } : {\n    x: position.left,\n    y: position.top\n  };\n}\n\nexport function useScrollPosition(effect, deps, element, useWindow, wait) {\n  _s();\n\n  var position = useRef(getScrollPosition({\n    useWindow: useWindow\n  }));\n  var throttleTimeout = null;\n\n  var callBack = function callBack() {\n    var currPos = getScrollPosition({\n      element: element,\n      useWindow: useWindow\n    });\n    effect({\n      prevPos: position.current,\n      currPos: currPos\n    });\n    position.current = currPos;\n    throttleTimeout = null;\n  };\n\n  useLayoutEffect(function () {\n    var handleScroll = function handleScroll() {\n      if (wait) {\n        if (throttleTimeout === null) {\n          throttleTimeout = setTimeout(callBack, wait);\n        }\n      } else {\n        callBack();\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return function () {\n      return window.removeEventListener('scroll', handleScroll);\n    };\n  }, deps);\n}\n\n_s(useScrollPosition, \"Imm+ravzdITkQ+C++YEg8+BCqBk=\");","map":{"version":3,"sources":["/Users/akshataggarwal/Documents/Coding Files/webd projects/missnew front/services/helpers/scroll.js"],"names":["useRef","useLayoutEffect","isBrowser","getScrollPosition","element","useWindow","x","y","target","current","document","body","position","getBoundingClientRect","window","scrollX","scrollY","left","top","useScrollPosition","effect","deps","wait","throttleTimeout","callBack","currPos","prevPos","handleScroll","setTimeout","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,eAAjB,QAAwC,OAAxC;AAEA,IAAMC,SAAS,OAAf;;AAEA,SAASC,iBAAT,OAAmD;AAAA,MAAtBC,OAAsB,QAAtBA,OAAsB;AAAA,MAAbC,SAAa,QAAbA,SAAa;AACjD,MAAI,CAACH,SAAL,EAAgB,OAAO;AAAEI,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAP;AAEhB,MAAMC,MAAM,GAAGJ,OAAO,GAAGA,OAAO,CAACK,OAAX,GAAqBC,QAAQ,CAACC,IAApD;AACA,MAAMC,QAAQ,GAAGJ,MAAM,CAACK,qBAAP,EAAjB;AAEA,SAAOR,SAAS,GACZ;AAAEC,IAAAA,CAAC,EAAEQ,MAAM,CAACC,OAAZ;AAAqBR,IAAAA,CAAC,EAAEO,MAAM,CAACE;AAA/B,GADY,GAEZ;AAAEV,IAAAA,CAAC,EAAEM,QAAQ,CAACK,IAAd;AAAoBV,IAAAA,CAAC,EAAEK,QAAQ,CAACM;AAAhC,GAFJ;AAGD;;AAED,OAAO,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,IAAnC,EAAyCjB,OAAzC,EAAkDC,SAAlD,EAA6DiB,IAA7D,EAAmE;AAAA;;AACxE,MAAMV,QAAQ,GAAGZ,MAAM,CAACG,iBAAiB,CAAC;AAAEE,IAAAA,SAAS,EAATA;AAAF,GAAD,CAAlB,CAAvB;AAEA,MAAIkB,eAAe,GAAG,IAAtB;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,QAAMC,OAAO,GAAGtB,iBAAiB,CAAC;AAAEC,MAAAA,OAAO,EAAPA,OAAF;AAAWC,MAAAA,SAAS,EAATA;AAAX,KAAD,CAAjC;AACAe,IAAAA,MAAM,CAAC;AAAEM,MAAAA,OAAO,EAAEd,QAAQ,CAACH,OAApB;AAA6BgB,MAAAA,OAAO,EAAPA;AAA7B,KAAD,CAAN;AACAb,IAAAA,QAAQ,CAACH,OAAT,GAAmBgB,OAAnB;AACAF,IAAAA,eAAe,GAAG,IAAlB;AACD,GALD;;AAOAtB,EAAAA,eAAe,CAAC,YAAM;AACpB,QAAM0B,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,UAAIL,IAAJ,EAAU;AACR,YAAIC,eAAe,KAAK,IAAxB,EAA8B;AAC5BA,UAAAA,eAAe,GAAGK,UAAU,CAACJ,QAAD,EAAWF,IAAX,CAA5B;AACD;AACF,OAJD,MAIO;AACLE,QAAAA,QAAQ;AACT;AACF,KARD;;AAUAV,IAAAA,MAAM,CAACe,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AAEA,WAAO;AAAA,aAAMb,MAAM,CAACgB,mBAAP,CAA2B,QAA3B,EAAqCH,YAArC,CAAN;AAAA,KAAP;AACD,GAdc,EAcZN,IAdY,CAAf;AAeD;;GA3BeF,iB","sourcesContent":["import { useRef, useLayoutEffect } from 'react'\n\nconst isBrowser = typeof window !== `undefined`\n\nfunction getScrollPosition({ element, useWindow }) {\n  if (!isBrowser) return { x: 0, y: 0 }\n\n  const target = element ? element.current : document.body\n  const position = target.getBoundingClientRect()\n\n  return useWindow\n    ? { x: window.scrollX, y: window.scrollY }\n    : { x: position.left, y: position.top }\n}\n\nexport function useScrollPosition(effect, deps, element, useWindow, wait) {\n  const position = useRef(getScrollPosition({ useWindow }))\n\n  let throttleTimeout = null\n\n  const callBack = () => {\n    const currPos = getScrollPosition({ element, useWindow })\n    effect({ prevPos: position.current, currPos })\n    position.current = currPos\n    throttleTimeout = null\n  }\n\n  useLayoutEffect(() => {\n    const handleScroll = () => {\n      if (wait) {\n        if (throttleTimeout === null) {\n          throttleTimeout = setTimeout(callBack, wait)\n        }\n      } else {\n        callBack()\n      }\n    }\n\n    window.addEventListener('scroll', handleScroll)\n\n    return () => window.removeEventListener('scroll', handleScroll)\n  }, deps)\n}"]},"metadata":{},"sourceType":"module"}