{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport { baseUrl } from '../constants/projectSettings';\nexport const useHttp = async ({\n  method = 'get',\n  url,\n  data,\n  options\n}) => {\n  try {\n    console.log('http', data);\n    const auth = JSON.parse(localStorage.getItem('auth'));\n    let headers = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    };\n\n    if (auth) {\n      const {\n        user,\n        token\n      } = auth;\n      headers = _objectSpread(_objectSpread({}, headers), {}, {\n        Authorization: `Bearer ${token}`\n      });\n    }\n\n    if (options && options.headers) {\n      headers = _objectSpread(_objectSpread({}, headers), options.headers);\n    }\n\n    const res = await axios({\n      method,\n      url,\n      baseURL: baseUrl,\n      data,\n      headers: headers\n    }).then(response => {\n      return response;\n    }).catch(err => {\n      console.log(err);\n      return err;\n    });\n    return res;\n  } catch (err) {\n    console.log(err);\n    return err;\n  }\n};","map":{"version":3,"sources":["/Users/akshataggarwal/Documents/Coding Files/webd projects/missvalentine-front/utilis/useHttp.js"],"names":["axios","baseUrl","useHttp","method","url","data","options","console","log","auth","JSON","parse","localStorage","getItem","headers","Accept","user","token","Authorization","res","baseURL","then","response","catch","err"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,8BAAxB;AAEA,OAAO,MAAMC,OAAO,GAAG,OAAO;AAAEC,EAAAA,MAAM,GAAG,KAAX;AAAkBC,EAAAA,GAAlB;AAAuBC,EAAAA,IAAvB;AAA6BC,EAAAA;AAA7B,CAAP,KAAkD;AACvE,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBH,IAApB;AACA,UAAMI,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;AACA,QAAIC,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE,kBADI;AAEZ,sBAAgB;AAFJ,KAAd;;AAIA,QAAIN,IAAJ,EAAU;AACR,YAAM;AAAEO,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBR,IAAxB;AACAK,MAAAA,OAAO,mCAAQA,OAAR;AAAiBI,QAAAA,aAAa,EAAG,UAASD,KAAM;AAAhD,QAAP;AACD;;AACD,QAAIX,OAAO,IAAIA,OAAO,CAACQ,OAAvB,EAAgC;AAC9BA,MAAAA,OAAO,mCAAQA,OAAR,GAAoBR,OAAO,CAACQ,OAA5B,CAAP;AACD;;AACD,UAAMK,GAAG,GAAG,MAAMnB,KAAK,CAAC;AACtBG,MAAAA,MADsB;AAEtBC,MAAAA,GAFsB;AAGtBgB,MAAAA,OAAO,EAAEnB,OAHa;AAItBI,MAAAA,IAJsB;AAKtBS,MAAAA,OAAO,EAAEA;AALa,KAAD,CAAL,CAOfO,IAPe,CAOTC,QAAD,IAAc;AAClB,aAAOA,QAAP;AACD,KATe,EAUfC,KAVe,CAURC,GAAD,IAAS;AACdjB,MAAAA,OAAO,CAACC,GAAR,CAAYgB,GAAZ;AACA,aAAOA,GAAP;AACD,KAbe,CAAlB;AAcA,WAAOL,GAAP;AACD,GA7BD,CA6BE,OAAOK,GAAP,EAAY;AACZjB,IAAAA,OAAO,CAACC,GAAR,CAAYgB,GAAZ;AACA,WAAOA,GAAP;AACD;AACF,CAlCM","sourcesContent":["import axios from 'axios';\nimport { baseUrl } from '../constants/projectSettings';\n\nexport const useHttp = async ({ method = 'get', url, data, options }) => {\n  try {\n    console.log('http', data);\n    const auth = JSON.parse(localStorage.getItem('auth'));\n    let headers = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    };\n    if (auth) {\n      const { user, token } = auth;\n      headers = { ...headers, Authorization: `Bearer ${token}` };\n    }\n    if (options && options.headers) {\n      headers = { ...headers, ...options.headers };\n    }\n    const res = await axios({\n      method,\n      url,\n      baseURL: baseUrl,\n      data,\n      headers: headers,\n    })\n      .then((response) => {\n        return response;\n      })\n      .catch((err) => {\n        console.log(err);\n        return err;\n      });\n    return res;\n  } catch (err) {\n    console.log(err);\n    return err;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}