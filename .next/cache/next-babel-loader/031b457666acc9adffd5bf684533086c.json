{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport dynamic from 'next/dynamic';\nconst TitleList = dynamic(() => import(\"../TItleList\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../TItleList\")],\n    modules: [\"../TItleList\"]\n  }\n});\nconst Input = dynamic(() => import(\"../form-components/Input\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../form-components/Input\")],\n    modules: [\"../form-components/Input\"]\n  }\n});\nconst Button = dynamic(() => import(\"../form-components/Button\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../form-components/Button\")],\n    modules: [\"../form-components/Button\"]\n  }\n});\nimport { Form, Radio } from \"antd\";\nimport { connect } from \"react-redux\";\nimport regex from \"../../services/helpers/regex\";\nimport projectSettings from \"../../constants/projectSettings\";\nimport { getShippingRates } from \"../../services/api\";\nimport { getItemsHeightWidth, filterShippingRates } from \"../../services/helpers/cart\";\nimport { getSingleElementByMultipleObject } from \"../../services/helpers/misc\";\nimport msgStrings from \"../../constants/msgStrings\";\nimport reactComponentDebounce from \"react-component-debounce\";\nconst FetchLoader = dynamic(() => import(\"../FetchLoader\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../FetchLoader\")],\n    modules: [\"../FetchLoader\"]\n  }\n});\nimport FadeIn from \"react-fade-in\";\nimport { setShippingCharge, setShippingType, setTax } from \"../../redux/actions/cart\";\nconst DebounceInput = reactComponentDebounce({\n  valuePropName: \"value\",\n  triggerMs: 1000\n})(Input);\nconst {\n  countryTax,\n  enableCountry,\n  customRates\n} = projectSettings;\n\nclass CheckoutShipping extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getTax\", () => {\n      const {\n        address: {\n          country\n        }\n      } = this.state;\n\n      if (!enableCountry.includes(country)) {\n        this.props.setTax({\n          taxPercent: countryTax,\n          taxCountry: country\n        });\n      } else {\n        this.props.setTax({\n          taxPercent: 0,\n          taxCountry: country\n        });\n      } // const countryCode = getCountryCode(country)\n      // console.log({\n      //   country,\n      //   countryCode\n      // })\n\n    });\n\n    _defineProperty(this, \"calculateTax\", () => {\n      const {\n        tax\n      } = this.state;\n    });\n\n    _defineProperty(this, \"getRates\", () => {\n      const data = this.getShippingData();\n      const {\n        cart\n      } = this.props;\n      this.setState({\n        dataFetched: false\n      });\n      const {\n        address: {\n          country\n        }\n      } = this.state;\n\n      if (!enableCountry.includes(country)) {\n        this.setState({\n          dataFetched: true,\n          shippingRates: customRates,\n          isCustomRates: true\n        }, () => this.changeShippingMethod(customRates[0]));\n      } else {\n        getShippingRates(data).then(res => {\n          if (res.data.status) {\n            this.setState({\n              dataFetched: true,\n              isCustomRates: false\n            });\n            const rates = res.data.data.rates;\n            const errMessages = res.data.data.messages;\n            const breakData = getSingleElementByMultipleObject(rates, c => c.carrier);\n            const isUspsRates = rates.some(el => el.carrier === \"USPS\");\n            const uspsRates = isUspsRates ? rates.filter(el => el.carrier === \"USPS\") : rates;\n            const shippingOptions = filterShippingRates(uspsRates).sort((a, b) => a.rate - b.rate);\n            const shippingOptionsNew = shippingOptions.map(el => {\n              if (projectSettings.shippingFreeAfter < cart.subTotal) {\n                if (el.customName === \"Standard\") {\n                  return _objectSpread(_objectSpread({}, el), {}, {\n                    customRate: 0\n                  });\n                }\n              }\n\n              return el;\n            });\n            const objectOffKeys = Object.keys(breakData);\n            const shippingWrongZip = errMessages && errMessages.find(el => el.message === \"to postal code: zipcode format must be zzzzz[pppp]\");\n\n            if (errMessages && shippingWrongZip && shippingWrongZip.message === \"to postal code: zipcode format must be zzzzz[pppp]\") {\n              let msg = \"\";\n\n              switch (shippingWrongZip.message) {\n                case \"to postal code: zipcode format must be zzzzz[pppp]\":\n                  msg = msgStrings.INVALID_ZIP;\n                  break;\n\n                default:\n                  msg = errMessages[0].message;\n              }\n\n              this.setState({\n                shippingErrMsg: msg\n              });\n            } else if (rates && rates.length) {\n              this.setState({\n                shippingErrMsg: null,\n                shippingBreakData: breakData,\n                shippingCarrier: objectOffKeys,\n                shippingAllData: rates,\n                shippingAllResponse: res.data.data,\n                shippingRates: shippingOptionsNew // breakData[firstKey]\n\n              }, () => {\n                if (shippingOptionsNew.length > 0) {\n                  this.changeShippingMethod(shippingOptionsNew[0]); // this.handleShippingTypeChange(shippingOptionsNew[0]);\n                } else {\n                  this.setState({\n                    shippingErrMsg: msgStrings.NO_SHIPMENT\n                  });\n                }\n              });\n            }\n\n            setTimeout(() => {\n              console.log({\n                state: this.state\n              });\n            }, 1000);\n          }\n        }).catch(console.log);\n      }\n    });\n\n    _defineProperty(this, \"getShippingData\", () => {\n      const {\n        cart\n      } = this.props;\n      const {\n        address: {\n          firstname,\n          lastname,\n          city,\n          state,\n          zip,\n          addressStr,\n          phone,\n          country\n        }\n      } = this.state;\n      const dimension = getItemsHeightWidth(cart.items);\n      const data = {\n        city,\n        state,\n        zip,\n        country,\n        phone,\n        name: firstname + \" \" + lastname,\n        street: addressStr,\n        length: dimension.length,\n        width: dimension.width,\n        height: dimension.height,\n        weight: dimension.weight\n      };\n      return data;\n    });\n\n    _defineProperty(this, \"onSubmit\", e => {\n      e.preventDefault();\n      const {\n        onSubmit\n      } = this.props;\n      const {\n        shippingSendData\n      } = this.state;\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log({\n            values\n          });\n\n          if (typeof onSubmit === \"function\") {\n            onSubmit(e, values, shippingSendData);\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"changeShippingMethod\", method => {\n      const {\n        isCustomRates\n      } = this.state;\n      const {\n        customRate,\n        id,\n        service\n      } = method;\n      const {\n        setShippingCharge,\n        setShippingType\n      } = this.props;\n      const shippingType = service;\n      const shpId = isCustomRates ? \"custom_rates\" : this.state.shippingAllResponse.id;\n      const shippingCharge = parseFloat(customRate);\n      this.setState({\n        shippingSendData: {\n          shipmentid: shpId,\n          rate: id\n        }\n      });\n      setShippingCharge(shippingCharge, this.props.cart);\n      setShippingType(shippingType, this.props.cart);\n      setTimeout(() => {\n        console.log({\n          cart: this.props.cart\n        });\n      }, 1000);\n    });\n\n    this.state = {\n      email: props.email,\n      address: props.address,\n      shippingErrMsg: null,\n      shippingRates: [],\n      shippingSendData: null,\n      dataFetched: false,\n      tax: 0\n    };\n  }\n\n  componentDidMount() {\n    // getShippingRates\n    // console.log({\n    //   cart: this.props.cart,\n    // });\n    this.getRates();\n    this.getTax();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.cart.items !== this.props.cart.items) {\n      this.getRates();\n    }\n  }\n\n  render() {\n    console.log(this.state.address);\n    console.log(this.props.address);\n    const componentClass = \"c-checkout-shipping\";\n    const {\n      email,\n      address,\n      shippingRates\n    } = this.state;\n    const {\n      form\n    } = this.props;\n    const {\n      getFieldDecorator\n    } = form;\n    return __jsx(\"div\", {\n      className: componentClass\n    }, __jsx(Form, {\n      onSubmit: this.onSubmit\n    }, __jsx(TitleList, {\n      versions: [\"sm-border\"],\n      parentClass: componentClass,\n      title: \"Contact\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"email\", {\n      rules: [{\n        required: true,\n        message: \"Please input your E-mail!\"\n      }, {\n        pattern: regex.email,\n        message: \"Please enter a valid E-mail!\"\n      }],\n      initialValue: email\n    })(__jsx(DebounceInput, {\n      disabled: true,\n      label: \"E-mail\"\n    })))), __jsx(TitleList, {\n      versions: [\"sm-border\"],\n      parentClass: componentClass,\n      title: \"Ship to\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"address\", {\n      rules: [{\n        required: true,\n        message: \"Please input your Address!\"\n      }],\n      initialValue: address.addressStr\n    })(__jsx(DebounceInput, {\n      label: \"address\",\n      disabled: true\n    })))), __jsx(TitleList, {\n      versions: [\"sm-border\"],\n      parentClass: componentClass,\n      title: \"Shipping Method\"\n    }, this.state.dataFetched ? __jsx(FadeIn, null, __jsx(Form.Item, null, shippingRates.length > 0 && getFieldDecorator(\"shippingMethod\", {\n      initialValue: shippingRates[0]\n    })(__jsx(Radio.Group, {\n      className: \"bordered\",\n      onChange: e => {\n        const {\n          value\n        } = e.target;\n        this.changeShippingMethod(value);\n      }\n    }, shippingRates.map((el, i) => __jsx(Radio, {\n      key: i,\n      value: el\n    }, \"$\", el.customRate.toFixed(2), \" (\", el.customName, \")\")))))) : __jsx(FetchLoader, null)), __jsx(TitleList, {\n      versions: [\"sm-border\"],\n      parentClass: componentClass\n    }, __jsx(\"div\", {\n      className: \"row\",\n      style: {\n        justifyContent: \"center\"\n      }\n    }, __jsx(Button, {\n      parentClass: \"c-checkout\",\n      type: \"submit\",\n      theme: \"dark\"\n    }, \"Continue\")))));\n  }\n\n}\n\nCheckoutShipping.defaultProps = {\n  address: {}\n};\n\nconst mapStateToProps = state => ({\n  user: state.user,\n  cart: state.cart\n});\n\nconst mapActionToProps = {\n  // showRegBar\n  setShippingCharge,\n  setShippingType,\n  setTax\n};\nexport default connect(mapStateToProps, mapActionToProps)(Form.create({\n  name: \"checkoutShipping\"\n})(CheckoutShipping));","map":null,"metadata":{},"sourceType":"module"}