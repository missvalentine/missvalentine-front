{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as actionTypes from \"../actions/type\";\nconst initiaState = {\n  article: [],\n  currentTag: \"All\",\n  current: {},\n  pageNo: 0\n};\n\nconst add = (state, action) => {\n  if (state.currentTag !== action.tag) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      article: action.payload,\n      pageNo: action.pageNo,\n      currentTag: action.tag,\n      current: {}\n    });\n  } else {\n    let curValue = state.article;\n    let value = curValue.concat(action.payload);\n    return _objectSpread(_objectSpread({}, state), {}, {\n      article: value,\n      pageNo: action.pageNo\n    });\n  }\n};\n\nconst setCurrent = (state, action) => {\n  console.log(\"blog state\", state);\n  return _objectSpread(_objectSpread({}, state), {}, {\n    current: state.article[action.index]\n  });\n};\n\nconst clearCurrent = (state, action) => {\n  console.log(\"clear reducr\");\n  return state;\n};\n\nconst reducer = (state = initiaState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_ALL:\n      return add(state, action);\n\n    case actionTypes.GET_ARTICLE:\n      return setCurrent(state, action);\n\n    case \"CLEAR\":\n      return clearCurrent(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":null,"metadata":{},"sourceType":"module"}