{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport '../../../components/styles/app.scss';\nimport AdminLayout from '../../../components/admin/AdminLayout';\nimport { Input, Button, Checkbox, Tag, Select, Upload } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { createProduct, getAllCategories } from '../../../services/apis/admin.js';\nconst {\n  Option\n} = Select; //constants\n\nconst allSizes = ['28', '30', '32', '34', '36', '38', '40', '42', '44'];\nconst allColors = ['Wine', 'Carrot', 'Nude', 'Skin', 'Rani', 'AliceBlue', 'AntiqueWhite', 'Aqua', 'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond', 'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue', 'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk', 'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenRod', 'DarkGray', 'DarkGrey', 'DarkGreen', 'DarkKhaki', 'DarkMagenta', 'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed', 'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray', 'DarkSlateGrey', 'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray', 'DimGrey', 'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia', 'Gainsboro', 'GhostWhite', 'Gold', 'GoldenRod', 'Gray', 'Grey', 'Green', 'GreenYellow', 'HoneyDew', 'HotPink', 'IndianRed', 'Indigo', 'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen', 'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan', 'LightGoldenRodYellow', 'LightGray', 'LightGrey', 'LightGreen', 'LightPink', 'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray', 'LightSlateGrey', 'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen', 'Magenta', 'Maroon', 'MediumAquaMarine', 'MediumBlue', 'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue', 'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed', 'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite', 'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed', 'Orchid', 'PaleGoldenRod', 'PaleGreen', 'PaleTurquoise', 'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum', 'PowderBlue', 'Purple', 'RebeccaPurple', 'Red', 'RosyBrown', 'RoyalBlue', 'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'SeaShell', 'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'SlateGrey', 'Snow', 'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato', 'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow', 'YellowGreen'];\nexport default function create(props) {\n  const {\n    editData\n  } = props;\n  const {\n    0: inputData,\n    1: setInputData\n  } = useState({\n    name: '',\n    shortDesc: '',\n    description: '',\n    category: '',\n    subCategories: [],\n    price: '',\n    sizes: [],\n    colors: [],\n    hidden: false,\n    images: [],\n    errors: ''\n  });\n  const {\n    0: categories,\n    1: setCategories\n  } = useState([]);\n  const {\n    0: subCategories,\n    1: setSubCategories\n  } = useState([]);\n  useEffect(() => {\n    if (editData) {\n      let newInputData = _objectSpread({}, inputData);\n\n      newInputData.sizes = editData.sizes;\n      setInputData(newInputData);\n    }\n  }, []);\n  useEffect(() => {\n    getAllCategories().then(res => res && res.data && setCategories(res.data.data));\n  }, []);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    console.log(inputData, 'input');\n    let formData = new FormData();\n    formData.append('name', inputData.name);\n    formData.append('shortDesc', inputData.shortDesc);\n    formData.append('description', inputData.description);\n    formData.append('category', inputData.category);\n    formData.append('price', inputData.price);\n    formData.append('hidden', inputData.hidden);\n    formData.append('sizes', JSON.stringify(inputData.sizes));\n    formData.append('colors', JSON.stringify(inputData.colors));\n    formData.append('subCategories', JSON.stringify(inputData.subCategories)); //for Images\n\n    const fileListAsArray = Array.from(inputData.images);\n\n    for (var i in fileListAsArray) {\n      console.log(fileListAsArray[i]);\n      formData.append('images', fileListAsArray[i]);\n    }\n\n    createProduct(formData).then(res => {\n      if (res.data && res.data.success) {\n        setInputData(_objectSpread(_objectSpread({}, inputData), {}, {\n          name: '',\n          // shortDesc: '',\n          // description: '',\n          // category: '',\n          // subCategories: [],\n          // price: '',\n          // sizes: [],\n          // colors: [],\n          // hidden: false,\n          images: [],\n          errors: ''\n        }));\n      }\n    });\n  };\n\n  const handleInputChange = selector => event => {\n    if (selector === 'hidden') {\n      setInputData(_objectSpread(_objectSpread({}, inputData), {}, {\n        hidden: event.target.checked\n      }));\n    } else if (selector === 'sizes' || selector === 'colors' || selector === 'subCategories') {\n      setInputData(_objectSpread(_objectSpread({}, inputData), {}, {\n        [selector]: event\n      }));\n    } else {\n      setInputData(_objectSpread(_objectSpread({}, inputData), {}, {\n        [selector]: event.target.value\n      }));\n    }\n  };\n\n  const handleCategoryChange = cate => {\n    setInputData(_objectSpread(_objectSpread({}, inputData), {}, {\n      category: cate._id,\n      subCategories: []\n    }));\n    setSubCategories(cate.subcategories);\n  };\n\n  const handleImagesChange = (file, fileList) => {\n    setInputData(_objectSpread(_objectSpread({}, inputData), {}, {\n      images: fileList\n    }));\n  };\n\n  const handleImagesRemove = file => {\n    const index = inputData.images.indexOf(file);\n    const newFileList = inputData.images.slice();\n    newFileList.splice(index, 1);\n    setInputData(_objectSpread(_objectSpread({}, inputData), {}, {\n      images: newFileList\n    }));\n  };\n\n  function tagRender(props) {\n    const {\n      label,\n      value,\n      closable,\n      onClose\n    } = props;\n    return __jsx(Tag, {\n      color: value,\n      closable: closable,\n      onClose: onClose,\n      style: {\n        marginRight: 3\n      }\n    }, label);\n  }\n\n  return __jsx(AdminLayout, null, categories && categories.length > 0 ? __jsx(\"div\", null, __jsx(\"h3\", null, \" \", editData ? ' Edit ' : 'Enter ', \" Product Details\"), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Select, {\n    style: {\n      width: '100%'\n    },\n    placeholder: \"Please select category\"\n  }, categories.map((cate, index) => __jsx(Option, {\n    key: index,\n    value: cate._id,\n    name: cate.name,\n    onClick: () => handleCategoryChange(cate)\n  }, cate.name)))), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Select // value={inputData.subCategories || []}\n  , {\n    onChange: handleInputChange('subCategories'),\n    mode: \"multiple\",\n    placeholder: \"Select subcategories\",\n    style: {\n      width: '100%'\n    }\n  }, subCategories.map((subcategory, index) => __jsx(Option, {\n    key: index,\n    value: subcategory._id\n  }, subcategory.name)))), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Input, {\n    id: \"name\",\n    placeholder: \"Enter Product Name\",\n    label: \"Product Name\",\n    name: \"name\",\n    required: true,\n    onChange: handleInputChange('name')\n  })), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Input.TextArea, {\n    id: \"short-desc-input\",\n    label: \"Short Description\",\n    name: \"shortDesc\",\n    required: true,\n    rows: 2,\n    onChange: handleInputChange('shortDesc'),\n    placeholder: \"write a short description about the product.\"\n  })), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Input.TextArea, {\n    label: \"Description\",\n    name: \"description\",\n    rows: 4,\n    onChange: handleInputChange('description'),\n    placeholder: \"write a full description about the product.\"\n  })), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Input, {\n    label: \"Price ( \\u20B9 )\",\n    name: \"price\",\n    placeholder: \"Please enter price\",\n    onChange: handleInputChange('price')\n  })), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Select, {\n    style: {\n      width: '100%'\n    },\n    placeholder: \"Please select Sizes\",\n    onChange: handleInputChange('sizes'),\n    mode: \"multiple\",\n    name: \"sizes\"\n  }, allSizes.map((size, index) => __jsx(Option, {\n    key: index,\n    value: size\n  }, size)))), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Select, {\n    style: {\n      width: '100%'\n    },\n    placeholder: \"Please select Colors\",\n    onChange: handleInputChange('colors'),\n    showArrow: true,\n    mode: \"multiple\",\n    name: \"colors\",\n    tagRender: tagRender\n  }, allColors.map((color, index) => __jsx(Option, {\n    key: index,\n    value: color\n  }, color)))), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Checkbox, {\n    checked: inputData.hidden,\n    onChange: handleInputChange('hidden')\n  }, \"Is Hidden?\")), __jsx(Upload, {\n    name: \"images\",\n    accept: \".jpg, .jpeg, .png\",\n    multiple: true,\n    listType: \"picture\",\n    beforeUpload: handleImagesChange,\n    onRemove: handleImagesRemove,\n    fileList: inputData.images\n  }, __jsx(Button, {\n    icon: __jsx(UploadOutlined, null)\n  }, \"Upload Images\")), __jsx(\"div\", {\n    className: \"c-admin-create-product__btn\"\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleSubmit\n  }, \"Create\"))) : __jsx(\"div\", null, \"Create a Category first\"));\n}","map":null,"metadata":{},"sourceType":"module"}