{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SET_CARDS, SET_ERRORS, CLEAR_ERRORS, SET_USER } from \"./type\";\nimport { authorizeAddCard, updateUserDetails, getUserDetails, authorizeDeleteCard } from \"../../services/api\";\nexport const setCards = payload => ({\n  type: SET_CARDS,\n  payload\n});\nexport const getCards = id => async dispatch => {\n  getUserDetails(id).then(resRaw => {\n    const res = resRaw.data;\n    console.log(res);\n    const cards = returnCards(res);\n    dispatch(setCards(cards));\n  }).catch(err => console.log({\n    err\n  }));\n};\nexport const addCardAuthorize = data => dispatch => {\n  const {\n    user,\n    card,\n    bank,\n    oldCards\n  } = data;\n  const {\n    userMetaId,\n    _id,\n    userMetaObj\n  } = user;\n  console.log({\n    data,\n    dispatch\n  });\n\n  const sendCardDetails = (customData, userId) => {\n    console.log({\n      customData,\n      userId\n    });\n    authorizeAddCard(customData).then(response => {\n      const res = response.data;\n      const {\n        status,\n        card\n      } = res;\n\n      if (status && card && card.paymentProfile && card.messages && card.messages.resultCode === \"Ok\") {\n        //   if (userId) {\n        //     updateUserMeta(userId);\n        //   }\n        const {\n          customerProfileId,\n          customerPaymentProfileId,\n          payment\n        } = card.paymentProfile;\n\n        const newCard = _objectSpread({\n          customerProfileId,\n          customerPaymentProfileId\n        }, payment);\n\n        const allCardsPre = oldCards ? [...oldCards, newCard] : [newCard];\n        const defaultCard = allCardsPre.find(el => el.isDefault === true);\n        const allCards = allCardsPre.map((el, index) => {\n          if (index === 0 && !defaultCard) return _objectSpread(_objectSpread({}, el), {}, {\n            isDefault: true\n          });\n          return el;\n        });\n        updateUserDetails({\n          userid: _id,\n          carddetails: {\n            cards: allCards\n          }\n        }).then(response => {\n          console.log({\n            response\n          });\n          const res = response.data;\n          const cards = returnCards(res);\n          dispatch(setCards(cards)); // getUserMetaNoCart(userId);\n\n          dispatch({\n            type: CLEAR_ERRORS,\n            payload: {}\n          });\n          getUserDetails(userId).then(response => {\n            const res = response.data;\n\n            if (res.user && res.user._id) {\n              console.log(\"user meta found\", res);\n              dispatch({\n                type: SET_USER,\n                payload: _objectSpread(_objectSpread({}, res.user.userid), {}, {\n                  userMetaId: res.user._id,\n                  userMetaObj: res.user\n                })\n              });\n            }\n          });\n        }).catch(err => {\n          dispatch({\n            type: SET_ERRORS,\n            payload: {\n              cards: [\"Some thing wrong\"]\n            }\n          });\n          getUserDetails(userId).then(response => {\n            const res = response.data;\n\n            if (res.user && res.user._id) {\n              console.log(\"user meta found\", res);\n              dispatch({\n                type: SET_USER,\n                payload: _objectSpread(_objectSpread({}, res.user.userid), {}, {\n                  userMetaId: res.user._id,\n                  userMetaObj: res.user\n                })\n              });\n            }\n          });\n          console.log({\n            err\n          });\n        });\n        console.log({\n          customerProfileId,\n          customerPaymentProfileId,\n          payment,\n          customData\n        });\n      } else {\n        dispatch({\n          type: SET_ERRORS,\n          payload: {\n            cards: [\"Some thing wrong\"]\n          }\n        });\n      }\n    });\n  };\n\n  const chooseCardOrBank = (userMetaId, userMetaObj) => {\n    const {\n      customerProfile\n    } = userMetaObj;\n\n    if (customerProfile) {\n      if (card) {\n        const {\n          cardnumber,\n          cvc,\n          expmonth,\n          expyear\n        } = card;\n        const creditcard = {\n          cardNumber: cardnumber.split(\"-\").join(\"\"),\n          expirationDate: `20${expyear}-${expmonth}`,\n          cardCode: cvc\n        };\n        sendCardDetails({\n          creditcard,\n          profileid: customerProfile\n        });\n      } else if (bank) {\n        sendCardDetails({\n          bank,\n          profileid: customerProfile\n        });\n      }\n    } else {\n      if (card) {\n        const {\n          cardnumber,\n          cvc,\n          expmonth,\n          expyear\n        } = card;\n        const creditcard = {\n          cardNumber: cardnumber.split(\"-\").join(\"\"),\n          expirationDate: `20${expyear}-${expmonth}`,\n          cardCode: cvc\n        };\n        const userMetaIdId = userMetaId._id ? userMetaId._id : typeof userMetaId === \"string\" && userMetaId;\n        sendCardDetails({\n          creditcard,\n          email: userMetaIdId + \"@cbdbene.com\",\n          metaid: userMetaIdId\n        }, _id);\n      } else if (bank) {\n        const userMetaIdId = userMetaId._id ? userMetaId._id : typeof userMetaId === \"string\" && userMetaId;\n        sendCardDetails({\n          bank,\n          email: userMetaIdId + \"@cbdbene.com\",\n          metaid: userMetaIdId\n        }, _id);\n      }\n    }\n  };\n\n  if (userMetaObj && userMetaId) {\n    chooseCardOrBank(userMetaId, userMetaObj);\n  } else if (_id) {\n    getUserDetails(_id).then(res => {\n      console.log({\n        res\n      });\n      const {\n        user\n      } = res.data;\n      const userMetaId = user._id;\n      const userMetaObj = data.user;\n      chooseCardOrBank(userMetaId, userMetaObj);\n    });\n  }\n};\n\nconst returnCards = res => {\n  if (res.user) {\n    if (res.user.carddetails) {\n      return res.user.carddetails;\n    }\n  }\n\n  return {};\n};\n\nexport const addCard = (userid, card, oldDetail = {}, oldCards = []) => dispatch => {\n  console.log({\n    userid,\n    card\n  });\n  const found = oldCards.find(el => el.id === card.id);\n  console.log({\n    found\n  });\n\n  if (found) {\n    dispatch(editCard(userid, card, oldDetail, oldCards));\n  } else {\n    const allCardsPre = oldCards ? [...oldCards, card] : [card];\n    const defaultCard = allCardsPre.find(el => el.isDefault === true);\n    const allCards = allCardsPre.map((el, index) => {\n      if (index === 0 && !defaultCard) return _objectSpread(_objectSpread({}, el), {}, {\n        isDefault: true\n      });\n      return el;\n    });\n    updateUserDetails({\n      userid,\n      carddetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n        cards: allCards\n      })\n    }).then(rep => {\n      const res = rep.data;\n      console.log({\n        res\n      });\n      const cards = returnCards(res);\n      dispatch(setCards(cards));\n    }).catch(err => {\n      console.log({\n        err\n      });\n    });\n  }\n};\nexport const editCard = (userid, card, oldDetail = {}, oldCards = []) => dispatch => {\n  const newCard = oldCards.map(el => {\n    if (el.id === card.id) return card;\n    return el;\n  });\n  addUpdateUserDetails({\n    userid,\n    carddetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n      cards: newCard\n    })\n  }).then(rep => {\n    const res = rep.data;\n    console.log({\n      res\n    });\n    const cards = returnCards(res);\n    dispatch(setCards(cards));\n  }).catch(err => {\n    console.log({\n      err\n    });\n  });\n};\nexport const deleteCard = (userid, card, oldDetail = {}, oldCards = []) => dispatch => {\n  const newCard = oldCards.filter(el => el.customerPaymentProfileId !== card.customerPaymentProfileId);\n  authorizeDeleteCard({\n    paymentid: card.customerPaymentProfileId,\n    profileid: card.customerProfileId\n  }).then(rep => {\n    const res = rep.data;\n    console.log({\n      res\n    });\n\n    if (res && res.data && res.data.messages && res.data.messages.resultCode === \"Ok\") {\n      const defaultCard = newCard.find(el => el.isDefault === true);\n      const allCards = newCard.map((el, index) => {\n        if (index === 0 && !defaultCard) return _objectSpread(_objectSpread({}, el), {}, {\n          isDefault: true\n        });\n        return el;\n      });\n      updateUserDetails({\n        userid,\n        carddetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n          cards: allCards\n        })\n      }).then(rep => {\n        const res = rep.data;\n        console.log({\n          res\n        });\n        const cards = returnCards(res);\n        dispatch(setCards(cards));\n      }).catch(err => {\n        console.log({\n          err\n        });\n      });\n    }\n  });\n};\nexport const setDefaultCard = (userid, id, oldDetail = {}, oldCards = []) => dispatch => {\n  const newCard = oldCards.map(el => {\n    return _objectSpread(_objectSpread({}, el), {}, {\n      isDefault: el.customerPaymentProfileId === id\n    });\n  });\n  updateUserDetails({\n    userid,\n    carddetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n      cards: newCard\n    })\n  }).then(rep => {\n    const res = rep.data;\n    console.log({\n      res\n    });\n    const cards = returnCards(res);\n    dispatch(setCards(cards));\n  }).catch(err => {\n    console.log({\n      err\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}