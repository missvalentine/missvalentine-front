{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport sessionStorage from \"redux-persist/lib/storage/session\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\nimport { createStateSyncMiddleware } from \"redux-state-sync\";\nconst SET_CLIENT_STATE = 'SET_CLIENT_STATE';\nconst middlewares = [thunk, createStateSyncMiddleware({\n  // blacklist: [\"extras\", \"products\"]\n  whitelist: [\"cart\", \"user\", \"wishList\", \"checkout\", \"firstSetting\", \"ambassadoruser\"]\n})];\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  whitelist: [\"cart\", \"user\", \"firstSetting\", \"ambassadoruser\"]\n};\nconst sessionRedConfig = {\n  key: \"referrer\",\n  storage: sessionStorage\n};\n\nconst {\n  referrer\n} = rootReducer,\n      otherReducer = _objectWithoutProperties(rootReducer, [\"referrer\"]);\n\nconst allReducers = combineReducers(_objectSpread(_objectSpread({}, otherReducer), {}, {\n  referrer: persistReducer(sessionRedConfig, referrer)\n}));\nconst persistedReducer = persistReducer(persistConfig, allReducers); // const initialState = {\n//   lastUpdate: 0,\n//   light: false,\n//   count: 0,\n// }\n// const reducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case 'TICK':\n//       return {\n//         ...state,\n//         lastUpdate: action.lastUpdate,\n//         light: !!action.light,\n//       }\n//     case 'INCREMENT':\n//       return {\n//         ...state,\n//         count: state.count + 1,\n//       }\n//     case 'DECREMENT':\n//       return {\n//         ...state,\n//         count: state.count - 1,\n//       }\n//     case 'RESET':\n//       return {\n//         ...state,\n//         count: initialState.count,\n//       }\n//     default:\n//       return state\n//   }\n// }\n// export const initializeStore = (preloadedState = initialState) => {\n//   return createStore(\n//     reducer,\n//     preloadedState,\n//     composeWithDevTools(applyMiddleware())\n//   )\n// }\n\nconst makeConfiguredStore = (reducer, initialState) => createStore(reducer, initialState, applyMiddleware(...middlewares));\n\nexport const makeStore = (initialState, {\n  isServer,\n  req,\n  debug,\n  storeKey\n}) => {\n  if (isServer) {\n    initialState = initialState || {\n      fromServer: 'foo'\n    };\n    return makeConfiguredStore(allReducers, initialState);\n  } else {\n    // we need it only on client side\n    const store = makeConfiguredStore(persistedReducer, initialState);\n    store.__persistor = persistStore(store); // Nasty hack\n\n    return store;\n  }\n};\nexport const setClientState = clientState => ({\n  type: SET_CLIENT_STATE,\n  payload: clientState\n}); // export default (preloadedState = undefined) => {\n//   let store = createStore(\n//     persistedReducer,\n//     // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n//     preloadedState,\n//     composeWithDevTools(applyMiddleware(...middlewares))\n//   );\n//   let persistor = persistStore(store);\n//   // return { store, persistor };\n//   return store\n// };","map":{"version":3,"sources":["/Users/akshataggarwal/Documents/Coding Files/webd projects/missvalentine-front/redux/store.js"],"names":["createStore","applyMiddleware","combineReducers","persistStore","persistReducer","storage","sessionStorage","thunk","rootReducer","createStateSyncMiddleware","SET_CLIENT_STATE","middlewares","whitelist","persistConfig","key","sessionRedConfig","referrer","otherReducer","allReducers","persistedReducer","makeConfiguredStore","reducer","initialState","makeStore","isServer","req","debug","storeKey","fromServer","store","__persistor","setClientState","clientState","type","payload"],"mappings":";;;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,SAASC,yBAAT,QAA0C,kBAA1C;AAEA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,WAAW,GAAG,CAChBJ,KADgB,EAEhBE,yBAAyB,CAAC;AACxB;AACAG,EAAAA,SAAS,EAAE,CACT,MADS,EAET,MAFS,EAGT,UAHS,EAIT,UAJS,EAKT,cALS,EAMT,gBANS;AAFa,CAAD,CAFT,CAApB;AAeA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElBT,EAAAA,OAFkB;AAGlBO,EAAAA,SAAS,EAAE,CACT,MADS,EAET,MAFS,EAGT,cAHS,EAIT,gBAJS;AAHO,CAAtB;AAWA,MAAMG,gBAAgB,GAAG;AACrBD,EAAAA,GAAG,EAAE,UADgB;AAErBT,EAAAA,OAAO,EAAEC;AAFY,CAAzB;;AAKA,MAAM;AAAEU,EAAAA;AAAF,IAAgCR,WAAtC;AAAA,MAAqBS,YAArB,4BAAsCT,WAAtC;;AAEA,MAAMU,WAAW,GAAGhB,eAAe,iCAC5Be,YAD4B;AAE/BD,EAAAA,QAAQ,EAAEZ,cAAc,CAACW,gBAAD,EAAmBC,QAAnB;AAFO,GAAnC;AAKA,MAAMG,gBAAgB,GAAGf,cAAc,CAACS,aAAD,EAAgBK,WAAhB,CAAvC,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,mBAAmB,GAAG,CAACC,OAAD,EAAUC,YAAV,KACxBtB,WAAW,CAACqB,OAAD,EAAUC,YAAV,EAAwBrB,eAAe,CAAC,GAAGU,WAAJ,CAAvC,CADf;;AAIA,OAAO,MAAMY,SAAS,GAAG,CAACD,YAAD,EAAe;AAACE,EAAAA,QAAD;AAAWC,EAAAA,GAAX;AAAgBC,EAAAA,KAAhB;AAAuBC,EAAAA;AAAvB,CAAf,KAAoD;AAE3E,MAAIH,QAAJ,EAAc;AAEVF,IAAAA,YAAY,GAAGA,YAAY,IAAI;AAACM,MAAAA,UAAU,EAAE;AAAb,KAA/B;AAEA,WAAOR,mBAAmB,CAACF,WAAD,EAAcI,YAAd,CAA1B;AAEH,GAND,MAMO;AAEH;AAGA,UAAMO,KAAK,GAAGT,mBAAmB,CAACD,gBAAD,EAAmBG,YAAnB,CAAjC;AAEAO,IAAAA,KAAK,CAACC,WAAN,GAAoB3B,YAAY,CAAC0B,KAAD,CAAhC,CAPG,CAOsC;;AAEzC,WAAOA,KAAP;AACH;AACF,CAnBM;AAqBP,OAAO,MAAME,cAAc,GAAIC,WAAD,KAAkB;AAC9CC,EAAAA,IAAI,EAAEvB,gBADwC;AAE9CwB,EAAAA,OAAO,EAAEF;AAFqC,CAAlB,CAAvB,C,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport sessionStorage from \"redux-persist/lib/storage/session\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\nimport { createStateSyncMiddleware } from \"redux-state-sync\";\n\nconst SET_CLIENT_STATE = 'SET_CLIENT_STATE';\nconst middlewares = [\n    thunk,\n    createStateSyncMiddleware({\n      // blacklist: [\"extras\", \"products\"]\n      whitelist: [\n        \"cart\",\n        \"user\",\n        \"wishList\",\n        \"checkout\",\n        \"firstSetting\",\n        \"ambassadoruser\",\n      ]\n    })\n];\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    whitelist: [\n      \"cart\",\n      \"user\",\n      \"firstSetting\",\n      \"ambassadoruser\",\n    ]\n};\n\nconst sessionRedConfig = {\n    key: \"referrer\",\n    storage: sessionStorage\n};\n\nconst { referrer, ...otherReducer } = rootReducer;\n\nconst allReducers = combineReducers({\n    ...otherReducer,\n    referrer: persistReducer(sessionRedConfig, referrer)\n});\n\nconst persistedReducer = persistReducer(persistConfig, allReducers);\n\n// const initialState = {\n//   lastUpdate: 0,\n//   light: false,\n//   count: 0,\n// }\n\n// const reducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case 'TICK':\n//       return {\n//         ...state,\n//         lastUpdate: action.lastUpdate,\n//         light: !!action.light,\n//       }\n//     case 'INCREMENT':\n//       return {\n//         ...state,\n//         count: state.count + 1,\n//       }\n//     case 'DECREMENT':\n//       return {\n//         ...state,\n//         count: state.count - 1,\n//       }\n//     case 'RESET':\n//       return {\n//         ...state,\n//         count: initialState.count,\n//       }\n//     default:\n//       return state\n//   }\n// }\n\n// export const initializeStore = (preloadedState = initialState) => {\n//   return createStore(\n//     reducer,\n//     preloadedState,\n//     composeWithDevTools(applyMiddleware())\n//   )\n// }\n\nconst makeConfiguredStore = (reducer, initialState) =>\n    createStore(reducer, initialState, applyMiddleware(...middlewares));\n\n    \nexport const makeStore = (initialState, {isServer, req, debug, storeKey}) => {\n\n  if (isServer) {\n\n      initialState = initialState || {fromServer: 'foo'};\n\n      return makeConfiguredStore(allReducers, initialState);\n\n  } else {\n\n      // we need it only on client side\n\n\n      const store = makeConfiguredStore(persistedReducer, initialState);\n\n      store.__persistor = persistStore(store); // Nasty hack\n\n      return store;\n  }\n};\n\nexport const setClientState = (clientState) => ({\n  type: SET_CLIENT_STATE,\n  payload: clientState\n});\n// export default (preloadedState = undefined) => {\n//   let store = createStore(\n//     persistedReducer,\n//     // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n//     preloadedState,\n//     composeWithDevTools(applyMiddleware(...middlewares))\n//   );\n//   let persistor = persistStore(store);\n//   // return { store, persistor };\n//   return store\n// };\n"]},"metadata":{},"sourceType":"module"}