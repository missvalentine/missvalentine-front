{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport classNames from 'classnames';\n\nvar Quantity = /*#__PURE__*/function (_React$Component) {\n  _inherits(Quantity, _React$Component);\n\n  var _super = _createSuper(Quantity);\n\n  function Quantity(props) {\n    var _this;\n\n    _classCallCheck(this, Quantity);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      inputValue: props.value || 1\n    };\n    return _this;\n  }\n\n  _createClass(Quantity, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.value !== this.props.value) {\n        this.setState({\n          inputValue: this.props.value\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this,\n          _classNames;\n\n      var _this$props = this.props,\n          min = _this$props.min,\n          max = _this$props.max,\n          value = _this$props.value,\n          onChange = _this$props.onChange,\n          parentClass = _this$props.parentClass,\n          isDisabled = _this$props.isDisabled;\n      var inputValue = this.state.inputValue;\n      var parent = \"\".concat(parentClass, \"__quantity\"); // const [inputValue, setInputValue] = useState(value || 1)\n\n      var onInputChange = function onInputChange(e) {\n        if (!(e < min || e > max)) {\n          _this2.setState({\n            inputValue: e\n          });\n\n          if (typeof onChange === \"function\") onChange(e);\n        }\n      };\n\n      return __jsx(\"div\", {\n        className: classNames(\"c-quantity\", (_classNames = {}, _defineProperty(_classNames, parent, parentClass), _defineProperty(_classNames, \"c-quantity--disabled\", isDisabled), _classNames))\n      }, __jsx(\"div\", {\n        onClick: function onClick() {\n          if (!isDisabled) onInputChange(inputValue - 1);\n        },\n        className: \"c-quantity__btn c-quantity__btn--minus\"\n      }, \"-\"), __jsx(\"span\", {\n        className: \"c-quantity__input\"\n      }, inputValue), __jsx(\"div\", {\n        onClick: function onClick() {\n          if (!isDisabled) onInputChange(inputValue + 1);\n        },\n        className: \"c-quantity__btn c-quantity__btn--plus\"\n      }, \"+\"));\n    }\n  }]);\n\n  return Quantity;\n}(React.Component); // const Quantity = () => {\n//     const parent = `${parentClass}__quantity`\n//     const [inputValue, setInputValue] = useState(value || 1)\n//     const onInputChange = (e)=> {\n//         if(!(e < min || e > max)){\n//             setInputValue(e)\n//             if(typeof onChange === \"function\") onChange(e)\n//         }\n//     }\n//     return (\n//         <div className={classNames(\"c-quantity\", {\n//             [parent]: parentClass\n//         })}>\n//             <div onClick={()=> {\n//                 onInputChange(inputValue - 1)\n//             }} className=\"c-quantity__btn c-quantity__btn--minus\">-</div>\n//             {/* <input className=\"c-quantity__input\" type=\"number\" onChange={onInputChange} min={min} max={max} value={inputValue} /> */}\n//             <span className=\"c-quantity__input\">\n//                 {inputValue}\n//             </span>\n//             <div onClick={()=> {\n//                 onInputChange(inputValue + 1)\n//             }} className=\"c-quantity__btn c-quantity__btn--plus\">+</div>\n//         </div>\n//     )\n// }\n\n\nQuantity.defaultProps = {\n  inputId: \"\".concat(Math.random() * new Date().getTime()),\n  isDisabled: false\n};\nexport default Quantity;","map":null,"metadata":{},"sourceType":"module"}