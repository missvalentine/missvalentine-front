{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { encodeUrlFn, getParentage, numberFormat } from \"./misc\";\nimport { variablePriceSet } from \"./cart\";\nexport const getProductImage = (product = {}, image = \"main\") => {\n  if (image === \"main\") {\n    if (product.productid) {\n      if (product.productid.featurefilepath) return product.productid.featurefilepath;\n    }\n\n    if (product.productId) {\n      if (product.productId.featurefilepath) return product.productId.featurefilepath;\n    }\n\n    if (product.featureimage) return product.featureimage;\n    if (product.galleryimgdetails) return product.galleryimgdetails[0];\n  }\n\n  if (image === \"sectionB\") {\n    if (product.productid) {\n      if (product.productid.sectionbimage) return product.productid.sectionbimage;\n    }\n\n    if (product.productId) {\n      if (product.productId.sectionbimage) return product.productId.sectionbimage;\n    }\n\n    if (product.sectionbimage) return product.sectionbimage;\n  }\n\n  return null;\n};\nexport const getProductImageArray = (product = {}) => {\n  let image = [];\n\n  if (product.productid) {\n    if (product.productid.featurefilepath) image = [...image, product.productid.featurefilepath];\n  }\n\n  if (product.featureimage) image = [...image, product.featureimage];\n  if (product.galleryimgdetails) image = [...image, ...product.galleryimgdetails];\n  return image;\n};\nexport const getProductAttributes = (product = {}, allProducts = []) => {\n  if (product.combo) {\n    return product.products.map(el => {\n      const {\n        combo_pid\n      } = el;\n      const thisProduct = allProducts.find(elx => elx._id === combo_pid);\n\n      if (thisProduct) {\n        return {\n          title: thisProduct.title || thisProduct.productid && thisProduct.productid.producttitle,\n          description: thisProduct.description || thisProduct.productid && thisProduct.productid.description\n        };\n      }\n\n      return null;\n    }).filter(el => el);\n  }\n\n  return product.attributecontent || [];\n};\nexport const getProductDescription = product => {\n  if (product) {\n    if (product.productid) {\n      return product.productid.description;\n    }\n\n    if (product.description) {\n      return product.description;\n    }\n  }\n\n  return \"\";\n};\nexport const getProductTitle = product => {\n  if (product) {\n    if (product.title) {\n      return product.title;\n    }\n\n    if (product.productid) {\n      return product.productid.producttitle;\n    }\n\n    if (product.producttitle) {\n      return product.producttitle;\n    }\n  }\n\n  return \"\";\n};\nexport const getProductShortDesc = product => {\n  if (product) {\n    if (product.sdescription) {\n      return product.sdescription;\n    }\n\n    if (product.productid) {\n      return product.productid.sdescription;\n    }\n  }\n\n  return \"\";\n}; //\n\nexport const filteredAttr = (variation, attr) => {\n  const attrX = variation.map(el => {\n    const {\n      sale_price,\n      sku,\n      bar,\n      regular_price\n    } = el,\n          rest = _objectWithoutProperties(el, [\"sale_price\", \"sku\", \"bar\", \"regular_price\"]);\n\n    return _objectSpread({}, rest);\n  });\n  const attrY = attrX.filter(el => Object.keys(el).length === attr.length);\n  const attrZ = removeDuplicateObjAr(attrY);\n  return attrZ;\n};\nexport const removeDuplicateObjAr = arr => arr.reduce((r, i) => !r.some(j => Object.keys(i).length === Object.keys(j).length && !Object.keys(i).some(k => i[k] !== j[k])) ? [...r, i] : r, []);\nexport const getAttrListing = (attr = []) => attr.length > 0 ? Object.keys(attr[0]).map(el => ({\n  names: el,\n  values: [...new Set(attr.map(elx => elx[el]))]\n})) : [];\nexport const getFeaturedProduct = (products = []) => {\n  const filterProduct = getVisibleProducts(products).filter(el => {\n    if (!el) return false;\n    if (el.featured !== true) return false;\n    return true;\n  });\n  return filterProduct;\n};\nexport const getVisibleProducts = (products = []) => {\n  const productsList = products.filter(el => {\n    if (!el) return false;\n    if (el.visibilitytype !== true) return false;\n    return true;\n  });\n  return productsList.map(el => {\n    if (el.combo) return el;\n\n    if (el.variation) {\n      const verifiedAttr = filteredAttr(el.variation, el.attributes);\n      return _objectSpread(_objectSpread({}, el), {}, {\n        verifiedAttr,\n        visibleAttrList: getAttrListing(verifiedAttr)\n      });\n    } else return el;\n  });\n};\nexport const generateProductSlug = product => {\n  const productSlug = product.title ? product.title.toLocaleLowerCase() : product.productid && product.productid.producttitle.toLocaleLowerCase();\n  return encodeUrlFn(productSlug);\n};\nexport const addSlugToProduct = product => _objectSpread(_objectSpread({}, product), {}, {\n  productImage: getProductImage(product),\n  productSlug: generateProductSlug(product)\n});\nexport const getCategoriesProducts = products => {\n  const productsN = products.filter(el => el.categoryid);\n  const combos = products.filter(el => el.combo);\n  const filtered = productsN.map(el => {\n    return productsN.filter(elx => {\n      if (el.categoryid[0] && elx.categoryid[0]) return el.categoryid[0]._id === elx.categoryid[0]._id;\n      return false;\n    });\n  }).sort((a, b) => {\n    if (a[0] && b[0]) if (a[0].categoryid[0] && b[0].categoryid[0]) {\n      if (a[0].categoryid[0]._id < b[0].categoryid[0]._id) return -1;\n      if (a[0].categoryid[0]._id > b[0].categoryid[0]._id) return 1;\n    }\n    return 0;\n  });\n  const productsF = filtered.filter((el, x) => {\n    if (x === 0) return true;\n\n    if (filtered[x - 1] && el[0]) {\n      if (filtered[x - 1][0]) {\n        if (filtered[x - 1][0].categoryid[0] && el[0].categoryid[0]) {\n          const prevEl = filtered[x - 1][0].categoryid[0]._id;\n          const currentEl = el[0].categoryid[0]._id;\n          return prevEl !== currentEl;\n        }\n      }\n    }\n\n    return false; // const prevEl = filtered[x - 1][0].categoryid[0]._id;\n    // const currentEl = el[0].categoryid[0]._id;\n    // return prevEl !== currentEl;\n  });\n  const cate = [...productsF, combos];\n  return cate.map(el => {\n    if (el.length) {\n      if (el[0].combo) {\n        return {\n          category: {\n            blockedcountries: [],\n            catdescription: \"Bundles\",\n            categoryid: \"Bundles\",\n            categoryslug: \"Bundles\",\n            categorytitle: \"Bundles\",\n            _id: \"Bundles\",\n            products: el\n          },\n          products: el\n        };\n      }\n\n      return {\n        category: _objectSpread(_objectSpread({}, el[0].categoryid[0]), {}, {\n          products: el\n        }),\n        products: el\n      };\n    }\n\n    return null;\n  }).filter(el => el);\n};\nexport const getProductPrice = (product, qty, state) => {\n  var {\n    sale_price,\n    regular_price,\n    subscribeChecked,\n    subscribeDiscount\n  } = state;\n\n  if (product.producttype === \"simple\" || product.combo === true) {\n    sale_price = product.dsaleprice;\n    regular_price = product.dregularprice;\n  }\n\n  let value = 0;\n  const qtyVal = qty ? parseInt(qty) > 0 ? parseInt(qty) : 1 : 1;\n  let currency = `$`;\n\n  if (sale_price) {\n    value = sale_price;\n  } else if (regular_price) {\n    value = regular_price;\n  }\n\n  if (value) {\n    if (subscribeChecked) {\n      const discount = subscribeDiscount;\n      const cutPrice = value - getParentage(parseFloat(discount), value);\n\n      if (onlyNew) {\n        return __jsx(\"span\", null, \" \" + currency, (cutPrice * qtyVal).toFixed(2));\n      }\n\n      return __jsx(\"span\", null, \" \" + currency, __jsx(\"strike\", null, numberFormat(value * qtyVal)), \" \", (cutPrice * qtyVal).toFixed(2)); // `${currency}${basicFunction.nombarFormat(value * qtyVal)}`\n    }\n\n    return ` ${currency}${basicFunction.numberFormat(value * qtyVal)}`;\n  }\n\n  return ``;\n};\nexport const getBasicPrice = product => {\n  const {\n    verifiedAttr,\n    variation,\n    combo,\n    producttype\n  } = product;\n\n  if (combo || producttype !== \"variable\") {\n    return {\n      regular_price: product.dregularprice,\n      sale_price: product.dsaleprice\n    };\n  }\n\n  if (verifiedAttr) {\n    if (verifiedAttr.constructor === Array) {\n      if (verifiedAttr.length > 0) {\n        const findItem = variation.find(el => {\n          const keyList = Object.keys(verifiedAttr[0]);\n          const flag = keyList.every(elx => el[elx]);\n          return flag;\n        });\n\n        if (findItem) {\n          const {\n            regular_price,\n            sale_price\n          } = findItem;\n          return {\n            regular_price,\n            sale_price\n          };\n        }\n      }\n    }\n  }\n\n  return {\n    regular_price: 0,\n    sale_price: 0\n  };\n};\nexport const directAddToCart = (product, qty = 1) => {\n  const {\n    verifiedAttr\n  } = product;\n  const arr = verifiedAttr && verifiedAttr.constructor === Array ? verifiedAttr.map(el => {\n    const keys = Object.keys(el);\n    return keys.map(elx => {\n      return {\n        [elx]: {\n          label: el[elx],\n          value: el[elx]\n        }\n      };\n    });\n  }) : [];\n  const obj = arr.map(el => {\n    return el.reduce((a, b) => {\n      return _objectSpread(_objectSpread({}, a), b);\n    }, {});\n  });\n  const newVariation = obj && obj.length ? _objectSpread({}, obj[0]) : {};\n  return variablePriceSet(_objectSpread(_objectSpread(_objectSpread({}, product), newVariation), {}, {\n    qty\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}