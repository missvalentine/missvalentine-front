{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport dynamic from \"next/dynamic\";\nconst TitleList = dynamic(() => import(\"../TItleList\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../TItleList\")],\n    modules: [\"../TItleList\"]\n  }\n});\nconst Button = dynamic(() => import(\"../form-components/Button\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../form-components/Button\")],\n    modules: [\"../form-components/Button\"]\n  }\n});\nimport moment from \"moment\";\nimport { Form, Radio, Collapse, Select } from \"antd\";\nimport { connect } from \"react-redux\";\nimport regex from \"../../services/helpers/regex\";\nconst Input = dynamic(() => import(\"../form-components/Input\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../form-components/Input\")],\n    modules: [\"../form-components/Input\"]\n  }\n});\nconst Checkbox = dynamic(() => import(\"../form-components/Checkbox\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../form-components/Checkbox\")],\n    modules: [\"../form-components/Checkbox\"]\n  }\n});\nimport { setLoading, hideCartBar } from \"../../redux/actions\";\nimport projectSettings from \"../../constants/projectSettings\";\nimport { confirmShipment, authorizeCharge, authorizeSubscriptionBank, authorizeSubscriptionProfile, authorizeSubscription, placeOrderNew, authorizeChargeBank, authorizeChargeProfile } from \"../../services/api\";\nimport { generateOrderObj } from \"../../services/helpers/cart\";\nimport { clearCart } from \"../../redux/actions/cart\";\nimport Cleave from \"cleave.js/react\";\nimport { addCardAuthorize, getCards } from \"../../redux/actions/cards\";\nimport reactComponentDebounce from \"react-component-debounce\";\nconst DebounceCreditCard = reactComponentDebounce({\n  valuePropName: \"value\",\n  triggerMs: 1000\n})(Cleave);\nconst DebounceInput = reactComponentDebounce({\n  valuePropName: \"value\",\n  triggerMs: 1000\n})(Input);\nconst {\n  Panel\n} = Collapse;\n\nclass CheckoutPayment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"tglCard\", () => {\n      this.setState(prevState => {\n        this.props.form.setFieldsValue({\n          paymentProfile: null\n        });\n\n        if (prevState.collapseKey && prevState.collapseKey.includes(\"card\")) {\n          return {\n            isCard: false,\n            collapseKey: [\"bank\"]\n          };\n        }\n\n        return {\n          isCard: true,\n          collapseKey: [\"card\"]\n        };\n      });\n    });\n\n    _defineProperty(this, \"onFailed\", res => {\n      this.props.setLoading(false);\n      this.setState({\n        isFailed: true\n      });\n      const {\n        onFailed\n      } = this.props;\n\n      if (typeof onFailed === \"function\") {\n        onFailed(res);\n      }\n    });\n\n    _defineProperty(this, \"combinePromiseProduct\", (promise, el) => new Promise(res => {\n      promise.then(resX => {\n        if (resX.data.status) {\n          res(_objectSpread(_objectSpread({}, el), {}, {\n            subscriptionFailed: false,\n            subscriptionId: resX.data.subscriptionid\n          }));\n        } else {\n          res(_objectSpread(_objectSpread({}, el), {}, {\n            subscriptionFailed: true\n          }));\n        }\n      }).catch(resX => {\n        res(_objectSpread(_objectSpread({}, el), {}, {\n          subscriptionFailed: true\n        }));\n      });\n    }));\n\n    _defineProperty(this, \"generateSubsData\", (el, details) => {\n      const customAmount = parseFloat(el.subTotal); // + (Math.random() * 100)\n\n      const {\n        billto,\n        profileid,\n        paymentid,\n        cardnumber,\n        cardcode,\n        expiry\n      } = details;\n      const subsData = {\n        amount: parseFloat(customAmount.toFixed(2)),\n        name: billto.firstName + billto.lastName,\n        schedule: {\n          interval: {\n            length: \"1\",\n            unit: \"months\"\n          },\n          startDate: moment().format(\"YYYY-MM-DD\"),\n          totalOccurrences: el.subscriptionMeta.duration || \"1\"\n        },\n        billto: {\n          firstName: billto.firstName,\n          lastName: billto.lastName\n        }\n      };\n\n      if (profileid && paymentid) {\n        return _objectSpread(_objectSpread({}, subsData), {}, {\n          profileid,\n          paymentid\n        });\n      }\n\n      if (cardnumber && cardcode && expiry) return _objectSpread(_objectSpread({}, subsData), {}, {\n        cardnumber,\n        cardcode,\n        expiry\n      });\n    });\n\n    _defineProperty(this, \"formatCreditCardNumber\", value => {\n      if (!value) {\n        return value;\n      }\n\n      const issuer = Payment.fns.cardType(value);\n      const clearValue = clearNumber(value);\n      let nextValue;\n\n      switch (issuer) {\n        case \"amex\":\n          nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(4, 10)} ${clearValue.slice(10, 15)}`;\n          break;\n\n        case \"dinersclub\":\n          nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(4, 10)} ${clearValue.slice(10, 14)}`;\n          break;\n\n        default:\n          nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(4, 8)} ${clearValue.slice(8, 12)} ${clearValue.slice(12, 19)}`;\n          break;\n      }\n\n      return nextValue.trim();\n    });\n\n    _defineProperty(this, \"makeSubsPromise\", (order, details) => {\n      return order.products.map(el => {\n        if (el.isSubscribed) {\n          const subsData = this.generateSubsData(el, details);\n\n          if (subsData.routingNumber) {\n            return this.combinePromiseProduct(authorizeSubscriptionBank(subsData), el);\n          }\n\n          if (subsData.profileid) {\n            return this.combinePromiseProduct(authorizeSubscriptionProfile(subsData), el);\n          }\n\n          return this.combinePromiseProduct(authorizeSubscription(subsData), el);\n        } else {\n          return new Promise(res => {\n            res(el);\n          });\n        }\n      });\n    });\n\n    _defineProperty(this, \"finalOrderSubmit\", orderApi => {\n      // this.setState({loading: false})\n      orderApi.then(res => {\n        const resJson = res.data;\n\n        if (resJson.status) {\n          const {\n            onSubmit,\n            setLoading,\n            clearCart,\n            hideCartBar\n          } = this.props;\n          setLoading(false);\n          clearCart();\n          hideCartBar();\n\n          if (typeof onSubmit === \"function\") {\n            onSubmit(resJson.data);\n          }\n        } else {\n          this.onFailed(resJson); //   this.setState({\n          //     modalData: someThingWrong,\n          //     modalTitle: wrongModalTitle,\n          //     modal: true,\n          //     SpinnerToggle: false\n          //   });\n        }\n      }).catch(err => {\n        this.onFailed(err); // this.setState({\n        //     modalData: someThingWrong,\n        //     modalTitle: wrongModalTitle,\n        //     modal: true,\n        //     SpinnerToggle: false\n        // });\n      });\n    });\n\n    _defineProperty(this, \"onSubmit\", e => {\n      e.preventDefault();\n      const {\n        shippingSendData,\n        address\n      } = this.props;\n      const {\n        isCard\n      } = this.state;\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          // this.state = {loading: true}\n          this.props.setLoading(true);\n\n          if (shippingSendData.shipmentid === \"custom_rates\") {\n            const order = this.generateOrder();\n            order.then(order => {\n              // this.setState({loading: false})\n              // this.props.setLoading(false)\n              if (values.paymentProfile) {\n                this.onProfilePay(order, values);\n              } else if (isCard) {\n                this.onCardPay(order, values);\n              } else {\n                this.onBankPay(order, values);\n              }\n            }).catch(this.onFailed);\n          } else {\n            confirmShipment(_objectSpread({}, shippingSendData)).then(res => {\n              if (res.data.status && res.data.data) {\n                this.setState({\n                  confirmShipRes: res.data.data\n                }, () => {\n                  const order = this.generateOrder();\n                  order.then(order => {\n                    // this.setState({loading: false})\n                    // this.props.setLoading(false)\n                    if (values.paymentProfile) {\n                      this.onProfilePay(order, values);\n                    } else if (isCard) {\n                      this.onCardPay(order, values);\n                    } else {\n                      this.onBankPay(order, values);\n                    }\n                  }).catch(this.onFailed);\n                });\n              } else {\n                this.onFailed(res);\n              }\n            }).catch(this.onFailed);\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"onCardPay\", (order, values) => {\n      const {\n        address\n      } = this.props;\n      const {\n        cardnumber: cardNumber,\n        cvv,\n        cardname,\n        expiry: expDate\n      } = values;\n      const cardnumber = cardNumber.replace(/ /g, \"\");\n      const expiry = \"20\" + expDate.split(\"/\").reverse().join(\"-\");\n      const {\n        grandTotal: amount,\n        countryTax,\n        userDetails,\n        shippingCharge,\n        products\n      } = order;\n      const customAmount = amount;\n\n      const {\n        addressStr,\n        state,\n        city,\n        zip,\n        other,\n        email\n      } = address,\n            addressRest = _objectWithoutProperties(address, [\"addressStr\", \"state\", \"city\", \"zip\", \"other\", \"email\"]);\n\n      const data = {\n        cardnumber,\n        expiry,\n        cardcode: cvv,\n        amount: parseFloat(customAmount.toFixed(2)),\n        tax: {\n          amount: countryTax,\n          name: `Country Tax - ${userDetails.country}`\n        },\n        shipping: {\n          amount: shippingCharge,\n          name: `Ship to - ${userDetails.state}`\n        },\n        lineItems: products.map(el => ({\n          itemId: el.itemId,\n          name: el.title,\n          description: \"-\",\n          quantity: el.qty,\n          unitPrice: el.unitPrice\n        })),\n        billto: {\n          address: addressStr\n        },\n        shipTo: {\n          address: addressStr\n        }\n      };\n      authorizeCharge(data).then(res => {\n        if (res.data.status) {\n          const transactionId = res.data.transactionid;\n          const {\n            savecard\n          } = values;\n\n          if (savecard) {\n            const bodyData = {\n              cardnumber,\n              expmonth: expDate.split(\"/\")[0],\n              expyear: expDate.split(\"/\")[1],\n              cvc: cvv,\n              userid: this.props.userId || this.props.user._id\n            };\n            this.props.addCardAuthorize({\n              user: this.props.user,\n              oldCards: this.props.cards,\n              card: bodyData\n            });\n          }\n\n          Promise.all(this.makeSubsPromise(order, _objectSpread(_objectSpread({}, data), {}, {\n            billto: _objectSpread(_objectSpread({}, data.billto), {}, {\n              firstName: address.firstname,\n              lastName: address.lastname\n            })\n          }))).then(res => {\n            const sendAbleOrder = _objectSpread(_objectSpread({}, order), {}, {\n              products: res,\n              transactionId\n            });\n\n            this.finalOrderSubmit(placeOrderNew(sendAbleOrder));\n          });\n        } else {\n          this.onFailed(res);\n        }\n      }).catch(err => {\n        this.onFailed(err);\n      });\n    });\n\n    _defineProperty(this, \"onBankPay\", (order, values) => {\n      const {\n        address\n      } = this.props;\n      const {\n        account_type,\n        bank_routing_number,\n        bank_checking_number\n      } = values;\n      const {\n        grandTotal: amount,\n        countryTax,\n        userDetails,\n        shippingCharge,\n        products\n      } = order;\n      const customAmount = amount;\n\n      const {\n        addressStr,\n        state,\n        city,\n        zip,\n        other,\n        email\n      } = address,\n            addressRest = _objectWithoutProperties(address, [\"addressStr\", \"state\", \"city\", \"zip\", \"other\", \"email\"]);\n\n      const data = {\n        accountType: account_type,\n        routingNumber: bank_routing_number,\n        accountNumber: bank_checking_number,\n        amount: parseFloat(customAmount.toFixed(2)),\n        tax: {\n          amount: countryTax,\n          name: `Country Tax - ${userDetails.country}`\n        },\n        shipping: {\n          amount: shippingCharge,\n          name: `Ship to - ${userDetails.state}`\n        },\n        lineItems: products.map(el => ({\n          itemId: el.itemId,\n          name: el.title,\n          description: \"-\",\n          quantity: el.qty,\n          unitPrice: el.unitPrice\n        })),\n        billto: {\n          address: addressStr\n        },\n        shipTo: _objectSpread({\n          address: addressStr\n        }, addressRest)\n      };\n      authorizeChargeBank(data).then(res => {\n        if (res.data.status) {\n          const transactionId = res.data.transactionid;\n          Promise.all(this.makeSubsPromise(order, _objectSpread(_objectSpread({}, data), {}, {\n            billto: _objectSpread(_objectSpread({}, data.billto), {}, {\n              firstName: address.firstname,\n              lastName: address.lastname\n            })\n          }))).then(res => {\n            const sendAbleOrder = _objectSpread(_objectSpread({}, order), {}, {\n              products: res,\n              transactionId\n            });\n\n            this.finalOrderSubmit(placeOrderNew(sendAbleOrder));\n          });\n        } else {\n          this.onFailed(res);\n        }\n      }).catch(err => {\n        this.onFailed(err);\n      });\n    });\n\n    _defineProperty(this, \"onProfilePay\", (order, values) => {\n      const {\n        address\n      } = this.props;\n      const {\n        account_type,\n        bank_routing_number,\n        bank_checking_number,\n        paymentProfile\n      } = values;\n      const {\n        grandTotal: amount,\n        countryTax,\n        userDetails,\n        shippingCharge,\n        products\n      } = order;\n      const customAmount = amount;\n\n      const {\n        addressStr,\n        state,\n        city,\n        zip,\n        other,\n        email\n      } = address,\n            addressRest = _objectWithoutProperties(address, [\"addressStr\", \"state\", \"city\", \"zip\", \"other\", \"email\"]);\n\n      const data = {\n        paymentid: paymentProfile.customerPaymentProfileId,\n        profileid: paymentProfile.customerProfileId,\n        amount: parseFloat(customAmount.toFixed(2))\n      };\n      authorizeChargeProfile(data).then(res => {\n        if (res.data.status) {\n          const transactionId = res.data.data && res.data.data.transactionResponse && res.data.data.transactionResponse.transId;\n          Promise.all(this.makeSubsPromise(order, _objectSpread(_objectSpread({}, data), {}, {\n            billto: {\n              address: addressStr,\n              firstName: address.firstname,\n              lastName: address.lastname\n            },\n            shipto: {\n              address: addressStr\n            }\n          }))).then(res => {\n            const sendAbleOrder = _objectSpread(_objectSpread({}, order), {}, {\n              products: res,\n              transactionId\n            });\n\n            this.finalOrderSubmit(placeOrderNew(sendAbleOrder));\n          }).catch(this.onFailed);\n        } else {\n          this.onFailed(res);\n        }\n      }).catch(err => {\n        this.onFailed(err);\n      });\n    });\n\n    this.state = {\n      email: props.email,\n      address: props.address,\n      shippingDetail: props.shippingDetail,\n      isCard: true,\n      collapseKey: [\"card\"],\n      isFailed: false\n    };\n    this.generateOrder = this.generateOrder.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      getCards,\n      user\n    } = this.props;\n\n    if (user && user._id) {\n      getCards(user._id);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.cards !== this.props.cards && this.state.collapseKey) {\n      this.setState({\n        collapseKey: null\n      });\n    }\n  }\n\n  async generateOrder(paymentResponse, isFirst = true) {\n    let confirmShipRes = this.state.confirmShipRes;\n    const {\n      shippingSendData,\n      cart,\n      user,\n      referrer,\n      address,\n      billingAddress\n    } = this.props; // if(isFirst){\n    //     await confirmShipment({\n    //         ...shippingSendData\n    //     })\n    //     .then(res => {\n    //         if(res.data.status && res.data.data){\n    //             this.setState({\n    //                 confirmShipRes: res.data.data\n    //             })\n    //         }\n    //     })\n    //     .catch(console.log)\n    // }\n\n    const refId = referrer && referrer.referralUrlId || null;\n    const {\n      id: shipmentid,\n      selected_rate,\n      postage_label,\n      tracking_code: trackingcode,\n      tracker,\n      fees\n    } = confirmShipRes || {};\n\n    const shippingDetails = _objectSpread(_objectSpread({}, confirmShipRes), {}, {\n      shipmentid,\n      rateid: selected_rate && selected_rate.id,\n      rate: selected_rate && selected_rate.rate,\n      label: postage_label && postage_label.label_url,\n      trackingcode,\n      trackerid: tracker && tracker.id,\n      fees,\n      service: selected_rate && selected_rate.service,\n      carrier: selected_rate && selected_rate.carrier || \"shipment_failed\"\n    });\n\n    const order = generateOrderObj({\n      referralId: refId,\n      cart,\n      user,\n      confirmShipRes: shippingDetails,\n      stateObj: {\n        paymentMethod: \"Authorize\",\n        address,\n        billingAddress\n      }\n    });\n    return order;\n  }\n\n  render() {\n    // console.log(this.props.cards);\n    const componentClass = \"c-checkout-payment\";\n    const {\n      form,\n      user,\n      cards\n    } = this.props;\n    const isLogin = user._id ? true : false;\n    const {\n      email,\n      address,\n      shippingDetail,\n      collapseKey,\n      isCard\n    } = this.state;\n    const {\n      getFieldDecorator,\n      getFieldValue\n    } = form;\n    const profileValue = getFieldValue(\"paymentProfile\"); //  console.log(getFieldValue(\"email\"));\n\n    return __jsx(\"div\", {\n      className: componentClass\n    }, __jsx(Form, {\n      onSubmit: this.onSubmit\n    }, __jsx(TitleList, {\n      versions: [\"sm-border\"],\n      parentClass: componentClass,\n      title: \"Contact Info.\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"email\", {\n      rules: [{\n        required: true,\n        message: \"Please input your E-mail!\"\n      }, {\n        pattern: regex.email,\n        message: \"Please enter a valid E-mail!\"\n      }],\n      initialValue: email\n    })(__jsx(DebounceInput, {\n      disabled: true,\n      label: \"E-mail\"\n    })))), __jsx(TitleList, {\n      versions: [\"sm-border\"],\n      parentClass: componentClass,\n      title: \"Address\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"address\", {\n      rules: [{\n        required: true,\n        message: \"Please input your Address!\"\n      }],\n      initialValue: address.addressStr\n    })(__jsx(DebounceInput, {\n      disabled: true,\n      label: \"address\"\n    })))), isLogin && cards && cards.length > 0 && __jsx(TitleList, {\n      parentClass: componentClass,\n      title: __jsx(\"span\", {\n        onClick: this.tglCard\n      }, \"Pay with Saved Cards or Account\")\n    }, getFieldDecorator(\"paymentProfile\", {\n      initialValue: cards.find(el => el.isDefault) || cards[0]\n    })(__jsx(Radio.Group, {\n      // value = {cards.find((el) => el.isDefault) || cards[0]}\n      className: \"underline\",\n      onChange: e => {\n        const {\n          value\n        } = e.target;\n\n        if (value !== null) {\n          // setFieldsValue({\n          //     newAddress: false\n          // })\n          this.setState({\n            collapseKey: null\n          });\n        }\n      }\n    }, cards.map((el, i) => {\n      //   console.log(el);\n      if (el.creditCard) {\n        return __jsx(Radio, {\n          key: i,\n          value: el\n        }, el.creditCard.cardNumber);\n      } else if (el.bankAccount) {\n        return __jsx(Radio, {\n          key: i,\n          value: el\n        }, __jsx(\"span\", null, \"Account Number \", el.bankAccount.accountNumber));\n      }\n\n      return null;\n    })))), __jsx(TitleList, {\n      parentClass: componentClass,\n      title: __jsx(\"span\", null, \"Pay with Card \")\n    }, __jsx(Form.Item, null, getFieldDecorator(\"cardpayment\", {})(__jsx(Radio.Group, {\n      className: \"add\",\n      onChange: e => {\n        const {\n          value\n        } = e.target;\n\n        if (value !== null) {\n          // setFieldsValue({\n          //     newAddress: false\n          // })\n          this.props.form.setFieldsValue({\n            paymentProfile: null,\n            bankpayment: null\n          }); // console.log(value);\n\n          this.setState({\n            collapseKey: [\"card\"]\n          });\n        }\n      }\n    }, __jsx(Radio, {\n      value: \"Pay with New Card\"\n    }, \"+ Add New\"), __jsx(\"span\", null)))), __jsx(Collapse, {\n      destroyInactivePanel: true,\n      bordered: false,\n      activeKey: collapseKey\n    }, __jsx(Panel, {\n      header: null,\n      key: \"card\"\n    }, __jsx(React.Fragment, null, __jsx(Form.Item, null, getFieldDecorator(\"cardnumber\", {\n      rules: isCard && !profileValue && [{\n        required: true,\n        message: \"Please enter your card number!\"\n      }, {\n        min: 19,\n        message: \"Please enter valid card number!\"\n      }]\n    })( // <InputMask\n    //     label=\"Card Number\"\n    //     mask=\"9999-9999-9999-9999\"\n    // />\n    __jsx(DebounceCreditCard, {\n      className: \"c-input c-input__input\",\n      placeholder: \"XXXX XXXX XXXX XXXX\",\n      options: {\n        creditCard: true\n      },\n      onChange: (key, value) => {//  console.log({ key });\n      }\n    }))), __jsx(Form.Item, null, getFieldDecorator(\"cardname\", {\n      rules: isCard && !profileValue && [{\n        required: true,\n        message: \"Please enter cardholder name!\"\n      }]\n    })(__jsx(DebounceInput, {\n      label: \"Cardholder Name\"\n    }))), __jsx(\"div\", {\n      className: \"container-fluid p-0\"\n    }, __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-6 col-sm-8 \"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"expiry\", {\n      rules: isCard && !profileValue && [{\n        required: true,\n        message: \"Please enter expiration date!\"\n      }]\n    })(__jsx(Cleave, {\n      className: \"c-input c-input__input\",\n      options: {\n        date: true,\n        datePattern: [\"m\", \"y\"]\n      },\n      placeholder: \"Expiry Date\",\n      onChange: event => {// console.log(\n        //   event.target.rawValue,\n        //   event.target.value\n        // );\n      }\n    })))), __jsx(\"div\", {\n      className: \"col-6 col-sm-4\" // style={{ marginTop: \"8px\" }}\n\n    }, __jsx(Form.Item, null, getFieldDecorator(\"cvv\", {\n      rules: isCard && !profileValue && [{\n        required: true,\n        message: \"Please enter cvv number!\"\n      }, {\n        max: 4,\n        message: \"Please enter correct CVV\"\n      }]\n    })(__jsx(DebounceInput, {\n      label: \"CVV Code\",\n      type: \"number\"\n    })))))), isLogin && __jsx(Form.Item, null, getFieldDecorator(\"savecard\", {\n      valuePropName: \"checked\",\n      initialValue: false\n    })(__jsx(Checkbox, {\n      versions: [\"dark\"]\n    }, \"Save this card for next time\"))))))), __jsx(TitleList, {\n      versions: [\"sm-border\"],\n      parentClass: componentClass,\n      title: __jsx(\"span\", null, \"Pay with Account\")\n    }, __jsx(Form.Item, null, getFieldDecorator(\"bankpayment\", {})(__jsx(Radio.Group, {\n      className: \"add\",\n      onChange: e => {\n        const {\n          value\n        } = e.target;\n\n        if (value !== null) {\n          // setFieldsValue({\n          //     newAddress: false\n          // })\n          this.props.form.setFieldsValue({\n            paymentProfile: null,\n            cardpayment: null\n          }); //    console.log(value);\n\n          this.setState({\n            collapseKey: [\"bank\"]\n          });\n        }\n      }\n    }, __jsx(Radio, {\n      value: \"Pay with New Card\"\n    }, \"+ Add New\"), __jsx(\"span\", null)))), __jsx(Collapse, {\n      destroyInactivePanel: true,\n      bordered: false,\n      activeKey: collapseKey\n    }, __jsx(Panel, {\n      header: null,\n      key: \"bank\"\n    }, __jsx(React.Fragment, null, __jsx(Form.Item, null, getFieldDecorator(\"name_acc\", {\n      rules: !isCard && !profileValue && [{\n        required: true,\n        message: \"Please enter your name!\"\n      }]\n    })(__jsx(DebounceInput, {\n      label: \"Name on Account\"\n    }))), __jsx(Form.Item, null, getFieldDecorator(\"bank_routing_number\", {\n      rules: !isCard && !profileValue && [{\n        required: true,\n        message: \"Please enter routing number!\"\n      }]\n    })(__jsx(DebounceInput, {\n      label: \"Bank Routing Number*\"\n    }))), __jsx(Form.Item, null, getFieldDecorator(\"bank_checking_number\", {\n      rules: !isCard && !profileValue && [{\n        required: true,\n        message: \"Please enter checking account number!\"\n      }, {\n        min: 13,\n        message: \"checking number must have 13 digits\"\n      }, {\n        max: 13,\n        message: \"checking number must have 13 digits\"\n      }, {\n        pattern: /\\d+/,\n        message: \"checking number must have only digits\"\n      }]\n    })(__jsx(DebounceInput, {\n      label: \"Checking Account Number*\"\n    }))), __jsx(Form.Item, null, getFieldDecorator(\"account_type\", {\n      initialValue: \"checking\" // rules: !isCard && [{\n      //     required: true,\n      //     message: \"Please enter account type!\"\n      // }]\n\n    })(__jsx(Select, null, projectSettings.accountTypeOpt.map((el, key) => __jsx(Option, {\n      key: key,\n      value: el.value\n    }, el.label))))), isLogin && __jsx(Form.Item, null, getFieldDecorator(\"savecard\", {\n      valuePropName: \"checked\",\n      initialValue: false\n    })(__jsx(Checkbox, {\n      versions: [\"dark\"]\n    }, \"Save this account for next time\"))))))), !isLogin && __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"saveaddress_ship\", {\n      valuePropName: \"checked\",\n      initialValue: true\n    })(__jsx(Checkbox, {\n      versions: [\"dark\"]\n    }, \"I am interested in product release and news.Sign me Up!*\")))), __jsx(TitleList, {\n      versions: [\"sm-border\"]\n    }, __jsx(\"div\", {\n      className: \"row\",\n      style: {\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      }\n    }, __jsx(\"div\", {\n      style: {\n        marginBottom: \"15px\"\n      }\n    }, __jsx(\"input\", {\n      type: \"checkbox\"\n    }), __jsx(\"span\", {\n      style: {\n        fontSize: \"20px\",\n        marginBottom: \"30px\",\n        marginLeft: \"15px\",\n        color: \"#000\"\n      }\n    }, \"I\\u2019m interested in product releases and news. Sign me up!*\")), __jsx(Button, {\n      parentClass: \"c-checkout\",\n      theme: \"dark\"\n    }, \"Place order\")), __jsx(\"div\", {\n      className: \"row\",\n      style: {\n        justifyContent: \"center\",\n        textAlign: \"center\"\n      }\n    }, __jsx(\"p\", {\n      style: {\n        marginTop: \"15px\",\n        color: \"#000\"\n      }\n    }, \"*By signing up or placing and order, you are consenting \", __jsx(\"br\", null), \" \", \"to our \", __jsx(\"i\", {\n      style: {\n        fontWeight: \"700\"\n      }\n    }, \"privacy policy.\"))))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  user: state.user,\n  cart: state.cart,\n  cards: state.cards.cards,\n  referrer: state.referrer\n});\n\nconst mapActionToProps = {\n  addCardAuthorize,\n  getCards,\n  setLoading,\n  clearCart,\n  hideCartBar\n};\nexport default connect(mapStateToProps, mapActionToProps)(Form.create({\n  name: \"CheckoutPayment\"\n})(CheckoutPayment));","map":null,"metadata":{},"sourceType":"module"}