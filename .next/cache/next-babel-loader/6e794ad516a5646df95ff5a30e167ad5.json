{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n// pages/_app.js\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport App from \"next/app\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { makeStore } from \"../redux/store\";\nimport AppWrapper from \"../components/AppWrapper\";\nimport withRedux from \"next-redux-wrapper\";\nimport Head from \"next/head\";\nimport projectSettings from \"../constants/projectSettings\";\n/**\n* @param {object} initialState\n* @param {boolean} options.isServer indicates whether it is a server side or client side\n* @param {Request} options.req NodeJS Request object (not set when client applies initialState from server)\n* @param {Request} options.res NodeJS Request object (not set when client applies initialState from server)\n* @param {boolean} options.debug User-defined debug mode param\n* @param {string} options.storeKey This key will be used to preserve store in global namespace for safe HMR \n*/\n\nvar MyApp = /*#__PURE__*/function (_App) {\n  _inherits(MyApp, _App);\n\n  var _super = _createSuper(MyApp);\n\n  function MyApp() {\n    _classCallCheck(this, MyApp);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MyApp, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps,\n          store = _this$props.store;\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"script\", {\n        src: \"https://maps.googleapis.com/maps/api/js?key=\".concat(projectSettings.googleApiKey, \"&libraries=places&v=3\") // async\n        // defer\n\n      })), __jsx(Provider, {\n        store: store\n      }, __jsx(PersistGate, {\n        persistor: store.__persistor // loading={<Component isPersist={false} {...pageProps} />}\n\n      }, __jsx(AppWrapper, {\n        router: this.props.router\n      }, __jsx(Component, _extends({\n        isPersist: true\n      }, pageProps))))));\n    }\n  }]);\n\n  return MyApp;\n}(App);\n\nexport default withRedux(makeStore, {\n  debug: true\n})(MyApp);","map":null,"metadata":{},"sourceType":"module"}