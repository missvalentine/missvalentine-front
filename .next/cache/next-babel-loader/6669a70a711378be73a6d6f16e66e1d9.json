{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_REVIEWS, CLEAR_REVIEWS, REVIEW_POSTED } from \"../actions/type\";\nconst initialState = {\n  reviews: [],\n  isPosted: false\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case GET_REVIEWS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        reviews: action.payload\n      });\n\n    case CLEAR_REVIEWS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        reviews: []\n      });\n\n    case REVIEW_POSTED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isPosted: action.payload\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/akshataggarwal/Documents/Coding Files/webd projects/missvalentine-front/redux/reducers/reviews.js"],"names":["GET_REVIEWS","CLEAR_REVIEWS","REVIEW_POSTED","initialState","reviews","isPosted","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,aAAtB,EAAqCC,aAArC,QAA0D,iBAA1D;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,QAAQ,EAAE;AAFS,CAArB;AAKA,gBAAe,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,WAAL;AACE,6CACKM,KADL;AAEEF,QAAAA,OAAO,EAAEG,MAAM,CAACE;AAFlB;;AAKF,SAAKR,aAAL;AACE,6CACKK,KADL;AAEEF,QAAAA,OAAO,EAAE;AAFX;;AAKF,SAAKF,aAAL;AACE,6CACKI,KADL;AAEED,QAAAA,QAAQ,EAAEE,MAAM,CAACE;AAFnB;;AAKF;AACE,aAAOH,KAAP;AApBJ;AAsBD,CAvBD","sourcesContent":["import { GET_REVIEWS, CLEAR_REVIEWS, REVIEW_POSTED } from \"../actions/type\";\n\nconst initialState = {\n  reviews: [],\n  isPosted: false\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_REVIEWS:\n      return {\n        ...state,\n        reviews: action.payload\n      };\n\n    case CLEAR_REVIEWS:\n      return {\n        ...state,\n        reviews: []\n      };\n\n    case REVIEW_POSTED:\n      return {\n        ...state,\n        isPosted: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}