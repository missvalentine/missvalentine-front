{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport sessionStorage from 'redux-persist/lib/storage/session';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { createStateSyncMiddleware } from 'redux-state-sync';\nconst SET_CLIENT_STATE = 'SET_CLIENT_STATE';\nconst middlewares = [thunk, createStateSyncMiddleware({\n  // blacklist: [\"extras\", \"products\"]\n  whitelist: ['cart', 'user', 'wishList', 'checkout', 'firstSetting', 'ambassadoruser']\n})];\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['cart', 'user', 'firstSetting', 'ambassadoruser']\n};\nconst sessionRedConfig = {\n  key: 'referrer',\n  storage: sessionStorage\n};\n\nconst {\n  referrer\n} = rootReducer,\n      otherReducer = _objectWithoutProperties(rootReducer, [\"referrer\"]);\n\nconst allReducers = combineReducers(_objectSpread(_objectSpread({}, otherReducer), {}, {\n  referrer: persistReducer(sessionRedConfig, referrer)\n}));\nconst persistedReducer = persistReducer(persistConfig, allReducers);\n\nconst makeConfiguredStore = (reducer, initialState) => createStore(reducer, initialState, applyMiddleware(...middlewares));\n\nexport const makeStore = (initialState, {\n  isServer,\n  req,\n  debug,\n  storeKey\n}) => {\n  if (isServer) {\n    initialState = initialState || {\n      fromServer: 'foo'\n    };\n    return makeConfiguredStore(allReducers, initialState);\n  } else {\n    // we need it only on client side\n    const store = makeConfiguredStore(persistedReducer, initialState);\n    store.__persistor = persistStore(store); // Nasty hack\n\n    return store;\n  }\n};\nexport const setClientState = clientState => ({\n  type: SET_CLIENT_STATE,\n  payload: clientState\n}); // export default (preloadedState = undefined) => {\n//   let store = createStore(\n//     persistedReducer,\n//     // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n//     preloadedState,\n//     composeWithDevTools(applyMiddleware(...middlewares))\n//   );\n//   let persistor = persistStore(store);\n//   // return { store, persistor };\n//   return store\n// };","map":null,"metadata":{},"sourceType":"module"}