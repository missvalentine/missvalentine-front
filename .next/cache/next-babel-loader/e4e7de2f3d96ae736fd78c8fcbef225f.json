{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { updateUserDetails, getUserDetails } from \"../../services/apis/user\";\nimport { SET_ADDRESS } from \"./type\";\nexport var setAddress = function setAddress(payload) {\n  return {\n    type: SET_ADDRESS,\n    payload: payload\n  };\n};\nexport var getAddress = function getAddress(id) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              getUserDetails(id).then(function (res) {\n                console.log(res);\n\n                if (res.data.user) {\n                  if (res.data.user.shippingdetails) {\n                    dispatch(setAddress(res.data.user.shippingdetails));\n                  } else {\n                    dispatch(setAddress({}));\n                  }\n                } else {\n                  dispatch(setAddress({}));\n                }\n              })[\"catch\"](console.log);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nvar returnAddress = function returnAddress(res) {\n  if (res.user) {\n    if (res.user.shippingdetails) {\n      return res.user.shippingdetails;\n    }\n  }\n\n  return {};\n};\n\nexport var addAddress = function addAddress(userid, address) {\n  var oldDetail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var oldAddress = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  return function (dispatch) {\n    if (address.constructor === Array) {\n      var addressArr = address.filter(function (el) {\n        return el;\n      });\n      var addresses1 = [].concat(_toConsumableArray(oldAddress), _toConsumableArray(addressArr)).map(function (elx) {\n        return elx;\n      });\n      var hasDefault = addresses1.find(function (el) {\n        return el.isDefault === true;\n      });\n      var addresses2 = addresses1.map(function (el, index) {\n        if (index === 0 && !hasDefault) {\n          return _objectSpread(_objectSpread({}, el), {}, {\n            isDefault: true\n          });\n        }\n\n        return el;\n      });\n      updateUserDetails({\n        userid: userid,\n        shippingdetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n          address: addresses2\n        })\n      }).then(function (res) {\n        console.log({\n          res: res\n        });\n        var address = returnAddress(res.data);\n        dispatch(setAddress(address));\n      })[\"catch\"](function (err) {\n        console.log({\n          err: err\n        });\n      });\n    } else {\n      var _addresses = [].concat(_toConsumableArray(oldAddress), [address]).map(function (elx) {\n        return elx;\n      });\n\n      var _hasDefault = _addresses.find(function (el) {\n        return el.isDefault === true;\n      });\n\n      var _addresses2 = _addresses.map(function (el, index) {\n        if (index === 0 && !_hasDefault) {\n          return _objectSpread(_objectSpread({}, el), {}, {\n            isDefault: true\n          });\n        }\n\n        return el;\n      });\n\n      updateUserDetails({\n        userid: userid,\n        shippingdetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n          address: _addresses2\n        })\n      }).then(function (res) {\n        console.log({\n          res: res\n        });\n        var address = returnAddress(res.data);\n        dispatch(setAddress(address));\n      })[\"catch\"](function (err) {\n        console.log({\n          err: err\n        });\n      });\n    }\n  };\n};\nexport var deleteAddress = function deleteAddress(userid, id) {\n  var oldDetail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var oldAddress = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  return function (dispatch) {\n    var newAddress1 = oldAddress.filter(function (el) {\n      return el.id !== id;\n    });\n    var defaultAddress = newAddress1.find(function (el) {\n      return el.isDefault === true;\n    });\n    var newAddress = newAddress1.map(function (el, index) {\n      if (index === 0 && !defaultAddress) {\n        return _objectSpread(_objectSpread({}, el), {}, {\n          isDefault: true\n        });\n      }\n\n      return el;\n    });\n    updateUserDetails({\n      userid: userid,\n      shippingdetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n        address: newAddress\n      })\n    }).then(function (res) {\n      console.log({\n        res: res\n      });\n      var address = returnAddress(res.data);\n      dispatch(setAddress(address));\n    })[\"catch\"](function (err) {\n      console.log({\n        err: err\n      });\n    });\n  };\n};\nexport var setDefaultAddress = function setDefaultAddress(userid, id) {\n  var oldDetail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var oldAddress = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  return function (dispatch) {\n    var newAddress = oldAddress.map(function (el) {\n      return _objectSpread(_objectSpread({}, el), {}, {\n        isDefault: el.id === id\n      });\n    });\n    updateUserDetails({\n      userid: userid,\n      shippingdetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n        address: newAddress\n      })\n    }).then(function (res) {\n      console.log({\n        res: res\n      });\n      var address = returnAddress(res.data);\n      dispatch(setAddress(address));\n    })[\"catch\"](function (err) {\n      console.log({\n        err: err\n      });\n    });\n  };\n};\nexport var editAddress = function editAddress(userid, address) {\n  var oldDetail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var oldAddress = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  return function (dispatch) {\n    var newAddress = oldAddress.map(function (el) {\n      if (el.id === address.id) return address;\n      return el;\n    });\n    updateUserDetails({\n      userid: userid,\n      shippingdetails: _objectSpread(_objectSpread({}, oldDetail), {}, {\n        address: newAddress\n      })\n    }).then(function (res) {\n      console.log({\n        res: res\n      });\n      var address = returnAddress(res.data);\n      dispatch(setAddress(address));\n    })[\"catch\"](function (err) {\n      console.log({\n        err: err\n      });\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"module"}