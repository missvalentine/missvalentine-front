{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport dynamic from 'next/dynamic';\nimport Router from 'next/router';\nimport '../components/styles/pages/_catalogue.scss';\nconst Layout = dynamic(() => import('../components/Layouts/Layout'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../components/Layouts/Layout')],\n    modules: ['../components/Layouts/Layout']\n  }\n});\nconst Heading = dynamic(() => import('../components/Heading'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../components/Heading')],\n    modules: ['../components/Heading']\n  }\n});\nimport { getCategories, getProducts } from '../redux/actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Select, Input, Button, Modal } from 'antd';\nimport { createContactUs } from '../services/apis/contact';\nimport { getSubcategory } from '../services/apis/admin';\nimport { Fade } from 'reactstrap';\nimport Product from '../components/Product.js';\nconst {\n  Option\n} = Select;\nexport default function ECatalogue() {\n  const dispatch = useDispatch();\n  const {\n    0: value,\n    1: setValue\n  } = useState({\n    name: '',\n    storeName: '',\n    phoneNumber: '',\n    address: '',\n    city: '',\n    state: '',\n    category: {},\n    subCategory: {}\n  });\n  const {\n    0: selectableProducts,\n    1: setSelectableProducts\n  } = useState([]);\n  const {\n    0: selectedProducts,\n    1: setSelectedProducts\n  } = useState([]);\n  const {\n    0: showSubCate,\n    1: setShowSubCate\n  } = useState(false);\n\n  const handleInputChange = event => {\n    setValue(_objectSpread(_objectSpread({}, value), {}, {\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  function handleCategoryChange(v) {\n    setValue(_objectSpread(_objectSpread({}, value), {}, {\n      category: v,\n      subCategory: {}\n    }));\n    const isSubCateExist = Object.keys(v.subcategories).length !== 0;\n\n    if (isSubCateExist) {\n      const isSubCateWithProductExist = v.subcategories.filter(sCate => sCate.products.length > 0).length > 0;\n      if (isSubCateWithProductExist) setShowSubCate(true);else setShowSubCate(false);\n    } else setShowSubCate(false);\n  }\n\n  function handleSubCategoryChange(v) {\n    setValue(_objectSpread(_objectSpread({}, value), {}, {\n      subCategory: v\n    }));\n  }\n\n  const products = useSelector(state => state.products);\n  useEffect(() => {\n    dispatch(getCategories());\n  }, []);\n\n  const handleLoadProducts = () => {\n    if (value.subCategory._id) {\n      getSubcategory(value.subCategory._id).then(res => {\n        setSelectableProducts(res.data.products);\n      }).catch(err => setSelectableProducts(value.category.products));\n    } else {\n      setSelectableProducts(value.category.products);\n    }\n  };\n\n  const handleSelectClick = data => {\n    let tempSelectedProducts = [...selectedProducts];\n    const isSelected = selectedProducts.filter(prd => prd._id === data._id).length > 0;\n    console.log('isSelected', isSelected);\n\n    if (isSelected) {\n      tempSelectedProducts = tempSelectedProducts.filter(prd => prd._id !== data._id);\n    } else {\n      tempSelectedProducts.push(data);\n    }\n\n    console.log('tempSelectedProducts', tempSelectedProducts);\n    setSelectedProducts(tempSelectedProducts);\n  };\n\n  const handleSendEnquiry = () => {\n    const contactData = {\n      name: value.name,\n      storeName: value.storeName,\n      phone: value.phoneNumber,\n      address: value.address,\n      city: value.city,\n      state: value.state,\n      products: selectedProducts,\n      callScreen: 'enquiry'\n    };\n    createContactUs(contactData).then(res => res.data && Modal.success({\n      title: 'Enquiry Request Registered Successfully!',\n      okText: 'Explore Products',\n\n      onOk() {\n        Router.push('/');\n      }\n\n    })).catch(err => Modal.error({\n      title: 'Request Failed!',\n      okText: 'Explore Products',\n\n      onOk() {\n        Router.push('/');\n      }\n\n    }));\n  };\n\n  return __jsx(Layout, {\n    headerVersions: ['bg-dark'],\n    headerTheme: \"black\"\n  }, __jsx(\"div\", {\n    className: \"c-catalogue\"\n  }, __jsx(Heading, {\n    versions: ['shop-all']\n  }, 'Enquiry Form'), __jsx(\"div\", {\n    className: \"c-catalogue__options\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 col-lg-4 \"\n  }, __jsx(\"p\", null, \"Name\"), __jsx(Input.Search, {\n    required: true,\n    placeholder: \"Enter your name\",\n    name: \"name\",\n    value: value.name,\n    onChange: handleInputChange\n  })), __jsx(\"div\", {\n    className: \"col-12 col-lg-4 \"\n  }, __jsx(\"p\", null, \"Store Name\"), __jsx(Input, {\n    placeholder: \"Enter your store name\",\n    name: \"storeName\",\n    value: value.storeName,\n    onChange: handleInputChange\n  })), __jsx(\"div\", {\n    className: \"col-12 col-lg-4 \"\n  }, __jsx(\"p\", null, \"Phone Number\"), __jsx(Input, {\n    placeholder: \"Enter your phone no\",\n    name: \"phoneNumber\",\n    value: value.phoneNumber,\n    onChange: handleInputChange\n  }))), __jsx(\"div\", {\n    className: \" row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 col-lg-4 \"\n  }, __jsx(\"p\", null, \"Address\"), __jsx(Input, {\n    placeholder: \"Enter your address\",\n    name: \"address\",\n    value: value.address,\n    onChange: handleInputChange\n  })), __jsx(\"div\", {\n    className: \"col-12 col-lg-4 \"\n  }, __jsx(\"p\", null, \"City\"), __jsx(Input, {\n    placeholder: \"Enter your city\",\n    name: \"city\",\n    value: value.city,\n    onChange: handleInputChange\n  })), __jsx(\"div\", {\n    className: \"col-12 col-lg-4 \"\n  }, __jsx(\"p\", null, \"State\"), __jsx(Input, {\n    placeholder: \"Enter your state\",\n    name: \"state\",\n    value: value.state,\n    onChange: handleInputChange\n  }))), __jsx(\"div\", {\n    className: \" row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 col-lg-4 \"\n  }, __jsx(\"p\", null, \"Category\"), __jsx(Select, {\n    value: value.category.name,\n    onChange: handleCategoryChange\n  }, products.categories.map(cate => __jsx(Option, {\n    key: cate._id,\n    value: cate\n  }, cate.name)))), value.category !== {} && showSubCate && value.category.subcategories && __jsx(\"div\", {\n    className: \"col-12 col-lg-4 \"\n  }, __jsx(\"p\", null, \"Sub Category (Optional)\"), __jsx(Select, {\n    value: value.subCategory.name,\n    onChange: handleSubCategoryChange\n  }, value.category.subcategories.filter(sCate => sCate.products.length > 0).map(sCate => __jsx(Option, {\n    key: sCate._id,\n    value: sCate\n  }, sCate.name))))), __jsx(\"div\", {\n    className: \"row load-btn-wrapper\"\n  }, __jsx(Button, {\n    className: \"load-btn\",\n    onClick: handleLoadProducts,\n    disabled: !value.category.products\n  }, \"Load Products\"))), selectedProducts.length !== 0 && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"c-catalogue__products c-catalogue__products-selected row\"\n  }, __jsx(Heading, {\n    className: \"col-12 my-2\",\n    versions: ['shop-all']\n  }, 'Selected Products'), selectedProducts.map((el, i) => __jsx(\"div\", {\n    key: el._id,\n    className: \"col-lg-4 col-md-6 my-3\",\n    style: {\n      padding: '0 40px'\n    }\n  }, __jsx(Fade, {\n    key: el._id\n  }, __jsx(Product, {\n    data: el,\n    isSelectable: true,\n    isSelected: selectedProducts.filter(prd => prd._id === el._id).length > 0,\n    handleSelectClick: handleSelectClick\n  })))), __jsx(\"div\", {\n    className: \"col-12 text-center\"\n  }, __jsx(Button, {\n    className: \"\",\n    onClick: handleSendEnquiry\n  }, \"Send Enquiry\")))), __jsx(\"div\", {\n    className: \"c-catalogue__products row\"\n  }, selectableProducts.length !== 0 && selectableProducts.map((el, i) => __jsx(\"div\", {\n    key: el._id,\n    className: \"col-lg-4 col-md-6 my-3\",\n    style: {\n      padding: '0 40px'\n    }\n  }, __jsx(Fade, {\n    key: el._id\n  }, __jsx(Product, {\n    data: el,\n    isSelectable: true,\n    isSelected: selectedProducts.filter(prd => prd._id === el._id).length > 0,\n    handleSelectClick: handleSelectClick\n  })))))));\n}\n\nECatalogue.getInitialProps = async ctx => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js');\n  const json = await res.json();\n  return {\n    stars: json.stargazers_count\n  };\n};","map":null,"metadata":{},"sourceType":"module"}