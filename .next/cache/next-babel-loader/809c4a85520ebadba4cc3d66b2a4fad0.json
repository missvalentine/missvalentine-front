{"ast":null,"code":"import { AllCountryObj } from \"../../constants/allCountry\";\nexport const encodeUrlFn = url => url.replace(/-/g, \"_\").replace(/ /g, \"-\");\nexport const numberFormat = nbr => {\n  if (nbr === 0 && nbr === \"\") {\n    return \"0.00\";\n  } else {\n    if (nbr) {\n      var nr = parseFloat(nbr).toFixed(2);\n      nr = nr.toString();\n      var pattern = /(-?\\d+)(\\d{3})/;\n\n      while (pattern.test(nr)) nr = nr.replace(pattern, \"$1,$2\");\n\n      return nr;\n    } else {\n      return 0.0;\n    }\n  }\n};\nexport const getParentage = (parValue, totalValue) => parseFloat(parValue) * parseFloat(totalValue) / 100;\nexport const getSingleElementByMultipleObject = (arrayData, f) => {\n  const result = arrayData.reduce(function (r, a) {\n    r[a.carrier] = r[a.carrier] || [];\n    r[a.carrier].push(a);\n    return r;\n  }, {});\n  return result;\n};\nexport const getCountryName = code => {\n  let country = AllCountryObj.map(el => {\n    if (el.code === code) {\n      return el.name;\n    }\n\n    return null;\n  });\n  return country.join(\"\");\n};\nexport const getCountryCode = countryName => {\n  let country = AllCountryObj.map(el => {\n    if (countryName) {\n      if (el.name.trim().toLowerCase() === countryName.trim().toLowerCase()) {\n        return el.code;\n      }\n    }\n\n    return null;\n  });\n  return country.join(\"\");\n};","map":null,"metadata":{},"sourceType":"module"}