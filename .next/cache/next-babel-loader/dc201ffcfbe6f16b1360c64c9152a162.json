{"ast":null,"code":"import { isAlpha, isEmail, isEmpty, isNumeric } from \"validator\"; // import { isValidPhoneNumber } from \"react-phone-number-input\";\n\nimport { emailNotValidErrMsg, phoneNotValidErrMsg, zipValidErrMsg } from \"../../constants/constantMessage\";\nimport projectSettings, { projectName } from \"../../constants/projectSettings\";\nvar enableCountry = projectSettings.enableCountry;\nexport var required = function required(value) {\n  if (!value.toString().trim().length) {\n    // We can return string or jsx as the 'error' prop for the validated Component\n    return \"require\";\n  }\n};\nexport var email = function email(value) {\n  if (!isEmail(value)) {\n    return \"\".concat(value, \" is not a valid email.\");\n  }\n};\nexport var fieldValidation = function fieldValidation() {\n  var field = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \" \";\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \" \";\n  var typeArr = type.split(\",\").map(function (el) {\n    return el.trim();\n  });\n\n  if (typeArr.includes(\"required\")) {\n    if (isEmpty(field.trim())) {\n      return {\n        isError: true,\n        errorMsg: \"can't be empty\"\n      };\n    }\n  }\n\n  if (typeArr.includes(\"name\")) {\n    if (!isAlpha(field)) {\n      return {\n        isError: true,\n        errorMsg: \"Only Alphabets\"\n      };\n    }\n  }\n\n  if (typeArr.includes(\"email\")) {\n    if (!isEmail(field)) {\n      return {\n        isError: true,\n        errorMsg: emailNotValidErrMsg\n      };\n    }\n  } // if (typeArr.includes(\"phone\")) {\n  //   if (!isValidPhoneNumber(field)) {\n  //     return {\n  //       isError: true,\n  //       errorMsg: phoneNotValidErrMsg\n  //     };\n  //   }\n  // }\n\n\n  if (typeArr.includes(\"zipcode\")) {\n    // if(isPostalCode(this.state[field])){\n    if (!isNumeric(field)) {\n      return {\n        isError: true,\n        errorMsg: zipValidErrMsg\n      };\n    }\n  }\n\n  if (typeArr.includes(\"routingNumber\")) {\n    // if(isPostalCode(this.state[field])){\n    if (!isNumeric(field)) {\n      if (field.length === 9) {\n        return {\n          isError: true,\n          errorMsg: \"Bank routing number should be 9 digits.\"\n        };\n      }\n\n      return {\n        isError: true,\n        errorMsg: \"Bank routing number is not Correct.\"\n      };\n    }\n  }\n\n  if (typeArr.includes(\"country\")) {\n    if (!enableCountry.includes(field)) {\n      return {\n        isError: true,\n        errorMsg: \"\".concat(projectName, \" offers shipping to USA only\")\n      };\n    }\n  }\n\n  return {\n    isError: false,\n    errorMsg: \"\"\n  };\n};","map":{"version":3,"sources":["/Users/akshataggarwal/Documents/Coding Files/webd projects/missvalentine-front/services/extra/validations.js"],"names":["isAlpha","isEmail","isEmpty","isNumeric","emailNotValidErrMsg","phoneNotValidErrMsg","zipValidErrMsg","projectSettings","projectName","enableCountry","required","value","toString","trim","length","email","fieldValidation","field","type","typeArr","split","map","el","includes","isError","errorMsg"],"mappings":"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","sourcesContent":["import { isAlpha, isEmail, isEmpty, isNumeric } from \"validator\";\n// import { isValidPhoneNumber } from \"react-phone-number-input\";\nimport {\n\temailNotValidErrMsg,\n\tphoneNotValidErrMsg,\n\tzipValidErrMsg,\n} from \"../../constants/constantMessage\";\nimport projectSettings, { projectName } from \"../../constants/projectSettings\";\n\nconst { enableCountry } = projectSettings;\nexport const required = (value) => {\n\tif (!value.toString().trim().length) {\n\t\t// We can return string or jsx as the 'error' prop for the validated Component\n\t\treturn \"require\";\n\t}\n};\n\nexport const email = (value) => {\n\tif (!isEmail(value)) {\n\t\treturn `${value} is not a valid email.`;\n\t}\n};\n\nexport const fieldValidation = (field = \" \", type = \" \") => {\n\tconst typeArr = type.split(\",\").map((el) => el.trim());\n\tif (typeArr.includes(\"required\")) {\n\t\tif (isEmpty(field.trim())) {\n\t\t\treturn {\n\t\t\t\tisError: true,\n\t\t\t\terrorMsg: \"can't be empty\",\n\t\t\t};\n\t\t}\n\t}\n\tif (typeArr.includes(\"name\")) {\n\t\tif (!isAlpha(field)) {\n\t\t\treturn {\n\t\t\t\tisError: true,\n\t\t\t\terrorMsg: \"Only Alphabets\",\n\t\t\t};\n\t\t}\n\t}\n\tif (typeArr.includes(\"email\")) {\n\t\tif (!isEmail(field)) {\n\t\t\treturn {\n\t\t\t\tisError: true,\n\t\t\t\terrorMsg: emailNotValidErrMsg,\n\t\t\t};\n\t\t}\n\t}\n\t// if (typeArr.includes(\"phone\")) {\n\t//   if (!isValidPhoneNumber(field)) {\n\t//     return {\n\t//       isError: true,\n\t//       errorMsg: phoneNotValidErrMsg\n\t//     };\n\t//   }\n\t// }\n\tif (typeArr.includes(\"zipcode\")) {\n\t\t// if(isPostalCode(this.state[field])){\n\t\tif (!isNumeric(field)) {\n\t\t\treturn {\n\t\t\t\tisError: true,\n\t\t\t\terrorMsg: zipValidErrMsg,\n\t\t\t};\n\t\t}\n\t}\n\tif (typeArr.includes(\"routingNumber\")) {\n\t\t// if(isPostalCode(this.state[field])){\n\t\tif (!isNumeric(field)) {\n\t\t\tif (field.length === 9) {\n\t\t\t\treturn {\n\t\t\t\t\tisError: true,\n\t\t\t\t\terrorMsg: \"Bank routing number should be 9 digits.\",\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tisError: true,\n\t\t\t\terrorMsg: \"Bank routing number is not Correct.\",\n\t\t\t};\n\t\t}\n\t}\n\tif (typeArr.includes(\"country\")) {\n\t\tif (!enableCountry.includes(field)) {\n\t\t\treturn {\n\t\t\t\tisError: true,\n\t\t\t\terrorMsg: `${projectName} offers shipping to USA only`,\n\t\t\t};\n\t\t}\n\t}\n\n\treturn {\n\t\tisError: false,\n\t\terrorMsg: \"\",\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}