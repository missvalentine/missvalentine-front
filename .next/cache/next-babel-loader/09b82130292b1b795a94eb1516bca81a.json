{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport classNames from \"classnames\";\nimport { connect } from \"react-redux\";\nimport { getProductsByCategory } from \"../../services/extra/productHelpers\";\nimport { getVisibleProducts } from \"../../services/helpers/product\";\nimport { getAllProducts } from '../../services/api';\n\nclass ChatProductList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"triggerNext\", e => {\n      this.setState({\n        trigger: true\n      }, () => {\n        this.props.triggerNextStep(e);\n      });\n    });\n\n    this.state = {\n      products: getProductsByCategory(props.products, props.steps.categoryList.value),\n      isLoading: true,\n      selected: null\n    };\n  }\n\n  componentDidMount() {\n    getAllProducts().then(res => {\n      const products = getProductsByCategory(res.data.products || [], this.props.steps.categoryList.value);\n      this.setState({\n        products: getVisibleProducts(products),\n        isLoading: false\n      });\n    });\n  }\n\n  render() {\n    const {\n      selected,\n      isLoading,\n      products\n    } = this.state;\n    return __jsx(\"div\", null, isLoading && \"...\", !isLoading && products.map((el, index) => {\n      const productTitle = el.title ? el.title : el.productid && el.productid.producttitle;\n      return __jsx(\"p\", {\n        onClick: () => {\n          if (!selected) {\n            this.setState({\n              selected: productTitle,\n              products: [el]\n            }, () => {\n              this.triggerNext({\n                value: _objectSpread(_objectSpread({}, el), {}, {\n                  productTitle\n                })\n              });\n            });\n          }\n        },\n        className: classNames(\"chat-custom-option w-100\", {\n          selected: selected === productTitle\n        }),\n        key: index\n      }, productTitle);\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  products: state.products.products\n});\n\nexport default connect(mapStateToProps)(ChatProductList);","map":null,"metadata":{},"sourceType":"module"}