{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport dynamic from \"next/dynamic\";\nimport ChatBot from \"react-simple-chatbot\";\nimport Router from \"next/router\";\nimport { ThemeProvider } from \"styled-components\";\nimport { connect } from \"react-redux\";\nconst ChatProductList = dynamic(() => import(\"./ChatProductList\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./ChatProductList\")],\n    modules: [\"./ChatProductList\"]\n  }\n});\nconst ChatCategoryList = dynamic(() => import(\"./ChatCategoryList\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./ChatCategoryList\")],\n    modules: [\"./ChatCategoryList\"]\n  }\n});\nconst ChatProductCard = dynamic(() => import(\"./ChatProductCard\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./ChatProductCard\")],\n    modules: [\"./ChatProductCard\"]\n  }\n});\nconst ChatUserOneRet = dynamic(() => import(\"./ChatUserOneRet\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./ChatUserOneRet\")],\n    modules: [\"./ChatUserOneRet\"]\n  }\n});\nimport ChatMsgList from \"./ChatMsgList\";\nconst ChatOrderList = dynamic(() => import(\"./ChatOrderList\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./ChatOrderList\")],\n    modules: [\"./ChatOrderList\"]\n  }\n});\nconst LearnResponse = dynamic(() => import(\"./LearnResponse\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./LearnResponse\")],\n    modules: [\"./LearnResponse\"]\n  }\n});\nimport { isEmpty, isEmail } from \"validator\";\nimport { chatTheme, imageUrl } from \"../../constants/projectSettings\";\nconst chatMsgList = new ChatMsgList();\nconst {\n  getInitialMsg,\n  getInitialMsg2,\n  shopNowMsg,\n  redirectForTracking,\n  emptyTrackingIdErr,\n  getProductChooseMsg,\n  getMsgAfterCategory,\n  contactFirst,\n  contactSecond,\n  contactThird,\n  contactFourth,\n  repeatMsg,\n  afterProduct,\n  contactErrMsgOne,\n  contactErrMsgTwo,\n  checkoutRedirectMsg,\n  checkoutNoItemMsg,\n  getProductListMsg,\n  pickProductMsg,\n  afterProductFinish,\n  checkoutFinish,\n  learnMoreUserPre,\n  learnMoreQuit,\n  learnMoreNext\n} = chatMsgList;\n\nclass ChatBotElement extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"toggleFloating\", () => {\n      this.setState(prevState => ({\n        opened: !prevState.opened\n      }));\n    });\n\n    _defineProperty(this, \"clearChat\", () => {\n      this.setState({\n        clear: true\n      }, () => {\n        this.setState({\n          clear: false\n        });\n      });\n    });\n\n    _defineProperty(this, \"ifLogin\", (login, notLogin = null) => {\n      if (this.props) if (this.props.user) {\n        if (this.props.user._id && this.props.user.username) return login;\n      }\n      return notLogin;\n    });\n\n    this.state = {\n      userName: props.user.email,\n      opened: false,\n      clear: false\n    };\n  }\n\n  componentDidMount() {\n    this.ifLogin();\n  }\n\n  render() {\n    chatTheme;\n\n    const theme = _objectSpread({}, chatTheme);\n\n    const {\n      isOpen,\n      items\n    } = this.props;\n    const {\n      opened,\n      clear\n    } = this.state;\n    const chat = [this.ifLogin({\n      id: \"initialOne\",\n      message: () => {\n        const userName = this.props.user && this.props.user.username.split(\" \")[0];\n        return getInitialMsg(userName);\n      },\n      trigger: \"initialTwo\"\n    }), {\n      id: \"initialTwo\",\n      message: getInitialMsg2(),\n      trigger: \"firstOptionsFresh\"\n    }, {\n      id: \"firstOptionsFresh\",\n      options: [{\n        value: \"initialOne\",\n        label: \"Shop Now\",\n        trigger: \"shopSelected\"\n      }, {\n        value: \"checkout\",\n        label: \"Checkout\",\n        trigger: \"checkout\"\n      }, {\n        value: \"contact\",\n        label: \"Contact us\",\n        trigger: \"contact\"\n      }, {\n        value: \"learnMore\",\n        label: \"Learn more\",\n        trigger: \"learnMoreUserPre\"\n      }]\n    }, {\n      id: \"firstOptions\",\n      options: [{\n        value: \"initialOne\",\n        label: \"Shop Now\",\n        trigger: \"shopSelected\"\n      }, {\n        value: \"checkout\",\n        label: \"Checkout\",\n        trigger: \"checkout\"\n      }, {\n        value: \"contact\",\n        label: \"Contact us\",\n        trigger: \"contact\"\n      }, {\n        value: \"learnMore\",\n        label: \"Learn more\",\n        trigger: \"learnMoreUserPre\"\n      }]\n    }, {\n      id: \"learnMoreUserPre\",\n      message: learnMoreUserPre(),\n      trigger: \"learnMoreUser\"\n    }, {\n      id: \"learnMoreUser\",\n      user: true,\n      trigger: \"learnMoreResponce\"\n    }, {\n      id: \"learnMoreResponce\",\n      component: __jsx(LearnResponse, null),\n      waitAction: true,\n      asMessage: true\n    }, {\n      id: \"learnMoreQuit\",\n      message: learnMoreQuit(),\n      trigger: \"learnMoreQuitAfter\"\n    }, {\n      id: \"learnMoreQuitAfter\",\n      user: true,\n      trigger: ({\n        value\n      }) => {\n        if (value.toLowerCase().trim() === \"yes\") return \"firstOptions\";\n        return \"learnMoreNext\";\n      } // trigger: \"learnMoreResponce\"\n\n    }, {\n      id: \"learnMoreNext\",\n      message: learnMoreNext(),\n      trigger: \"learnMoreUser\"\n    }, {\n      id: \"shopSelected\",\n      message: shopNowMsg(),\n      trigger: \"userOne\"\n    }, {\n      id: \"userOne\",\n      user: true,\n      // waitAction: true,\n      trigger: \"5\"\n    }, {\n      id: 5,\n      component: __jsx(ChatUserOneRet, null),\n      waitAction: true,\n      asMessage: true\n    }, // {\n    //   id: \"trackNow\",\n    //   message: msgTrackNow(),\n    //   trigger: \"getTrackingId\"\n    // },\n    {\n      id: \"trackNowLogin\",\n      // message: msgTrackNow(),\n      component: __jsx(ChatOrderList, null),\n      trigger: \"trackNowLoginNext\",\n      waitAction: true\n    }, {\n      id: \"trackNowLoginNext\",\n      message: pp => {\n        setTimeout(() => {\n          window.open(\"https://www.google.com\");\n        }, 2000);\n        return redirectForTracking();\n      },\n      trigger: \"repeat\"\n    }, {\n      id: \"trackNow\",\n      user: true,\n      validator: value => {\n        if (isEmpty(value)) {\n          return emptyTrackingIdErr();\n        }\n\n        return true;\n      },\n      trigger: props => {\n        return \"repeat\";\n      }\n    }, {\n      id: \"categoryList\",\n      component: __jsx(ChatCategoryList, null),\n      waitAction: true,\n      // asMessage: true,\n      trigger: \"postCategory\"\n    }, {\n      id: \"postCategory\",\n      message: ({\n        previousValue\n      }) => {\n        return getMsgAfterCategory(previousValue);\n      },\n      trigger: \"preProduct\"\n    }, {\n      id: \"preProduct\",\n      message: getProductListMsg(),\n      trigger: \"preProduct2\"\n    }, {\n      id: \"preProduct2\",\n      message: pickProductMsg(),\n      trigger: \"products\"\n    }, {\n      id: \"products\",\n      component: __jsx(ChatProductList, null),\n      waitAction: true,\n      trigger: \"productSelected1\" // end: true\n\n    }, {\n      id: \"productSelected1\",\n      message: \"Awesome! 😍\",\n      trigger: props => {\n        return \"productSelected2\";\n      }\n    }, {\n      id: \"productSelected2\",\n      message: ({\n        steps\n      }) => {\n        return getProductChooseMsg(steps.products.value.productTitle); // return `${steps.products.value.productTitle} is my favourite`\n      },\n      // end: true\n      trigger: \"afterProduct\"\n    }, {\n      id: \"afterProduct\",\n      message: afterProduct(),\n      trigger: \"singleProduct\"\n    }, {\n      id: \"singleProduct\",\n      component: __jsx(ChatProductCard, null),\n      trigger: \"productNext\"\n    }, {\n      id: \"productNext\",\n      message: afterProductFinish(),\n      trigger: \"firstOptions\"\n    }, {\n      id: \"checkout\",\n      message: () => {\n        if (items && items.length > 0) {\n          return checkoutRedirectMsg();\n        }\n\n        return checkoutNoItemMsg();\n      },\n      trigger: () => {\n        if (items && items.length > 0) {\n          return \"checkout1\";\n        }\n\n        return \"repeat\";\n      }\n    }, {\n      id: \"checkout1\",\n      message: checkoutFinish(),\n      trigger: \"checkout2\"\n    }, {\n      id: \"checkout2\",\n      message: () => {\n        // const { history, countryCode } = this.props;\n        setTimeout(() => {\n          Router.push(`/checkout`);\n          this.toggleFloating();\n          this.clearChat();\n        }, 400);\n        return \"\";\n      },\n      end: true\n    }, {\n      id: \"contact\",\n      message: contactFirst(),\n      trigger: \"contactUserFirst\"\n    }, {\n      id: \"contactUserFirst\",\n      user: true,\n      // waitAction: true,\n      trigger: ({\n        value\n      }) => {\n        if (isEmail(value)) return \"contactTwo\";else {\n          return \"contactUserErr\";\n        }\n      }\n    }, {\n      id: \"contactUserErr\",\n      message: contactErrMsgOne(),\n      trigger: \"contactUserErr2\"\n    }, {\n      id: \"contactUserErr2\",\n      message: contactErrMsgTwo(),\n      trigger: \"contactUserFirst\"\n    }, {\n      id: \"contactTwo\",\n      message: contactSecond(),\n      trigger: \"contactUserSecond\"\n    }, {\n      id: \"contactUserSecond\",\n      user: true,\n      // waitAction: true,\n      trigger: \"contactThree\"\n    }, {\n      id: \"contactThree\",\n      message: contactThird(),\n      trigger: \"contactFourth\"\n    }, {\n      id: \"contactFourth\",\n      message: contactFourth(),\n      trigger: \"repeat\"\n    }, {\n      id: \"repeat\",\n      message: repeatMsg(),\n      trigger: \"firstOptions\"\n    }].filter(el => el);\n    if (clear) return __jsx(\"div\", null);\n    return __jsx(\"div\", {\n      className: \"react-chat-bot\"\n    }, __jsx(\"div\", {\n      className: \"chat-inner\"\n    }, __jsx(ThemeProvider, {\n      theme: theme\n    }, __jsx(ChatBot, {\n      opened: opened,\n      toggleFloating: this.toggleFloating,\n      floatingStyle: {\n        bottom: \"42px\"\n      },\n      enableMobileAutoFocus: true,\n      floating: true,\n      botAvatar: `${imageUrl}/Logo-chat.png`,\n      bubbleStyle: {\n        marginBottom: 0,\n        // marginTop: \"10px\",\n        maxWidth: \"70%\",\n        fontSize: \"16px\",\n        boxShadow: \"none\"\n      },\n      inputAttributes: {\n        placeHolder: \"Type the \"\n      },\n      bubbleOptionStyle: {\n        marginBottom: 0,\n        marginTop: \"10px\",\n        fontSize: \"16px\",\n        boxShadow: \"none\",\n        borderBottom: \"1px solid currentColor\",\n        paddingRight: \"30px\",\n        fontWeight: \"600\",\n        paddingLeft: \"0\",\n        paddingBottom: \"0\",\n        marginRight: \"10px\",\n        minWidth: \"40%\"\n      },\n      style: {\n        width: \"450px\",\n        maxWidth: \"100%\",\n        bottom: 0,\n        right: isOpen ? \"380px\" : \"32px\",\n        transition: \"all 0.4s ease 0s\"\n      },\n      customStyle: {\n        boxShadow: \"none\",\n        justifyContent: \"left\",\n        marginLeft: \"46px\"\n      },\n      steps: chat\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  user: state.user,\n  isOpen: state.drawers.isCartOpen,\n  countryCode: state.location.countryCode,\n  items: state.cart.items\n});\n\nexport default connect(mapStateToProps)(ChatBotElement);","map":null,"metadata":{},"sourceType":"module"}