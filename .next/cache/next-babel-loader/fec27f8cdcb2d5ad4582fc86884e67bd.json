{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport '../../../components/styles/app.scss';\nimport AdminLayout from '../../../components/admin/AdminLayout';\nimport { Input, Button, Checkbox, Tag, Select, Upload } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { createProduct, getAllCategories } from '../../../services/apis/admin.js';\nvar Option = Select.Option; //constants\n\nvar allSizes = ['32', '34', '36'];\nvar allColors = ['red', 'green', 'blue', 'gold', 'lime', 'cyan'];\nexport default function create(props) {\n  var editData = props.editData;\n\n  var _useState = useState({\n    name: '',\n    shortDesc: '',\n    description: '',\n    category: '',\n    subCategories: [],\n    price: '',\n    sizes: [],\n    colors: [],\n    hidden: false,\n    images: [],\n    errors: ''\n  }),\n      inputData = _useState[0],\n      setInputData = _useState[1];\n\n  var _useState2 = useState([]),\n      categories = _useState2[0],\n      setCategories = _useState2[1];\n\n  var _useState3 = useState([]),\n      subCategories = _useState3[0],\n      setSubCategories = _useState3[1];\n\n  useEffect(function () {\n    if (editData) {\n      var newInputData = _objectSpread({}, inputData);\n\n      newInputData.sizes = editData.sizes;\n      setInputData(newInputData);\n    }\n  }, []);\n  useEffect(function () {\n    getAllCategories().then(function (res) {\n      return res && res.data && setCategories(res.data.data);\n    });\n  }, []);\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var formData, fileListAsArray, i;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              console.log(inputData, 'input');\n              formData = new FormData();\n              formData.append('name', inputData.name);\n              formData.append('shortDesc', inputData.shortDesc);\n              formData.append('description', inputData.description);\n              formData.append('category', inputData.category);\n              formData.append('price', inputData.price);\n              formData.append('hidden', inputData.hidden);\n              formData.append('sizes', JSON.stringify(inputData.sizes));\n              formData.append('colors', JSON.stringify(inputData.colors));\n              formData.append('subCategories', JSON.stringify(inputData.subCategories)); //for Images\n\n              fileListAsArray = Array.from(inputData.images);\n\n              for (i in fileListAsArray) {\n                console.log(fileListAsArray[i]);\n                formData.append('images', fileListAsArray[i]);\n              }\n\n              createProduct(formData).then(function (res) {\n                if (res.data && res.data.success) {\n                  setInputData(_objectSpread(_objectSpread({}, inputData), {}, {\n                    name: '',\n                    // shortDesc: '',\n                    // description: '',\n                    // category: '',\n                    // subCategories: [],\n                    // price: '',\n                    // sizes: [],\n                    // colors: [],\n                    // hidden: false,\n                    images: [],\n                    errors: ''\n                  }));\n                }\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleInputChange = function handleInputChange(selector) {\n    return function (event) {\n      if (selector === 'hidden') {\n        setInputData(_objectSpread(_objectSpread({}, inputData), {}, {\n          hidden: event.target.checked\n        }));\n      } else if (selector === 'sizes' || selector === 'colors' || selector === 'subCategories') {\n        setInputData(_objectSpread(_objectSpread({}, inputData), {}, _defineProperty({}, selector, event)));\n      } else {\n        setInputData(_objectSpread(_objectSpread({}, inputData), {}, _defineProperty({}, selector, event.target.value)));\n      }\n    };\n  };\n\n  var handleCategoryChange = function handleCategoryChange(cate) {\n    setInputData(_objectSpread(_objectSpread({}, inputData), {}, {\n      category: cate._id,\n      subCategories: []\n    }));\n    setSubCategories(cate.subcategories);\n  };\n\n  var handleImagesChange = function handleImagesChange(file, fileList) {\n    setInputData(_objectSpread(_objectSpread({}, inputData), {}, {\n      images: fileList\n    }));\n  };\n\n  var handleImagesRemove = function handleImagesRemove(file) {\n    var index = inputData.images.indexOf(file);\n    var newFileList = inputData.images.slice();\n    newFileList.splice(index, 1);\n    setInputData(_objectSpread(_objectSpread({}, inputData), {}, {\n      images: newFileList\n    }));\n  };\n\n  function tagRender(props) {\n    var label = props.label,\n        value = props.value,\n        closable = props.closable,\n        onClose = props.onClose;\n    return __jsx(Tag, {\n      color: value,\n      closable: closable,\n      onClose: onClose,\n      style: {\n        marginRight: 3\n      }\n    }, label);\n  }\n\n  return __jsx(AdminLayout, null, categories && categories.length > 0 ? __jsx(\"div\", null, __jsx(\"h3\", null, \" \", editData ? ' Edit ' : 'Enter ', \" Product Details\"), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Select, {\n    style: {\n      width: '100%'\n    },\n    placeholder: \"Please select category\"\n  }, categories.map(function (cate, index) {\n    return __jsx(Option, {\n      key: index,\n      value: cate._id,\n      name: cate.name,\n      onClick: function onClick() {\n        return handleCategoryChange(cate);\n      }\n    }, cate.name);\n  }))), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Select // value={inputData.subCategories || []}\n  , {\n    onChange: handleInputChange('subCategories'),\n    mode: \"multiple\",\n    placeholder: \"Select subcategories\",\n    style: {\n      width: '100%'\n    }\n  }, subCategories.map(function (subcategory, index) {\n    return __jsx(Option, {\n      key: index,\n      value: subcategory._id\n    }, subcategory.name);\n  }))), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Input, {\n    id: \"name\",\n    placeholder: \"Enter Product Name\",\n    label: \"Product Name\",\n    name: \"name\",\n    required: true,\n    onChange: handleInputChange('name')\n  })), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Input.TextArea, {\n    id: \"short-desc-input\",\n    label: \"Short Description\",\n    name: \"shortDesc\",\n    required: true,\n    rows: 2,\n    onChange: handleInputChange('shortDesc'),\n    placeholder: \"write a short description about the product.\"\n  })), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Input.TextArea, {\n    label: \"Description\",\n    name: \"description\",\n    rows: 4,\n    onChange: handleInputChange('description'),\n    placeholder: \"write a full description about the product.\"\n  })), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Input, {\n    label: \"Price ( \\u20B9 )\",\n    name: \"price\",\n    placeholder: \"Please enter price\",\n    onChange: handleInputChange('price')\n  })), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Select, {\n    style: {\n      width: '100%'\n    },\n    placeholder: \"Please select Sizes\",\n    onChange: handleInputChange('sizes'),\n    mode: \"multiple\",\n    name: \"sizes\"\n  }, allSizes.map(function (size, index) {\n    return __jsx(Option, {\n      key: index,\n      value: size\n    }, size);\n  }))), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Select, {\n    style: {\n      width: '100%'\n    },\n    placeholder: \"Please select Colors\",\n    onChange: handleInputChange('colors'),\n    showArrow: true,\n    mode: \"multiple\",\n    name: \"colors\",\n    tagRender: tagRender\n  }, allColors.map(function (color, index) {\n    return __jsx(Option, {\n      key: index,\n      value: color\n    }, color);\n  }))), __jsx(\"div\", {\n    className: \"c-admin-create-product__item\"\n  }, __jsx(Checkbox, {\n    checked: inputData.hidden,\n    onChange: handleInputChange('hidden')\n  }, \"Is Hidden?\")), __jsx(Upload, {\n    name: \"images\",\n    accept: \".jpg, .jpeg, .png\",\n    multiple: true,\n    listType: \"picture\",\n    beforeUpload: handleImagesChange,\n    onRemove: handleImagesRemove,\n    fileList: inputData.images\n  }, __jsx(Button, {\n    icon: __jsx(UploadOutlined, null)\n  }, \"Upload Images\")), __jsx(\"div\", {\n    className: \"c-admin-create-product__btn\"\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleSubmit\n  }, \"Create\"))) : __jsx(\"div\", null, \"Create a Category first\"));\n}","map":null,"metadata":{},"sourceType":"module"}