{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_USER, UNSET_USER } from \"./type\";\nimport { getUserDetails } from \"../../services/apis/user\";\nexport var setUser = function setUser(user) {\n  var cart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return function (dispatch) {\n    // console.log({ user });\n    if (user._id) {\n      console.log({\n        user: user\n      });\n      getUserDetails(user._id).then(function (res) {\n        console.log({\n          res: res\n        });\n\n        if (res.data.status && res.data.user) {\n          //   dispatch(getUserMeta(res.data.user._id, cart));\n          var payload = _objectSpread(_objectSpread({}, res.data.user.userid), {}, {\n            userMetaId: res.data.user._id,\n            userMetaObj: res.data.user,\n            userObj: res.data.user.userid\n          });\n\n          dispatch({\n            type: SET_USER,\n            payload: payload\n          });\n\n          if (cart) {\n            setCartApi({\n              usermetaid: res.data.user._id,\n              cart: cart\n            });\n          } else if (res.data.user.cart) {// dispatch({\n            //   type: SET_CART,\n            //   payload: res.data.user.cart\n            // });\n          }\n        }\n      });\n    } else {\n      dispatch({\n        type: SET_USER,\n        payload: user\n      });\n    }\n  };\n}; // export const updateUserMeta = userId => {\n//   // console.log(\"get user id \", { userId });\n//   return dispatch => {\n//     console.log({\n//       dispatch\n//     });\n//   };\n// };\n// export const getUserMetaNoCart = user => {\n//   // console.log({\n//   //   user\n//   // });\n//   return dispatch => {\n//     console.log(\"user meta start fetching\");\n//     getSingleUserApi(user)\n//       .then(res => res.json())\n//       .then(res => {\n//         if (res.user && res.user._id) {\n//           console.log(\"user meta found\", res);\n//           dispatch({\n//             type: SET_USER,\n//             payload: {\n//               ...res.user.userid,\n//               userMetaId: res.user._id,\n//               userMetaObj: res.user\n//             }\n//           });\n//         }\n//       });\n//   };\n// };\n// export const getUserMeta = (user, cart = null) => dispatch => {\n//   getSingleUserApi(user)\n//     .then(res => res.json())\n//     .then(res => {\n//       if (res.user && res.user._id) {\n//         dispatch({\n//           type: SET_USER,\n//           payload: {\n//             ...res.user.userid,\n//             userMetaId: res.user._id,\n//             userMetaObj: res.user\n//           }\n//         });\n//       }\n//       if (cart && res.user && res.user._id) {\n//         setCartApi({\n//           usermetaid: res.user._id,\n//           cart: cart\n//         });\n//       } else if (res.user && res.user.cart) {\n//         dispatch({\n//           type: SET_CART,\n//           payload: res.user.cart\n//         });\n//       }\n//     });\n// };\n\nexport var unsetUser = function unsetUser() {\n  return {\n    type: UNSET_USER,\n    payload: {}\n  };\n};","map":{"version":3,"sources":["/Users/akshataggarwal/Documents/Coding Files/webd projects/missvalentine-front/redux/actions/user.js"],"names":["SET_USER","UNSET_USER","getUserDetails","setUser","user","cart","dispatch","_id","console","log","then","res","data","status","payload","userid","userMetaId","userMetaObj","userObj","type","setCartApi","usermetaid","unsetUser"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,QAArC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD;AAAA,MAAOC,IAAP,uEAAc,IAAd;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AACxD;AACA,QAAIF,IAAI,CAACG,GAAT,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY;AACVL,QAAAA,IAAI,EAAJA;AADU,OAAZ;AAGAF,MAAAA,cAAc,CAACE,IAAI,CAACG,GAAN,CAAd,CACGG,IADH,CACQ,UAAAC,GAAG,EAAI;AACXH,QAAAA,OAAO,CAACC,GAAR,CAAY;AAAEE,UAAAA,GAAG,EAAHA;AAAF,SAAZ;;AAEA,YAAIA,GAAG,CAACC,IAAJ,CAASC,MAAT,IAAmBF,GAAG,CAACC,IAAJ,CAASR,IAAhC,EAAsC;AACtC;AACA,cAAMU,OAAO,mCACRH,GAAG,CAACC,IAAJ,CAASR,IAAT,CAAcW,MADN;AAEXC,YAAAA,UAAU,EAAEL,GAAG,CAACC,IAAJ,CAASR,IAAT,CAAcG,GAFf;AAGXU,YAAAA,WAAW,EAAEN,GAAG,CAACC,IAAJ,CAASR,IAHX;AAIXc,YAAAA,OAAO,EAAEP,GAAG,CAACC,IAAJ,CAASR,IAAT,CAAcW;AAJZ,YAAb;;AAMAT,UAAAA,QAAQ,CAAC;AACLa,YAAAA,IAAI,EAAEnB,QADD;AAELc,YAAAA,OAAO,EAAPA;AAFK,WAAD,CAAR;;AAIE,cAAIT,IAAJ,EAAU;AACRe,YAAAA,UAAU,CAAC;AACTC,cAAAA,UAAU,EAAEV,GAAG,CAACC,IAAJ,CAASR,IAAT,CAAcG,GADjB;AAETF,cAAAA,IAAI,EAAEA;AAFG,aAAD,CAAV;AAID,WALD,MAKO,IAAIM,GAAG,CAACC,IAAJ,CAASR,IAAT,CAAcC,IAAlB,EAAwB,CAC7B;AACA;AACA;AACA;AACD;AACF;AACF,OA5BH;AA6BD,KAjCD,MAiCK;AACHC,MAAAA,QAAQ,CAAC;AACPa,QAAAA,IAAI,EAAEnB,QADC;AAEPc,QAAAA,OAAO,EAAEV;AAFF,OAAD,CAAR;AAID;AACF,GAzCsB;AAAA,CAAhB,C,CA0CP;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMkB,SAAS,GAAG,SAAZA,SAAY;AAAA,SAAO;AAC9BH,IAAAA,IAAI,EAAElB,UADwB;AAE9Ba,IAAAA,OAAO,EAAE;AAFqB,GAAP;AAAA,CAAlB","sourcesContent":["import { SET_USER, UNSET_USER } from \"./type\";\nimport { getUserDetails } from \"../../services/apis/user\";\n\nexport const setUser = (user, cart = null) => dispatch => {\n  // console.log({ user });\n  if (user._id) {\n    console.log({\n      user\n    })\n    getUserDetails(user._id)\n      .then(res => {\n        console.log({ res });\n\n        if (res.data.status && res.data.user) {\n        //   dispatch(getUserMeta(res.data.user._id, cart));\n        const payload =  {\n          ...res.data.user.userid,\n          userMetaId: res.data.user._id,\n          userMetaObj: res.data.user,\n          userObj: res.data.user.userid,\n        }\n        dispatch({\n            type: SET_USER,\n            payload\n        })\n          if (cart) {\n            setCartApi({\n              usermetaid: res.data.user._id,\n              cart: cart\n            });\n          } else if (res.data.user.cart) {\n            // dispatch({\n            //   type: SET_CART,\n            //   payload: res.data.user.cart\n            // });\n          }\n        }\n      });\n  }else{\n    dispatch({\n      type: SET_USER,\n      payload: user\n    });\n  }\n};\n// export const updateUserMeta = userId => {\n//   // console.log(\"get user id \", { userId });\n\n//   return dispatch => {\n//     console.log({\n//       dispatch\n//     });\n//   };\n// };\n// export const getUserMetaNoCart = user => {\n//   // console.log({\n//   //   user\n//   // });\n//   return dispatch => {\n//     console.log(\"user meta start fetching\");\n//     getSingleUserApi(user)\n//       .then(res => res.json())\n//       .then(res => {\n//         if (res.user && res.user._id) {\n//           console.log(\"user meta found\", res);\n//           dispatch({\n//             type: SET_USER,\n//             payload: {\n//               ...res.user.userid,\n//               userMetaId: res.user._id,\n//               userMetaObj: res.user\n//             }\n//           });\n//         }\n//       });\n//   };\n// };\n// export const getUserMeta = (user, cart = null) => dispatch => {\n//   getSingleUserApi(user)\n//     .then(res => res.json())\n//     .then(res => {\n//       if (res.user && res.user._id) {\n//         dispatch({\n//           type: SET_USER,\n//           payload: {\n//             ...res.user.userid,\n//             userMetaId: res.user._id,\n//             userMetaObj: res.user\n//           }\n//         });\n//       }\n//       if (cart && res.user && res.user._id) {\n//         setCartApi({\n//           usermetaid: res.user._id,\n//           cart: cart\n//         });\n//       } else if (res.user && res.user.cart) {\n//         dispatch({\n//           type: SET_CART,\n//           payload: res.user.cart\n//         });\n//       }\n//     });\n// };\nexport const unsetUser = () => ({\n  type: UNSET_USER,\n  payload: {}\n});\n"]},"metadata":{},"sourceType":"module"}