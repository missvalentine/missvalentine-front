{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport dynamic from 'next/dynamic';\nimport { connect } from \"react-redux\";\nconst Input = dynamic(() => import(\"../form-components/Input\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../form-components/Input\")],\n    modules: [\"../form-components/Input\"]\n  }\n});\nconst Checkbox = dynamic(() => import(\"../form-components/Checkbox\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../form-components/Checkbox\")],\n    modules: [\"../form-components/Checkbox\"]\n  }\n});\nconst Button = dynamic(() => import(\"../form-components/Button\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../form-components/Button\")],\n    modules: [\"../form-components/Button\"]\n  }\n});\nimport { showRegBar, drawerToDisplay } from \"../../redux/actions/drawers\";\nimport { getAddress } from \"../../redux/actions/address\";\nconst TitleList = dynamic(() => import(\"../TItleList\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../TItleList\")],\n    modules: [\"../TItleList\"]\n  }\n});\nimport { Form, Radio } from \"antd\";\nimport PlacesAutocomplete from \"react-places-autocomplete\";\nimport { searchAddress } from \"../../services/api\";\nimport regex from \"../../services/helpers/regex\";\nimport { getCountryCode } from \"../../services/helpers/misc\";\nimport reactComponentDebounce from \"react-component-debounce\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nimport projectSettings from \"../../constants/projectSettings\";\nimport { getShippingRates } from \"../../services/api\";\nimport PhoneInput from \"../address/form/PhoneInput\";\nimport { getItemsHeightWidth, filterShippingRates } from \"../../services/helpers/cart\";\nimport msgStrings from \"../../constants/msgStrings\";\n\nconst suffix = __jsx(SearchOutlined, {\n  style: {\n    color: \"#000000\"\n  }\n});\n\nimport { Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { isValidPhoneNumber } from 'react-phone-number-input';\n\nconst antIcon = __jsx(LoadingOutlined, {\n  style: {\n    fontSize: 24,\n    color: \"white\"\n  },\n  spin: true\n});\n\nconst DebounceInput = reactComponentDebounce({\n  valuePropName: \"value\",\n  triggerMs: 1000\n})(Input);\n\nclass CheckoutInfo extends React.Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"generateAddStr\", address => {\n      const {\n        country,\n        state,\n        city,\n        other,\n        zip\n      } = address;\n      return `${city}, ${state}, ${country}, ${zip}`.trim();\n    });\n\n    _defineProperty(this, \"handleChange\", (addressStr, key = \"address\") => {\n      this.changeAddress({\n        addressStr\n      }, key);\n    });\n\n    _defineProperty(this, \"handleSelect\", (addressStr, key = \"address\") => {\n      const arr = addressStr.split(\",\");\n      const size = arr.length;\n      const country = arr[size - 1].trim();\n      const state = arr[size - 2];\n      const city = arr[size - 3];\n      const other = arr[0];\n      const address = {\n        addressStr: addressStr && addressStr.trim(),\n        country: country && country.trim(),\n        state: state && state.trim(),\n        city: city && city.trim(),\n        other: other && other.trim(),\n        zip: \"\"\n      };\n      searchAddress(addressStr).then(res => {\n        if (res.data && res.data.results) {\n          const {\n            results\n          } = res.data;\n          const addStr = results[0].address_components;\n          const zipObj = addStr.find(el => el.types && el.types.includes(\"postal_code\"));\n\n          if (zipObj && zipObj.short_name) {\n            const zip = zipObj.short_name;\n            this.changeAddress(_objectSpread(_objectSpread({}, address), {}, {\n              zip: zip.trim()\n            }), key);\n          } else {\n            this.changeAddress(_objectSpread({}, address), key);\n          }\n        } else {\n          this.changeAddress(_objectSpread({}, address), key);\n        }\n      }).catch(err => {\n        this.changeAddress(_objectSpread({}, address), key);\n      });\n    });\n\n    _defineProperty(this, \"onSubmit\", e => {\n      e.preventDefault();\n      this.setState({\n        loader: true\n      }); // console.log(\"here\");\n\n      const {\n        onSubmit,\n        cart\n      } = this.props;\n      const {\n        address,\n        addressShip,\n        sameShipping,\n        phone\n      } = this.state;\n      console.log(address, addressShip);\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          const {\n            country,\n            firstname,\n            lastname,\n            firstname_ship,\n            lastname_ship\n          } = values; //const aa = getCountryCode(country);\n\n          if (typeof onSubmit === \"function\") {\n            const dimension = getItemsHeightWidth(cart.items);\n            let addr = sameShipping ? address : addressShip;\n            console.log(addr);\n            const {\n              city,\n              state,\n              country,\n              zip,\n              addressStr\n            } = addr;\n            const {\n              firstname: fname,\n              lastname: lname\n            } = addr;\n            const data = {\n              city,\n              state,\n              zip,\n              country,\n              street: addressStr,\n              name: `${sameShipping ? fname ? fname : firstname : firstname_ship} ${sameShipping ? lname ? lname : lastname : lastname_ship} `,\n              phone,\n              length: dimension.length,\n              width: dimension.width,\n              height: dimension.height,\n              weight: dimension.weight\n            };\n            console.log(data);\n            getShippingRates(data).then(res => {\n              if (res.data.status) {\n                this.setState({\n                  dataFetched: true,\n                  isCustomRates: false\n                });\n                console.log(res.data);\n                const errMessages = res.data.data.messages;\n                const shippingWrongZip = errMessages && errMessages.find(el => el.message === \"to postal code: zipcode format must be zzzzz[pppp]\");\n\n                if (errMessages && shippingWrongZip && shippingWrongZip.message === \"to postal code: zipcode format must be zzzzz[pppp]\") {\n                  let msg = \"\";\n\n                  switch (shippingWrongZip.message) {\n                    case \"to postal code: zipcode format must be zzzzz[pppp]\":\n                      msg = msgStrings.INVALID_ZIP;\n                      break;\n\n                    default:\n                      msg = errMessages[0].message;\n                  }\n\n                  this.setState({\n                    shippingErrMsg: msg\n                  });\n                } else {\n                  onSubmit(e, values, _objectSpread(_objectSpread({}, address), {}, {\n                    firstname,\n                    lastname,\n                    addressStr: address.addressStr.trim() === \"\" ? this.generateAddStr(address) : address.addressStr\n                  }), _objectSpread(_objectSpread({}, addressShip), {}, {\n                    firstname: firstname_ship,\n                    lastname: lastname_ship,\n                    addressStr: addressShip.addressStr.trim() === \"\" ? this.generateAddStr(addressShip) : addressShip.addressStr\n                  }));\n                  this.setState({\n                    loader: false\n                  });\n                }\n              }\n            }).catch(console.log); //   getShippingRates()\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"onSameShippingChange\", e => {\n      this.setState({\n        sameShipping: e.target.checked\n      });\n    });\n\n    _defineProperty(this, \"changeAddress\", (_ref, key = \"address\", search = true) => {\n      let address = Object.assign({}, _ref);\n      const {\n        city,\n        state,\n        country,\n        zip\n      } = address;\n\n      if (key === \"address\") {\n        const {\n          address\n        } = this.state;\n        this.props.form.setFieldsValue({\n          city: city,\n          state: state,\n          country: country,\n          zip: zip\n        });\n      } else if (key === \"addressShip\") {\n        const {\n          addressShip: address\n        } = this.state;\n        this.props.form.setFieldsValue({\n          \"city-ship\": city,\n          \"state-ship\": state,\n          \"country-ship\": country,\n          \"zip-ship\": zip\n        });\n      }\n\n      if (search) {\n        this.setState(prevState => ({\n          [key]: _objectSpread(_objectSpread({}, prevState[key]), address)\n        }));\n      } else {\n        this.setState({\n          [key]: _objectSpread({}, address)\n        });\n      }\n    });\n\n    _defineProperty(this, \"returnAddressStr\", address => {\n      const {\n        country,\n        state,\n        city,\n        other,\n        zip,\n        addressStr\n      } = address;\n\n      if (!addressStr) {\n        const addressLine = `${city}, ${state}, ${country}, ${zip}`.trim();\n        const trimmedLine = addressLine.trim().replace(/^,/g, \"\").trim().replace(/^,/g, \"\").trim().replace(/^,/g, \"\").trim();\n        return trimmedLine;\n      }\n\n      return addressStr;\n    });\n\n    this.state = {\n      sameShipping: true,\n      address: {\n        addressStr: \"\",\n        country: \"\",\n        state: \"\",\n        city: \"\",\n        other: \"\",\n        zip: \"\"\n      },\n      addressShip: {\n        addressStr: \"\",\n        country: \"\",\n        state: \"\",\n        city: \"\",\n        other: \"\",\n        zip: \"\"\n      },\n      phone: \"\",\n      phoneShip: \"\",\n      newAddress: false,\n      shippingErrMsg: \"\",\n      loader: false,\n      login_loader: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      form,\n      oldValues\n    } = this.props; // console.log(oldValues);\n\n    if (oldValues) {\n      form.setFieldsValue(_objectSpread({}, oldValues));\n      const {\n        city,\n        state,\n        country,\n        zip,\n        \"city-ship\": cityShip,\n        \"state-ship\": stateShip,\n        \"country-ship\": countryShip,\n        \"zip-ship\": zipShip\n      } = oldValues;\n      this.setState(prevState => ({\n        address: _objectSpread(_objectSpread({}, prevState.address), {}, {\n          city: city || prevState.address.city,\n          state: state || prevState.address.state,\n          country: country || prevState.address.country,\n          zip: zip || prevState.address.zip,\n          addressStr: prevState.address.addressStr\n        }),\n        addressShip: _objectSpread(_objectSpread({}, prevState.addressShip), {}, {\n          city: cityShip || prevState.addressShip.city,\n          state: stateShip || prevState.addressShip.state,\n          country: countryShip || prevState.addressShip.country,\n          zip: zipShip || prevState.addressShip.zip,\n          addressStr: prevState.addressShip.addressStr\n        })\n      }));\n    } // console.log({\n    //     props: this.props\n    // })\n\n\n    setTimeout(() => {\n      if (this.props.user._id) {\n        this.props.getAddress(this.props.user._id);\n      }\n    }, 100);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.addresses !== this.props.addresses) {\n      const {\n        addresses,\n        form\n      } = this.props;\n\n      if (addresses.length > 0) {\n        const address = addresses.find(el => el.isDefault) || addresses[0];\n\n        if (address) {\n          form.setFieldsValue({\n            email: address.email\n          });\n        }\n\n        this.setState({\n          login_loader: false\n        });\n      }\n    }\n  }\n\n  render() {\n    const componentClass = \"c-checkout-info\";\n    const {\n      showRegBar,\n      drawerToDisplay,\n      user,\n      form,\n      addresses\n    } = this.props;\n    console.log(this.state.shippingErrMsg);\n    const {\n      sameShipping,\n      address,\n      addressShip,\n      loader,\n      login_loader\n    } = this.state;\n    const {\n      getFieldDecorator,\n      getFieldValue,\n      setFieldsValue,\n      isFieldTouched,\n      getFieldsValue\n    } = form;\n    const isLogin = user._id ? true : false;\n\n    if (isLogin && login_loader) {\n      window.location.reload();\n    }\n\n    return __jsx(\"div\", {\n      className: componentClass\n    }, __jsx(Form, {\n      onSubmit: this.onSubmit\n    }, __jsx(TitleList, {\n      versions: [\"sm-border\"],\n      parentClass: componentClass,\n      title: \"Contact Information\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"email\", {\n      rules: [{\n        required: true,\n        message: \"Please input your E-mail\"\n      }, {\n        pattern: regex.email,\n        message: \"Please enter a valid E-mail!\"\n      }],\n      initialValue: user.email\n    })(__jsx(DebounceInput, {\n      label: \"E-mail\"\n    }))), !isLogin && __jsx(\"div\", {\n      className: componentClass + \"__login-wrapper--check\"\n    }, \"Already have an account?\", \" \", __jsx(\"span\", {\n      onClick: () => {\n        drawerToDisplay(\"login\");\n        showRegBar();\n        this.setState({\n          login_loader: true\n        });\n      },\n      className: componentClass + \"__login-btn cursor-pointer\"\n    }, \"SIGN IN\"))), __jsx(TitleList, {\n      versions: [\"sm-border\"],\n      parentClass: componentClass,\n      title: \"Billing Information\"\n    }, isLogin && addresses && addresses.length > 0 && __jsx(\"div\", {\n      className: componentClass + \"__login-wrapper\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"addressSelect\", {\n      initialValue: addresses.find(el => el.isDefault) || addresses[0]\n    })(__jsx(Radio.Group, {\n      className: \"underline\",\n      onChange: e => {\n        const {\n          value\n        } = e.target;\n\n        if (value !== null) {\n          console.log(value);\n          setFieldsValue({\n            newAddress: false,\n            email: value.email\n          });\n          this.setState({\n            address: value,\n            firstname: value.firstname,\n            lastname: value.lastname,\n            phone: value.phone,\n            shippingErrMsg: \"\"\n          });\n        }\n      }\n    }, addresses.map((el, i) => __jsx(Radio, {\n      key: i,\n      value: el\n    }, this.returnAddressStr(el)))))), __jsx(Form.Item, null, getFieldDecorator(\"newAddress\", {\n      valuePropName: \"checked\",\n      initialValue: false,\n      onChange: e => {\n        const {\n          checked\n        } = e.target;\n        setFieldsValue({\n          addressSelect: checked ? null : addresses.find(el => el.isDefault) || addresses[0]\n        });\n      }\n    })(__jsx(Checkbox, {\n      versions: [\"add\"]\n    }, \"+ \\xA0Add Address\")))), (!isLogin || getFieldValue(\"newAddress\") || !(addresses && addresses.length)) && __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"container-fluid p-0\"\n    }, __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"firstname\", {\n      rules: [{\n        required: true,\n        message: \"Please input first name!\"\n      }, {\n        pattern: regex.name,\n        message: \"Please enter a valid name!\"\n      }, {\n        max: 12,\n        message: \"Please enter a valid name!\"\n      }]\n    })(__jsx(DebounceInput, {\n      parentClass: \"c-address-form\",\n      name: \"firstname\",\n      label: \"First Name\"\n    })))), __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"lastname\", {\n      rules: [{\n        required: true,\n        message: \"Please input last name!\"\n      }, {\n        pattern: regex.name,\n        message: \"Please enter a valid name!\"\n      }, {\n        max: 12,\n        message: \"Please enter a valid name!\"\n      }]\n    })(__jsx(DebounceInput, {\n      parentClass: \"c-address-form\",\n      name: \"lastname\",\n      label: \"Last Name\"\n    })))), __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"phone\", {\n      rules: [{\n        required: true,\n        message: \"Please input phone number!\"\n      }, {\n        validator: async (...value) => {\n          if (isValidPhoneNumber(\"+\" + value[1])) {\n            return Promise.resolve();\n          } else {\n            return Promise.reject('Invalid Phone Number!');\n          }\n        }\n      }]\n    })(__jsx(DebounceInput, {\n      type: \"number\",\n      parentClass: \"c-address-form\",\n      name: \"number\",\n      label: \"Phone Number (Please use country code ex: +91 India)\"\n    })))), __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(PlacesAutocomplete, {\n      value: address.addressStr,\n      onChange: e => {\n        this.handleChange(e, \"address\");\n      },\n      onSelect: e => {\n        this.handleSelect(e, \"address\");\n      }\n    }, ({\n      getInputProps,\n      suggestions,\n      getSuggestionItemProps,\n      loading\n    }) => __jsx(\"div\", null, __jsx(Input, _extends({}, getInputProps({\n      placeholder: \"Search Your Address ...\",\n      className: \"location-search-input\"\n    }), {\n      parentClass: \"c-address-form\",\n      label: \"Search Your Address ...\",\n      suffix: suffix\n    })), __jsx(\"div\", {\n      className: \"autocomplete-dropdown-container\"\n    }, loading && __jsx(\"div\", null, \"Loading...\"), suggestions.map(suggestion => {\n      const className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\"; // inline style for demonstration purpose\n\n      const style = suggestion.active ? {\n        backgroundColor: \"#fafafa\",\n        cursor: \"pointer\"\n      } : {\n        backgroundColor: \"#ffffff\",\n        cursor: \"pointer\"\n      };\n      return __jsx(\"div\", getSuggestionItemProps(suggestion, {\n        className,\n        style\n      }), __jsx(\"span\", null, suggestion.description));\n    }))))), __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"city\", {\n      rules: [{\n        required: true,\n        message: \"Please input your city!\"\n      }],\n      initialValue: address.city\n    })(__jsx(DebounceInput, {\n      onChange: (key, value) => {\n        const city = key;\n        let container = document.getElementsByClassName(\"c-input c-input--default c-address-form__input\"); //  let input = container.getElementsByTagName('input')\n        // container[3].value=\"\"\n\n        container[3].firstChild.value = \"\";\n        this.changeAddress(_objectSpread(_objectSpread({}, address), {}, {\n          city\n        }), \"address\");\n      },\n      name: \"city\",\n      parentClass: \"c-address-form\",\n      label: \"City\"\n    })))), __jsx(\"div\", {\n      className: \"col-12\"\n    }), __jsx(\"div\", {\n      className: \"col-md-4\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"country\", {\n      rules: [{\n        required: true,\n        message: \"Please input your Country!\"\n      }],\n      initialValue: address.country\n    })(__jsx(DebounceInput, {\n      onChange: (key, value) => {\n        const country = key;\n        this.changeAddress(_objectSpread(_objectSpread({}, address), {}, {\n          country\n        }), \"address\");\n      },\n      parentClass: \"c-address-form\",\n      name: \"country\",\n      label: \"Country\"\n    })))), __jsx(\"div\", {\n      className: \"col-md-4\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"state\", {\n      rules: [{\n        required: true,\n        message: \"Please input your state!\"\n      }],\n      initialValue: address.state\n    })(__jsx(DebounceInput, {\n      onChange: (key, value) => {\n        const state = key;\n        this.changeAddress(_objectSpread(_objectSpread({}, address), {}, {\n          state\n        }), \"address\");\n      },\n      parentClass: \"c-address-form\",\n      name: \"state\",\n      label: \"state\"\n    })))), __jsx(\"div\", {\n      className: \"col-md-4\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"zip\", {\n      rules: [{\n        required: true,\n        message: \"Please input your ZIP code!\"\n      }, // {pattern: /^\\d{5}$|^\\d{5}-\\d{4}$/, message:\"Please enter a valid zipcode!\"},\n      {\n        max: 10,\n        message: \"zip cannot be longer than 10 characters\"\n      }, // ({ getFieldValue }) => ({\n      //   validator(rule, value) {\n      //     console.log(rule,value);\n      //     if (!value || getFieldValue('zip') === value) {\n      //       console.log(value);\n      //       return Promise.resolve();\n      //     }\n      //     // return Promise.reject('The two passwords that you entered do not match!');\n      //   },\n      // }),\n      {\n        validator: async (...value) => {\n          const data = await searchAddress(value[1]); //console.log(data)\n\n          const city = this.props.form.getFieldValue('city');\n          const state = this.props.form.getFieldValue('state');\n          const zip_city = data.data.results[0].address_components[3] ? data.data.results[0].address_components[3].long_name : data.data.results[0].address_components[1].long_name;\n          const zip_state_short = data.data.results[0].address_components[4] ? data.data.results[0].address_components[4].short_name : data.data.results[0].address_components[2].short_name;\n          const zip_city_short = data.data.results[0].address_components[3] ? data.data.results[0].address_components[3].short_name : data.data.results[0].address_components[1].short_name;\n          const zip_state = data.data.results[0].address_components[4] ? data.data.results[0].address_components[4].long_name : data.data.results[0].address_components[2].long_name;\n          console.log(data, zip_city, zip_state);\n\n          if (city == zip_city || state == zip_state || city == zip_state || state == zip_city || city == zip_city_short || state == zip_state_short || city == zip_state_short || state == zip_city_short) {\n            return Promise.resolve();\n          } else {\n            return Promise.reject('Invalid Zip Code!');\n          }\n        }\n      }],\n      initialValue: address.zip\n    })(__jsx(DebounceInput, {\n      type: \"number\",\n      onChange: (key, value) => {\n        const zip = key;\n        this.changeAddress(_objectSpread(_objectSpread({}, address), {}, {\n          zip\n        }), \"address\");\n      },\n      name: \"zipcode\",\n      parentClass: \"c-address-form\",\n      label: \"ZIP code\"\n    })))), isLogin && __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"saveaddress\", {\n      valuePropName: \"checked\",\n      initialValue: true\n    })(__jsx(Checkbox, {\n      versions: [\"dark\"]\n    }, \"Save this information for next time\"))))))), __jsx(Form.Item, null, getFieldDecorator(\"sameShipping\", {\n      valuePropName: \"checked\",\n      initialValue: true,\n      setFieldsValue: sameShipping\n    })(__jsx(Checkbox, {\n      onChange: this.onSameShippingChange,\n      versions: [\"light\"]\n    }, \"Ship to the same address\")))), !sameShipping && __jsx(TitleList, {\n      versions: [\"sm-border\"],\n      parentClass: componentClass,\n      title: \"Shipping Information\"\n    }, __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-12\"\n    }, isLogin && addresses && addresses.length > 0 && __jsx(\"div\", {\n      className: componentClass + \"__login-wrapper\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"addressSelect_ship\", {\n      initialValue: addresses.find(el => el.isDefault) || addresses[0]\n    })(__jsx(Radio.Group, {\n      className: \"bordered\",\n      onChange: e => {\n        const {\n          value\n        } = e.target;\n\n        if (value !== null) {\n          setFieldsValue({\n            newAddress_ship: false\n          });\n          this.setState({\n            addressShip: value,\n            firstname: value.firstname,\n            lastname: value.lastname,\n            phone: value.phone,\n            shippingErrMsg: \"\"\n          });\n        }\n      }\n    }, addresses.map((el, i) => __jsx(Radio, {\n      className: \"bordered\",\n      key: i,\n      value: el\n    }, this.returnAddressStr(el)))))), __jsx(Form.Item, null, getFieldDecorator(\"newAddress_ship\", {\n      valuePropName: \"checked\",\n      initialValue: false,\n      onChange: e => {\n        const {\n          checked\n        } = e.target;\n        setFieldsValue({\n          addressSelect_ship: checked ? null : addresses.find(el => el.isDefault) || addresses[0]\n        });\n      }\n    })(__jsx(Checkbox, {\n      versions: [\"dark\"]\n    }, \"add new address\"))))), (!isLogin || getFieldValue(\"newAddress_ship\")) && __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"firstname_ship\", {\n      rules: [{\n        required: true,\n        message: \"Please input first name!\"\n      }, {\n        pattern: regex.name,\n        message: \"Please enter a valid name!\"\n      }, {\n        max: 12,\n        message: \"Please enter a valid name!\"\n      }]\n    })(__jsx(DebounceInput, {\n      parentClass: \"c-address-form\",\n      name: \"firstname_ship\",\n      label: \"First Name\"\n    })))), __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"lastname_ship\", {\n      rules: [{\n        required: true,\n        message: \"Please input last name!\"\n      }, {\n        pattern: regex.name,\n        message: \"Please enter a valid name!\"\n      }, {\n        max: 12,\n        message: \"Please enter a valid name!\"\n      }]\n    })(__jsx(DebounceInput, {\n      parentClass: \"c-address-form\",\n      name: \"lastname_ship\",\n      label: \"Last Name\"\n    })))), __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"phone_ship\", {\n      rules: [{\n        required: true,\n        message: \"Please input phone number!\"\n      }, {\n        validator: async (...value) => {\n          if (isValidPhoneNumber(\"+\" + value[1])) {\n            return Promise.resolve();\n          } else {\n            return Promise.reject('Invalid Phone Number!');\n          }\n        }\n      }]\n    })(__jsx(DebounceInput, {\n      type: \"number\",\n      parentClass: \"c-address-form\",\n      name: \"phonenumber_ship\",\n      label: \"Phone Number (Please use country code ex: +91 India)\"\n    })))), __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(PlacesAutocomplete, {\n      value: addressShip.addressStr,\n      onChange: e => {\n        this.handleChange(e, \"addressShip\");\n      },\n      onSelect: e => {\n        this.handleSelect(e, \"addressShip\");\n      }\n    }, ({\n      getInputProps,\n      suggestions,\n      getSuggestionItemProps,\n      loading\n    }) => __jsx(\"div\", null, __jsx(Input, _extends({}, getInputProps({\n      placeholder: \"Search Places ...\",\n      className: \"location-search-input\"\n    }), {\n      parentClass: \"c-address-form\",\n      label: \"Search Places ...\",\n      suffix: suffix\n    })), __jsx(\"div\", {\n      className: \"autocomplete-dropdown-container\"\n    }, loading && __jsx(\"div\", null, \"Loading...\"), suggestions.map(suggestion => {\n      const className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\"; // inline style for demonstration purpose\n\n      const style = suggestion.active ? {\n        backgroundColor: \"#fafafa\",\n        cursor: \"pointer\"\n      } : {\n        backgroundColor: \"#ffffff\",\n        cursor: \"pointer\"\n      };\n      return __jsx(\"div\", getSuggestionItemProps(suggestion, {\n        className,\n        style\n      }), __jsx(\"span\", null, suggestion.description));\n    }))))), __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"city-ship\", {\n      rules: [{\n        required: true,\n        message: \"Please input your city!\"\n      }]\n    })(__jsx(DebounceInput, {\n      onChange: (key, value) => {\n        const city = key;\n        this.changeAddress(_objectSpread(_objectSpread({}, addressShip), {}, {\n          city\n        }), \"addressShip\");\n      },\n      parentClass: \"c-address-form\",\n      name: \"ship-city\",\n      label: \"City\"\n    })))), __jsx(\"div\", {\n      className: \"col-12\"\n    }), __jsx(\"div\", {\n      className: \"col-md-4\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"country-ship\", {\n      rules: [{\n        required: true,\n        message: \"Please input your Country!\"\n      }]\n    })(__jsx(DebounceInput, {\n      onChange: (key, value) => {\n        const country = key;\n        this.changeAddress(_objectSpread(_objectSpread({}, addressShip), {}, {\n          country\n        }), \"addressShip\");\n      },\n      parentClass: \"c-address-form\",\n      name: \"ship-country\",\n      label: \"Country\"\n    })))), __jsx(\"div\", {\n      className: \"col-md-4\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"state-ship\", {\n      rules: [{\n        required: true,\n        message: \"Please input your state!\"\n      }]\n    })(__jsx(DebounceInput, {\n      onChange: (key, value) => {\n        const state = key;\n        this.changeAddress(_objectSpread(_objectSpread({}, addressShip), {}, {\n          state\n        }), \"addressShip\");\n      },\n      parentClass: \"c-address-form\",\n      name: \"ship-state\",\n      label: \"state\"\n    })))), __jsx(\"div\", {\n      className: \"col-md-4\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"zip-ship\", {\n      rules: [{\n        required: true,\n        message: \"Please input your ZIP code!\"\n      }, {\n        max: 8,\n        message: \"Please input your ZIP code!\"\n      }, {\n        validator: async (...value) => {\n          const data = await searchAddress(value[1]);\n          const city = this.props.form.getFieldValue('city-ship');\n          const state = this.props.form.getFieldValue('state-ship');\n          const zip_city = data.data.results[0].address_components[3].long_name;\n          const zip_state = data.data.results[0].address_components[4].long_name;\n          console.log(data, zip_city, zip_state);\n\n          if (city == zip_city || state == zip_state) {\n            return Promise.resolve();\n          } else {\n            return Promise.reject('Invalid Zip Code!');\n          }\n        }\n      }]\n    })(__jsx(DebounceInput, {\n      onChange: (key, value) => {\n        const zip = key;\n        this.changeAddress(_objectSpread(_objectSpread({}, addressShip), {}, {\n          zip\n        }), \"addressShip\");\n      },\n      parentClass: \"c-address-form\",\n      name: \"ship-zip\",\n      label: \"ZIP code\"\n    })))), isLogin && __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(Form.Item, null, getFieldDecorator(\"saveaddress_ship\", {\n      valuePropName: \"checked\",\n      initialValue: true\n    })(__jsx(Checkbox, {\n      versions: [\"dark\"]\n    }, \"Save this information for next time\"))))))), this.state.shippingErrMsg && __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      }\n    }, this.state.shippingErrMsg), __jsx(\"div\", {\n      className: \"row\",\n      style: {\n        justifyContent: \"center\"\n      }\n    }, __jsx(Button, {\n      parentClass: \"c-checkout\",\n      theme: \"dark\"\n    }, \"Continue \", loader && __jsx(Spin, {\n      indicator: antIcon\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  user: state.user,\n  addresses: state.address && state.address.address || [],\n  state,\n  cart: state.cart\n});\n\nconst mapActionToProps = {\n  showRegBar,\n  getAddress,\n  drawerToDisplay\n};\nexport default connect(mapStateToProps, mapActionToProps)(Form.create({\n  name: \"checkoutInfo\"\n})(CheckoutInfo));","map":null,"metadata":{},"sourceType":"module"}