{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport _ from \"lodash\";\nimport { expireMonthInvalid, expireYearInvalid, cardNumberInvalid, cardDetailsNotMAtch, shippingExtraRate, defaultOrderStatus, defaultStatusInOrder, shippingStaticRate } from \"../../constants/constantMessage\"; // import { referralPresent } from \"../../components\";\n\nconst referralPresent = 25;\nimport { combineLoop } from \"box-dimension-calculator\"; // import { variablePriceSet } from \"./cartHealpers\";\n\nexport default class BasicFunction {\n  constructor() {\n    _defineProperty(this, \"removeEmpty\", obj => {\n      Object.keys(obj).forEach(key => obj[key] === null && delete obj[key]);\n    });\n\n    _defineProperty(this, \"getSelectedAttributes\", item => {\n      if (item.producttype === \"variable\") return item.attributes.map(el => ({\n        [el.names]: item[el.names].value\n      })).filter(el => el).reduce((a, b) => _objectSpread(_objectSpread({}, a), b), {});\n      return null;\n    });\n\n    _defineProperty(this, \"calculatePrice\", item => {\n      const {\n        saleprice,\n        regularprice,\n        subscribedDiscountPersent,\n        qty: {\n          value\n        },\n        subscribed\n      } = item;\n\n      if (subscribed) {\n        if (saleprice) {\n          const price = parseFloat(saleprice) * parseFloat(value) / parseFloat(subscribedDiscountPersent);\n          return price;\n        } else if (regularprice) {\n          const price = parseFloat(regularprice) * parseFloat(value) / parseFloat(subscribedDiscountPersent);\n          return price;\n        }\n\n        return 0;\n      }\n    });\n\n    _defineProperty(this, \"convertCardErrors\", error => {\n      switch (error) {\n        case \"Your card number is incorrect.\":\n          return cardNumberInvalid;\n\n        case \"Missing required param: card[exp_year].\":\n          return expireYearInvalid;\n\n        case \"Could not find payment information.\":\n          return cardDetailsNotMAtch;\n\n        case \"Your card's expiration year is invalid.\":\n          return expireYearInvalid;\n\n        case \"Your card's expiration month is invalid.\":\n          return expireMonthInvalid;\n\n        default:\n          return expireMonthInvalid;\n      }\n    });\n\n    _defineProperty(this, \"stripeCheckValidation\", paymentDetail => {\n      const {\n        cvNumber,\n        expDate,\n        cardNumber\n      } = paymentDetail;\n\n      if (cvNumber && cvNumber.length <= 2) {\n        return false;\n      }\n\n      if (expDate && expDate.length <= 4) {\n        return false;\n      }\n\n      if (cardNumber && cardNumber.length <= 18) {\n        return false;\n      }\n\n      return true;\n    });\n\n    _defineProperty(this, \"getShippingRates\", rateArr => {\n      if (rateArr.length > 0) {\n        const filteredRates = _.uniqBy(rateArr, function (e) {\n          return e.service;\n        });\n\n        const smallSorted = filteredRates.sort((a, b) => parseFloat(a.rate || 0) - parseFloat(b.rate || 0));\n        const Smallest = smallSorted[0];\n        const Smallest1 = smallSorted[1];\n        const Smallest2 = smallSorted[2];\n        const PriorityRaw = filteredRates.find(el => el.service === \"Priority\");\n        const ExpressRaw = filteredRates.find(el => el.service === \"Express\"); // const standard =\n        //   Smallest.service === \"Priority\" || Smallest.service === \"Express\"\n        //     ? null\n        //     : {\n        //         ...Smallest,\n        //         customName: \"Standard\",\n        //         customRate: parseFloat(Smallest.rate) + shippingExtraRate\n        //       };\n        // const Priority = PriorityRaw\n        //   ? {\n        //       ...PriorityRaw,\n        //       customName: \"Priority\",\n        //       customRate: parseFloat(PriorityRaw.rate) + shippingExtraRate\n        //     }\n        //   : null;\n        // const Express = ExpressRaw\n        //   ? {\n        //       ...ExpressRaw,\n        //       customName: \"Express\",\n        //       customRate: parseFloat(ExpressRaw.rate) + shippingExtraRate\n        //     }\n        //   : null;\n\n        const standard = Smallest && _objectSpread(_objectSpread({}, Smallest), {}, {\n          customName: \"Standard\",\n          customRate: parseFloat(Smallest.rate) + shippingExtraRate\n        });\n\n        const Priority = Smallest1 && _objectSpread(_objectSpread({}, Smallest1), {}, {\n          customName: \"Priority\",\n          customRate: parseFloat(Smallest1.rate) + shippingExtraRate\n        });\n\n        const Express = Smallest2 && _objectSpread(_objectSpread({}, Smallest2), {}, {\n          customName: \"Express\",\n          customRate: parseFloat(Smallest2.rate) + shippingExtraRate\n        });\n\n        return [standard, Priority, Express].filter(el => el);\n      }\n\n      return rateArr; // return [\n      //   {\n      //     carrier: \"Carrier_Not_Found\",\n      //     created_at: new Date(),\n      //     currency: \"USD\",\n      //     mode: \"test\",\n      //     object: \"Rate\",\n      //     customName: \"Standard\",\n      //     rate: shippingStaticRate,\n      //     customRate: shippingStaticRate,\n      //     retail_currency: \"USD\",\n      //   }\n      // ]\n    });\n  }\n\n  dateFun(date) {\n    var d = new Date(date),\n        month = \"\" + (d.getMonth() + 1),\n        day = \"\" + d.getDate(),\n        year = d.getFullYear();\n    if (month.length < 2) month = \"0\" + month;\n    if (day.length < 2) day = \"0\" + day;\n    return [month, day, year].join(\"/\");\n  }\n\n  dateFun2(date) {\n    var d = new Date(date),\n        month = \"\" + (d.getMonth() + 1),\n        day = \"\" + d.getDate(),\n        year = d.getFullYear();\n    if (month.length < 2) month = \"0\" + month;\n    if (day.length < 2) day = \"0\" + day;\n    return [month, day, year].join(\"/\");\n  }\n\n  dateTimeAmPm(date) {\n    var d = new Date(date),\n        month = \"\" + (d.getMonth() + 1),\n        day = \"\" + d.getDate(),\n        year = d.getFullYear();\n    if (month.length < 2) month = \"0\" + month;\n    if (day.length < 2) day = \"0\" + day;\n    const dateis = month + \"/\" + day + \"/\" + year + \" \";\n    var hours = d.getHours();\n    var minutes = d.getMinutes();\n    var ampm = hours >= 12 ? \"PM\" : \"AM\";\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    var strTime = hours + \":\" + minutes + \" \" + ampm;\n    return dateis + strTime;\n  }\n\n  dateTimeAmPmOld(date) {\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    var d = new Date(date),\n        month = \"\" + (d.getMonth() + 1),\n        day = \"\" + d.getDate(),\n        year = d.getFullYear();\n    if (month.length < 2) month = \"0\" + month;\n    if (day.length < 2) day = \"0\" + day;\n    const monthnameis = monthNames[month - 1];\n    const dateis = monthnameis + \" \" + day + \",\" + year + \" \";\n    var hours = d.getHours();\n    var minutes = d.getMinutes();\n    var ampm = hours >= 12 ? \"PM\" : \"AM\";\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    var strTime = hours + \":\" + minutes + \" \" + ampm;\n    return dateis + strTime;\n  }\n\n  dateTimeInMonthName(date) {\n    if (!date) return \"-\";\n    const monthNames = [\"Jan\", \"Feb\", \"March\", \"April\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n    var d = new Date(date),\n        month = \"\" + (d.getMonth() + 1),\n        day = \"\" + d.getDate(),\n        year = d.getFullYear();\n    if (month.length < 2) month = \"0\" + month;\n    if (day.length < 2) day = \"0\" + day;\n    const monthnameis = monthNames[month - 1];\n    const dateis = monthnameis + \" \" + day + \", \" + year + \" \"; //var hours = d.getHours();\n    // var minutes = d.getMinutes();\n    //  hours = hours % 12;\n    //  hours = hours ? hours : 12; // the hour '0' should be '12'\n    // minutes = minutes < 10 ? \"0\" + minutes : minutes;\n\n    return dateis;\n  }\n\n  currancyAdd(number) {\n    if (number >= 0) {\n      return \"$\" + number;\n    } else {\n      return \"-$\" + Math.abs(number);\n    }\n  }\n\n  nombarFormat(nbr) {\n    if (nbr === 0 && nbr === \"\") {\n      return \"0.00\";\n    } else {\n      if (nbr) {\n        var nr = nbr.toFixed(2);\n        nr = nr.toString();\n        var pattern = /(-?\\d+)(\\d{3})/;\n\n        while (pattern.test(nr)) nr = nr.replace(pattern, \"$1,$2\");\n\n        return nr;\n      } else {\n        return 0.0;\n      }\n    }\n  }\n\n  currancyAddWithNumber(numberX) {\n    const number = parseFloat(numberX);\n    const withoutUsd = this.currencyWithoutUsd(number); // return `${withoutUsd} USD`;\n\n    return `${withoutUsd}`;\n  }\n\n  currencyWithoutUsd(numberX) {\n    if (numberX) {\n      let number = parseFloat(numberX);\n      number = number.toFixed(2);\n      var pattern = /(-?\\d+)(\\d{3})/;\n\n      if (number >= 0) {\n        number = number.toString();\n\n        while (pattern.test(number)) number = number.replace(pattern, \"$1,$2\");\n\n        return \"$\" + number;\n      } else {\n        var num = Math.abs(number);\n        num = num.toFixed(2);\n        num = num.toString();\n\n        while (pattern.test(num)) num = num.replace(pattern, \"$1,$2\");\n\n        return \"-$\" + num;\n      }\n    } else {\n      return \"$0.00\";\n    }\n  }\n\n  capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  sliceToNumber(string = 0, digit = 0) {\n    return string.slice(0, digit);\n  }\n\n  timeConverter(UNIX_timestamp) {\n    var a = new Date(UNIX_timestamp * 1000); // var months = [\n    //   \"Jan\",\n    //   \"Feb\",\n    //   \"Mar\",\n    //   \"Apr\",\n    //   \"May\",\n    //   \"Jun\",\n    //   \"Jul\",\n    //   \"Aug\",\n    //   \"Sep\",\n    //   \"Oct\",\n    //   \"Nov\",\n    //   \"Dec\"\n    // ];\n    // var year = a.getFullYear();\n    // var month = months[a.getMonth()];\n    // var date = a.getDate();\n\n    var hour = a.getHours();\n    var min = a.getMinutes(); // var sec = a.getSeconds();\n\n    if (min < 10) {\n      min = \"0\" + min;\n    } // var ampm = \"AM\";\n\n\n    var timeis = \"\";\n\n    if (hour <= 12) {\n      timeis = hour + \":\" + min + \"AM\";\n    } else {\n      hour = parseFloat(hour) - 12;\n      timeis = hour + \":\" + min + \"PM\";\n    } //   var res = hour + \":\" + min;\n\n\n    return timeis;\n  }\n\n  currentDate() {\n    var d = new Date();\n    var year = parseInt(d.getYear()) - 100;\n    var month = d.getMonth() + 1;\n    return \"20\" + year + \"/\" + month + \"/\" + d.getDate();\n  }\n\n  currentDateYesterday() {\n    var d = new Date();\n    var year = parseInt(d.getYear()) - 100;\n    var month = d.getMonth() + 1;\n    var yesterday = new Date(d.getTime());\n    yesterday.setDate(d.getDate() - 1);\n    var date = yesterday.getDate();\n    return \"20\" + year + \"/\" + month + \"/\" + date;\n  }\n\n  currentDateBeforeDay(beforeDay) {\n    var d = new Date();\n    var yesterday = new Date(d.getTime());\n    yesterday.setDate(d.getDate() - parseInt(beforeDay));\n    var date = yesterday.getDate();\n    var year = parseInt(yesterday.getYear()) - 100;\n    var month = yesterday.getMonth() + 1;\n    return \"20\" + year + \"/\" + month + \"/\" + date;\n  }\n\n  currentDateBeforeMonth(beforeMonth) {\n    var d = new Date();\n    d.setMonth(d.getMonth() - parseInt(beforeMonth));\n    var month = d.getMonth() + parseInt(1);\n    var year = parseInt(d.getYear()) - 100;\n    return \"20\" + year + \"/\" + month + \"/\" + d.getDate();\n  }\n\n  currentDateBeforeYear(beforeYear) {\n    var d = new Date();\n    var month = d.getMonth() + parseInt(1);\n    var year = parseInt(d.getYear()) - 100;\n    year = year - parseInt(beforeYear);\n    return \"20\" + year + \"/\" + month + \"/\" + d.getDate();\n  }\n\n  graphColorPostion(data) {\n    if (data >= 0) {\n      return \"#1fa764\";\n    } else {\n      return \"#ed5454\";\n    }\n  }\n\n  graphColorFillPostion(data) {\n    if (data >= 0) {\n      return \"#abe5c1\";\n    } else {\n      return \"#ffa1a9\";\n    }\n  }\n\n  stringToArray(str) {\n    var res = str.split(\",\");\n    var newArray = [];\n    res.forEach(character => {\n      if (character === character.toUpperCase()) {\n        if (character.length <= 4) {\n          newArray.push(character);\n        }\n      }\n    });\n    return newArray.slice(0, 10);\n  }\n\n  checkIsUpparCashOrNot(character) {\n    if (character === character.toUpperCase()) {\n      if (character.length <= 4) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  stringCheckResponseInColor(str, spn) {\n    var innerHTML = str;\n    spn = spn.toUpperCase();\n    var index = innerHTML.indexOf(spn);\n\n    if (index >= 0) {\n      innerHTML = innerHTML.substring(0, index) + \"<span className='highlight'>\" + innerHTML.substring(index, index + spn.length) + \"</span>\" + innerHTML.substring(index + spn.length); // return 'ram';\n    }\n\n    return innerHTML;\n  }\n\n  subStrStartEnd(str, starting, ending) {\n    if (str) {\n      return str.substr(starting, ending);\n    } else {\n      return str;\n    }\n  }\n\n  bodyColor() {\n    var currentUrl = window.location.href;\n    var ar = currentUrl.split(\"/\");\n\n    if (ar[3] === \"stocks\") {\n      return \"black\";\n    } else {\n      return \"\";\n    }\n  }\n\n  getParchantage(parValue, totalvalue) {\n    return parseFloat(parValue) * parseFloat(totalvalue) / 100;\n  }\n\n  getUnknownParchantage(parValue, totalvalue) {\n    return parseFloat(parValue) / totalvalue * 100;\n  }\n\n  getMinMaxValue(ar) {\n    /*eslint no-extend-native: [\"error\", { \"exceptions\": [\"Array\"] }]*/\n    if (ar.producttype === \"variable\") {\n      const arr = [];\n      ar.variation.map(key => {\n        arr.push(key.sale_price);\n        return null;\n      });\n\n      Array.prototype.max = function () {\n        return Math.max.apply(null, this);\n      };\n\n      Array.prototype.min = function () {\n        return Math.min.apply(null, this);\n      };\n\n      if (arr.length > 1) {\n        if (arr.min() === arr.max()) {\n          const returnString = \"From $\" + this.nombarFormat(arr.min());\n          return returnString;\n        }\n\n        const returnString = \"From $\" + this.nombarFormat(arr.min()) + \" - $\" + this.nombarFormat(arr.max());\n        return returnString;\n      } else {\n        const returnString = \"From $\" + this.nombarFormat(arr.min());\n        return returnString;\n      }\n    }\n  }\n\n  getMinMaxValue2(ar) {\n    /*eslint no-extend-native: [\"error\", { \"exceptions\": [\"Array\"] }]*/\n    if (ar.producttype === \"variable\") {\n      const arr = [];\n      ar.variation.map(key => {\n        arr.push(key.sale_price);\n        return null;\n      });\n\n      Array.prototype.max = function () {\n        return Math.max.apply(null, this);\n      };\n\n      Array.prototype.min = function () {\n        return Math.min.apply(null, this);\n      };\n\n      if (arr.length > 1) {\n        if (arr.min() === arr.max()) {\n          const returnString = \"$\" + this.nombarFormat(arr.min());\n          return returnString;\n        }\n\n        const returnString = \"$\" + this.nombarFormat(arr.min()) + \" - $\" + this.nombarFormat(arr.max());\n        return returnString;\n      } else {\n        const returnString = \"$\" + this.nombarFormat(arr.min());\n        return returnString;\n      }\n    }\n  }\n\n  getMinMaxValueWithVariation(ar) {\n    if (ar.producttype === \"variable\") {\n      const arr = [];\n      ar.variation.map(key => {\n        arr.push(key.sale_price);\n        return null;\n      });\n\n      Array.prototype.max = function () {\n        return Math.max.apply(null, this);\n      };\n\n      Array.prototype.min = function () {\n        return Math.min.apply(null, this);\n      };\n\n      if (arr.length > 1) {\n        const returnString = \"From $\" + this.nombarFormat(arr.min()) + \" - $\" + this.nombarFormat(arr.max());\n        return returnString;\n      } else {\n        const returnString = \"From $\" + this.nombarFormat(arr.min());\n        return returnString;\n      }\n    } else {\n      if (ar.dsaleprice) {\n        const returnString = \"From $\" + this.nombarFormat(ar.dsaleprice);\n        return returnString;\n      } else {\n        const returnString = \"From $\" + this.nombarFormat(ar.dregularprice);\n        return returnString;\n      }\n    }\n  }\n\n  isLoaded(obj) {\n    return Object.values(obj).every(el => el);\n  }\n\n  removeParams(url, sParam) {\n    url = url.split(\"?\")[0] + \"?\";\n    var sPageURL = decodeURIComponent(window.location.search.substring(1)),\n        sURLVariables = sPageURL.split(\"&\"),\n        sParameterName,\n        i;\n\n    for (i = 0; i < sURLVariables.length; i++) {\n      sParameterName = sURLVariables[i].split(\"=\");\n\n      if (sParameterName[0] !== sParam) {\n        url = url + sParameterName[0] + \"=\" + sParameterName[1] + \"&\";\n      }\n    }\n\n    return url.substring(0, url.length - 1);\n  }\n\n  returnReferringUrl(url) {\n    if (!url) return \"Direct traffic\";\n    if (url.trim() === \"\") return \"Direct traffic\";\n    return url;\n  }\n\n  getDialCode(countryCodeList, countryCode) {\n    var returnCuntryCode = \"\";\n    countryCodeList.forEach(element => {\n      if (element.code === countryCode) {\n        returnCuntryCode = element.dial_code;\n      }\n    });\n    return returnCuntryCode;\n  }\n\n  showExportMsg(shippingType, isSame, billingAddress, shippingAddress) {\n    if (shippingType !== \"express\") return false;\n\n    if (isSame) {\n      if (billingAddress) if (billingAddress.toLowerCase().trim() === \"usa\") {\n        return false;\n      }\n    } else {\n      if (shippingAddress) if (shippingAddress.toLowerCase().trim() === \"usa\") {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  parseOrderProduct(item) {\n    const isCombo = item.combo ? true : false,\n          comboId = item.combo ? item._id : null,\n          productId = item.combo ? null : item.productid._id,\n          productMeta = item.combo ? null : item._id,\n          isSubscribed = item.subscribed ? true : false,\n          subscriptionMeta = item.subscribed ? {\n      duration: item.subscribedTime\n    } : null,\n          itemId = item._id,\n          _id = item._id,\n          qty = item.qty.value,\n          title = item.combo ? item.title : item.productid.producttitle,\n          unitPrice = item.saleprice ? item.saleprice : item.regularprice,\n          subTotal = item.saleprice ? this.multiply(item.saleprice, item.qty.value) : this.multiply(item.regularprice, item.qty.value),\n          attribute = this.getSelectedAttributes(item),\n          height = item.shipping_height,\n          width = item.shipping_width,\n          length = item.shipping_length,\n          volume = item.volume,\n          weight = item.weight;\n    const order = {\n      isCombo,\n      comboId,\n      productId,\n      productMeta,\n      isSubscribed,\n      subscriptionMeta,\n      itemId,\n      _id,\n      qty,\n      unitPrice,\n      subTotal,\n      attribute,\n      width,\n      length,\n      height,\n      title,\n      volume,\n      weight\n    };\n    this.removeEmpty(order);\n    return order;\n  }\n\n  multiply(a, b) {\n    return parseFloat(a) * parseFloat(b);\n  }\n\n  generateOrderNew(stateObj, paymentResponse = \"\", referralId, cart, user, confirmShipRes) {\n    const {\n      service\n    } = confirmShipRes,\n          confirmRest = _objectWithoutProperties(confirmShipRes, [\"service\"]);\n\n    const {\n      paymentMethod\n    } = stateObj;\n    const {\n      items,\n      shippingCharge,\n      subTotal,\n      totalWeight,\n      totalVolume,\n      taxValue,\n      taxPercent,\n      taxCouponDiscount,\n      taxCouponCode\n    } = cart;\n    const orderProducts = items.map(el => this.parseOrderProduct(el));\n    const {\n      height: totalHeight,\n      length: totalLength,\n      width: totalWidth\n    } = this.getHeightWeight(orderProducts);\n\n    const order = _objectSpread({\n      totalVolume,\n      totalWeight,\n      shippingMethod: service,\n      products: orderProducts,\n      countryTax: taxPercent * 100,\n      taxAmount: taxValue || parseFloat(cart.subTotal || 0) * parseFloat(taxPercent || 0) || 0,\n      shippingCharge,\n      userDetails: this.getUserDetails(stateObj).user,\n      orderStatus: defaultOrderStatus,\n      paymentMethod: paymentMethod === \"stripe\" ? \"Authorize\" : paymentMethod,\n      status: defaultStatusInOrder,\n      wholeSubtotal: parseFloat(subTotal.toFixed(2)),\n      wasReferred: referralId ? true : false,\n      referral: referralId ? referralId : null,\n      isCoupon: taxCouponCode ? true : false,\n      couponId: taxCouponCode,\n      couponDisc: taxCouponCode ? taxCouponDiscount : null,\n      grandTotal: this.getGrandTotal(subTotal, taxPercent, shippingCharge, taxCouponDiscount),\n      isGuest: user._id ? false : true,\n      userId: user._id ? user._id : null,\n      userMetaId: user.userMetaId ? user.userMetaId : null,\n      totalHeight,\n      totalWidth,\n      totalLength,\n      refPercentage: referralPresent\n    }, confirmRest);\n\n    this.removeEmpty(order);\n    return order;\n  }\n\n  getDiscount(discount, subTotal) {\n    return discount * subTotal / 100 || 0;\n  }\n\n  getGrandTotal(subTotal, taxPresent, shippingCharge, discount) {\n    const amountWithTax = subTotal + taxPresent * subTotal + shippingCharge;\n    const discountAmount = this.getDiscount(discount, subTotal);\n    const total = parseFloat(amountWithTax || 0) - parseFloat(discountAmount || 0);\n    return parseFloat(total.toFixed(2));\n  }\n\n  getHeightWeight(items) {\n    const height = items.map(el => el.height * parseFloat(el.qty));\n    const width = items.map(el => el.width * parseFloat(el.qty));\n    const length = items.map(el => el.length * parseFloat(el.qty));\n    const shape = {\n      height: height.reduce((a, b) => a + b, 0),\n      width: width.reduce((a, b) => a + b, 0),\n      length: length.reduce((a, b) => a + b, 0)\n    };\n    return shape;\n  }\n\n  generateOrder(stateObj, paymentResponse = \"\", referrer_url_id, cart, user, confirmShipRes) {\n    const {\n      service\n    } = confirmShipRes,\n          confirmRest = _objectWithoutProperties(confirmShipRes, [\"service\"]);\n\n    var transactionId = \"000\";\n    const payType = stateObj.paymentMethod;\n\n    if (stateObj.paymentMethod === \"stripe\" && paymentResponse) {\n      transactionId = paymentResponse;\n    }\n\n    if (stateObj.paymentMethod === \"paypal\" && paymentResponse && paymentResponse.paymentID) {\n      transactionId = paymentResponse.paymentID;\n    } // return false;\n\n\n    const {\n      items,\n      shippingCharge,\n      subTotal,\n      totalWeight,\n      totalVolume,\n      taxValue,\n      taxPercent,\n      taxCouponDiscount,\n      taxCouponCode\n    } = cart;\n    const {\n      billing_first_name,\n      billing_last_name,\n      billing_email_name,\n      billing_phone_name,\n      billing_address_name_01,\n      billing_address_name_02,\n      billing_address_town,\n      shipping_first_name,\n      shipping_last_name,\n      shipping_address_name_01,\n      shipping_address_name_02,\n      shipping_address_town,\n      selectedShippingCity,\n      selectedCity,\n      selectedShippingCountry,\n      selectedCountry,\n      shipping_zip_code,\n      billing_zip_code,\n      sameShipping\n    } = stateObj;\n    let order = {};\n    let country = \"\";\n\n    if (selectedShippingCountry) {\n      country = selectedShippingCountry;\n    } else if (selectedCountry) {\n      country = selectedCountry || \"\";\n    }\n\n    let state = \"\";\n\n    if (selectedShippingCity) {\n      state = selectedShippingCity;\n    } else if (selectedCity) {\n      state = selectedCity || \"\";\n    }\n\n    let zipcode = \"\";\n\n    if (shipping_zip_code) {\n      zipcode = shipping_zip_code;\n    } else if (billing_zip_code) {\n      zipcode = billing_zip_code;\n    }\n\n    order.orderproduct = items.map(el => {\n      // console.log({el})\n      // this.parseOrderProduct(el);\n      // console.log({\n      //   checkOrder: this.parseOrderProduct(el)\n      // })\n      // return this.parseOrderProduct(el)\n      let returnItem = {\n        productmetaid: el._id,\n        proucttitle: el.combo ? el.title : el.productid.producttitle,\n        quantity: el.qty.value,\n        singleprice: el.saleprice ? el.saleprice : el.regularprice,\n        subtotal: 0,\n        orderdate: Date(),\n        country,\n        isguest: true || false,\n        subscribed: el.subscribed,\n        subscribedDiscountPersent: el.subscribedDiscountPersent\n      };\n      let subtotal = parseInt(returnItem.quantity || 1) * parseInt(returnItem.singleprice || 1);\n      let attribute = {};\n\n      if (el.producttype === \"variable\") {\n        el.attributes.map((item, index) => {\n          attribute = _objectSpread(_objectSpread({}, attribute), {}, {\n            [item.names]: el[item.names].value\n          });\n          return null;\n        });\n      }\n\n      returnItem = _objectSpread(_objectSpread({}, returnItem), {}, {\n        subtotal,\n        attribute\n      });\n      return _objectSpread({}, returnItem);\n    });\n    let shippingAddress = `${shipping_first_name} ${shipping_last_name}, ${shipping_address_name_01} ${shipping_address_name_02} ${shipping_address_town} `;\n    let billingAddress = `${billing_first_name} ${billing_last_name}, ${billing_address_name_01} ${billing_address_name_02} ${billing_address_town} `;\n    const TaxgrandTotalWithTax = subTotal + taxPercent * subTotal + shippingCharge;\n    const discount = taxCouponDiscount * subTotal / 100;\n\n    if (user._id) {\n      const userid = user._id;\n      order.userid = userid;\n    }\n\n    order.grandtotal = parseFloat(TaxgrandTotalWithTax || 0) - parseFloat(discount || 0);\n    order.coupondisc = taxCouponDiscount;\n    order.couponid = taxCouponCode;\n    order.country = country;\n    order.offerprice = 100;\n    order.shippingmethod = service || \"Express shipping\" || \"Normal shipping\";\n    order.wholesubtotal = subTotal;\n    order.shippingcharge = shippingCharge || 0;\n    order.paymentmethod = payType;\n    order.ordernote = \"Make it quick\";\n    order.status = \"in process\";\n    order.paymentstatus = \"Done\";\n    order.transactionid = transactionId;\n    order.country_tax = taxPercent * 100;\n    order.totalweight = totalWeight;\n    order.totalvolume = totalVolume;\n    order.taxamount = taxValue;\n    order.userdetails = {\n      country,\n      firstname: billing_first_name,\n      lastname: billing_last_name,\n      email: billing_email_name,\n      shippingaddress: sameShipping ? billingAddress : shippingAddress,\n      billingaddress: billingAddress,\n      extraaddress: \"jdjdjd\",\n      city: shipping_address_town ? shipping_address_town : billing_address_town,\n      state,\n      zipcode,\n      phonenumber: billing_phone_name\n    };\n    order.orderstatus = \"Not delivered\";\n\n    if (referrer_url_id) {\n      order.wasreferred = true;\n      order.referral = referrer_url_id;\n    }\n\n    return _objectSpread(_objectSpread({}, order), confirmRest);\n  }\n\n  getUserDetails(stateObj) {\n    const {\n      billing_first_name,\n      billing_last_name,\n      billing_email_name,\n      billing_phone_name,\n      billing_address_name_01,\n      billing_address_name_02,\n      billing_address_town,\n      shipping_first_name,\n      shipping_last_name,\n      shipping_address_name_01,\n      shipping_address_name_02,\n      shipping_address_town,\n      selectedShippingCity,\n      selectedCity,\n      selectedShippingCountry,\n      selectedCountry,\n      shipping_zip_code,\n      billing_zip_code,\n      sameShipping\n    } = stateObj;\n    const shippingAddress = `${shipping_first_name} ${shipping_last_name}, ${shipping_address_name_01} ${shipping_address_name_02} ${shipping_address_town} `;\n    const billingAddress = `${billing_first_name} ${billing_last_name}, ${billing_address_name_01} ${billing_address_name_02} ${billing_address_town} `;\n    const user = {\n      firstname: billing_first_name,\n      lastname: billing_last_name,\n      email: billing_email_name,\n      shippingaddress: sameShipping ? billingAddress : shippingAddress,\n      billingaddress: billingAddress,\n      phonenumber: billing_phone_name,\n      country: this.getOneValid(selectedShippingCountry, selectedCountry),\n      zipcode: this.getOneValid(shipping_zip_code, billing_zip_code),\n      state: this.getOneValid(selectedShippingCity, selectedCity)\n    };\n    return {\n      user,\n      shippingAddress,\n      billingAddress\n    };\n  }\n\n  getOneValid(a, b) {\n    if (a && a.trim()) return a;\n    if (b && b.trim()) return b;\n    return \"\";\n  }\n\n  checkProductInWishList(list = [], product_id) {\n    var flag = false; // console.log(list)\n    // console.log(product_id)\n\n    if (list.length > 0) {\n      list.forEach((itm, i) => {\n        if (itm.productid === product_id) {\n          flag = i;\n        }\n      });\n    }\n\n    return flag;\n  }\n\n  getSingleElementByMultipleObject(arrayData, f) {\n    const result = arrayData.reduce(function (r, a) {\n      r[a.carrier] = r[a.carrier] || [];\n      r[a.carrier].push(a);\n      return r;\n    }, {});\n    return result;\n  }\n\n  shippingStringRate(key) {\n    if (key && key.est_delivery_days) {\n      return \" in \" + key.est_delivery_days + \" Days .\";\n    } else {\n      return \" in - Days .\";\n    }\n  }\n\n  cartHeightWidhtCalculation(item) {\n    var height = 0;\n    var width = 0;\n    var length = 0;\n    var weight = 0;\n\n    if (item.length > 0) {\n      item.forEach(itm => {\n        height = height + itm.shipping_height;\n        width = width + itm.shipping_width;\n        length = length + itm.shipping_length;\n        weight = weight + itm.weight;\n      });\n    }\n\n    return {\n      height,\n      width,\n      length,\n      weight\n    };\n  }\n\n  cartHeightWidhtCalculation2(itemA) {\n    var height = 0;\n    var width = 0;\n    var length = 0;\n    var weight = 0;\n\n    function flatten(arr) {\n      return arr.reduce(function (flat, toFlatten) {\n        return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);\n      }, []);\n    }\n\n    const item = flatten(itemA.map(el => {\n      const qty = el.qty ? el.qty.value ? parseInt(el.qty.value) : 1 : 1;\n      if (qty > 1) return new Array(qty).fill(el);\n      return el;\n    }));\n\n    const getGreater = (a, b) => {\n      if (a > b) return a;\n      return b;\n    };\n\n    if (item.length > 0) {\n      item.forEach(itm => {\n        // height = getGreater(height, itm.shipping_height);\n        // width = width + itm.shipping_width;\n        // length = getGreater(length, itm.shipping_length);\n        weight = weight + itm.weight;\n      });\n    }\n\n    const itemsB = itemA.map(el => ({\n      h: el.shipping_height,\n      l: el.shipping_length,\n      w: el.shipping_width,\n      qty: el.qty.value\n    }));\n    const itemsC = [].concat.apply([], itemsB);\n    const itemsD = combineLoop(itemsC)[0];\n    return {\n      height: itemsD.h,\n      width: itemsD.w,\n      length: itemsD.l,\n      weight\n    };\n  }\n\n  exportToJson(objectData, fileName = \"export\") {\n    let filename = `${fileName}.json`;\n    let contentType = \"application/json;charset=utf-8;\";\n\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], {\n        type: contentType\n      });\n      navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      var a = document.createElement(\"a\");\n      a.download = filename;\n      a.href = \"data:\" + contentType + \",\" + encodeURIComponent(JSON.stringify(objectData));\n      a.target = \"_blank\";\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    }\n  }\n\n  qtyList(qty = 10) {\n    const quantity = parseFloat(qty) > 10 ? parseFloat(qty) : 10;\n    const temp = new Array(quantity).fill(\"\");\n    const newarray = temp.map((el, index) => ({\n      label: index + 1,\n      value: index + 1\n    }));\n    return newarray;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}