{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport dynamic from 'next/dynamic';\nimport { connect } from \"react-redux\";\nvar Input = dynamic(function () {\n  return import(\"../form-components/Input\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../form-components/Input\")];\n    },\n    modules: [\"../form-components/Input\"]\n  }\n});\nvar Checkbox = dynamic(function () {\n  return import(\"../form-components/Checkbox\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../form-components/Checkbox\")];\n    },\n    modules: [\"../form-components/Checkbox\"]\n  }\n});\nvar Button = dynamic(function () {\n  return import(\"../form-components/Button\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../form-components/Button\")];\n    },\n    modules: [\"../form-components/Button\"]\n  }\n});\nimport { showRegBar, drawerToDisplay } from \"../../redux/actions/drawers\";\nimport { getAddress } from \"../../redux/actions/address\";\nvar TitleList = dynamic(function () {\n  return import(\"../TItleList\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../TItleList\")];\n    },\n    modules: [\"../TItleList\"]\n  }\n});\nimport { Form, Radio } from \"antd\";\nimport PlacesAutocomplete from \"react-places-autocomplete\";\nimport { searchAddress } from \"../../services/api\";\nimport regex from \"../../services/helpers/regex\";\nimport { getCountryCode } from \"../../services/helpers/misc\";\nimport reactComponentDebounce from \"react-component-debounce\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nimport projectSettings from \"../../constants/projectSettings\";\nimport { getShippingRates } from \"../../services/api\";\nimport PhoneInput from \"../address/form/PhoneInput\";\nimport { getItemsHeightWidth, filterShippingRates } from \"../../services/helpers/cart\";\nimport msgStrings from \"../../constants/msgStrings\";\n\nvar suffix = __jsx(SearchOutlined, {\n  style: {\n    color: \"#000000\"\n  }\n});\n\nimport { Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { isValidPhoneNumber } from 'react-phone-number-input';\n\nvar antIcon = __jsx(LoadingOutlined, {\n  style: {\n    fontSize: 24,\n    color: \"white\"\n  },\n  spin: true\n});\n\nvar DebounceInput = reactComponentDebounce({\n  valuePropName: \"value\",\n  triggerMs: 1000\n})(Input);\n\nvar CheckoutInfo = /*#__PURE__*/function (_React$Component) {\n  _inherits(CheckoutInfo, _React$Component);\n\n  var _super = _createSuper(CheckoutInfo);\n\n  function CheckoutInfo() {\n    var _this;\n\n    _classCallCheck(this, CheckoutInfo);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"generateAddStr\", function (address) {\n      var country = address.country,\n          state = address.state,\n          city = address.city,\n          other = address.other,\n          zip = address.zip;\n      return \"\".concat(city, \", \").concat(state, \", \").concat(country, \", \").concat(zip).trim();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (addressStr) {\n      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"address\";\n\n      _this.changeAddress({\n        addressStr: addressStr\n      }, key);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelect\", function (addressStr) {\n      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"address\";\n      var arr = addressStr.split(\",\");\n      var size = arr.length;\n      var country = arr[size - 1].trim();\n      var state = arr[size - 2];\n      var city = arr[size - 3];\n      var other = arr[0];\n      var address = {\n        addressStr: addressStr && addressStr.trim(),\n        country: country && country.trim(),\n        state: state && state.trim(),\n        city: city && city.trim(),\n        other: other && other.trim(),\n        zip: \"\"\n      };\n      searchAddress(addressStr).then(function (res) {\n        if (res.data && res.data.results) {\n          var results = res.data.results;\n          var addStr = results[0].address_components;\n          var zipObj = addStr.find(function (el) {\n            return el.types && el.types.includes(\"postal_code\");\n          });\n\n          if (zipObj && zipObj.short_name) {\n            var zip = zipObj.short_name;\n\n            _this.changeAddress(_objectSpread(_objectSpread({}, address), {}, {\n              zip: zip.trim()\n            }), key);\n          } else {\n            _this.changeAddress(_objectSpread({}, address), key);\n          }\n        } else {\n          _this.changeAddress(_objectSpread({}, address), key);\n        }\n      })[\"catch\"](function (err) {\n        _this.changeAddress(_objectSpread({}, address), key);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        loader: true\n      }); // console.log(\"here\");\n\n\n      var _this$props = _this.props,\n          onSubmit = _this$props.onSubmit,\n          cart = _this$props.cart;\n      var _this$state = _this.state,\n          address = _this$state.address,\n          addressShip = _this$state.addressShip,\n          sameShipping = _this$state.sameShipping,\n          phone = _this$state.phone;\n      console.log(address, addressShip);\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          var country = values.country,\n              firstname = values.firstname,\n              lastname = values.lastname,\n              firstname_ship = values.firstname_ship,\n              lastname_ship = values.lastname_ship; //const aa = getCountryCode(country);\n\n          if (typeof onSubmit === \"function\") {\n            var dimension = getItemsHeightWidth(cart.items);\n            var addr = sameShipping ? address : addressShip;\n            console.log(addr);\n            var city = addr.city,\n                state = addr.state,\n                _country = addr.country,\n                zip = addr.zip,\n                addressStr = addr.addressStr;\n            var fname = addr.firstname,\n                lname = addr.lastname;\n            var data = {\n              city: city,\n              state: state,\n              zip: zip,\n              country: _country,\n              street: addressStr,\n              name: \"\".concat(sameShipping ? fname ? fname : firstname : firstname_ship, \" \").concat(sameShipping ? lname ? lname : lastname : lastname_ship, \" \"),\n              phone: phone,\n              length: dimension.length,\n              width: dimension.width,\n              height: dimension.height,\n              weight: dimension.weight\n            };\n            console.log(data);\n            getShippingRates(data).then(function (res) {\n              if (res.data.status) {\n                _this.setState({\n                  dataFetched: true,\n                  isCustomRates: false\n                });\n\n                console.log(res.data);\n                var errMessages = res.data.data.messages;\n                var shippingWrongZip = errMessages && errMessages.find(function (el) {\n                  return el.message === \"to postal code: zipcode format must be zzzzz[pppp]\";\n                });\n\n                if (errMessages && shippingWrongZip && shippingWrongZip.message === \"to postal code: zipcode format must be zzzzz[pppp]\") {\n                  var msg = \"\";\n\n                  switch (shippingWrongZip.message) {\n                    case \"to postal code: zipcode format must be zzzzz[pppp]\":\n                      msg = msgStrings.INVALID_ZIP;\n                      break;\n\n                    default:\n                      msg = errMessages[0].message;\n                  }\n\n                  _this.setState({\n                    shippingErrMsg: msg\n                  });\n                } else {\n                  onSubmit(e, values, _objectSpread(_objectSpread({}, address), {}, {\n                    firstname: firstname,\n                    lastname: lastname,\n                    addressStr: address.addressStr.trim() === \"\" ? _this.generateAddStr(address) : address.addressStr\n                  }), _objectSpread(_objectSpread({}, addressShip), {}, {\n                    firstname: firstname_ship,\n                    lastname: lastname_ship,\n                    addressStr: addressShip.addressStr.trim() === \"\" ? _this.generateAddStr(addressShip) : addressShip.addressStr\n                  }));\n\n                  _this.setState({\n                    loader: false\n                  });\n                }\n              }\n            })[\"catch\"](console.log); //   getShippingRates()\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSameShippingChange\", function (e) {\n      _this.setState({\n        sameShipping: e.target.checked\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeAddress\", function (_ref) {\n      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"address\";\n      var search = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      var address = _extends({}, _ref);\n\n      var city = address.city,\n          state = address.state,\n          country = address.country,\n          zip = address.zip;\n\n      if (key === \"address\") {\n        var _address = _this.state.address;\n\n        _this.props.form.setFieldsValue({\n          city: city,\n          state: state,\n          country: country,\n          zip: zip\n        });\n      } else if (key === \"addressShip\") {\n        var _address2 = _this.state.addressShip;\n\n        _this.props.form.setFieldsValue({\n          \"city-ship\": city,\n          \"state-ship\": state,\n          \"country-ship\": country,\n          \"zip-ship\": zip\n        });\n      }\n\n      if (search) {\n        _this.setState(function (prevState) {\n          return _defineProperty({}, key, _objectSpread(_objectSpread({}, prevState[key]), address));\n        });\n      } else {\n        _this.setState(_defineProperty({}, key, _objectSpread({}, address)));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"returnAddressStr\", function (address) {\n      var country = address.country,\n          state = address.state,\n          city = address.city,\n          other = address.other,\n          zip = address.zip,\n          addressStr = address.addressStr;\n\n      if (!addressStr) {\n        var addressLine = \"\".concat(city, \", \").concat(state, \", \").concat(country, \", \").concat(zip).trim();\n        var trimmedLine = addressLine.trim().replace(/^,/g, \"\").trim().replace(/^,/g, \"\").trim().replace(/^,/g, \"\").trim();\n        return trimmedLine;\n      }\n\n      return addressStr;\n    });\n\n    _this.state = {\n      sameShipping: true,\n      address: {\n        addressStr: \"\",\n        country: \"\",\n        state: \"\",\n        city: \"\",\n        other: \"\",\n        zip: \"\"\n      },\n      addressShip: {\n        addressStr: \"\",\n        country: \"\",\n        state: \"\",\n        city: \"\",\n        other: \"\",\n        zip: \"\"\n      },\n      phone: \"\",\n      phoneShip: \"\",\n      newAddress: false,\n      shippingErrMsg: \"\",\n      loader: false,\n      login_loader: false\n    };\n    return _this;\n  }\n\n  _createClass(CheckoutInfo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          form = _this$props2.form,\n          oldValues = _this$props2.oldValues; // console.log(oldValues);\n\n      if (oldValues) {\n        form.setFieldsValue(_objectSpread({}, oldValues));\n        var city = oldValues.city,\n            state = oldValues.state,\n            country = oldValues.country,\n            zip = oldValues.zip,\n            cityShip = oldValues[\"city-ship\"],\n            stateShip = oldValues[\"state-ship\"],\n            countryShip = oldValues[\"country-ship\"],\n            zipShip = oldValues[\"zip-ship\"];\n        this.setState(function (prevState) {\n          return {\n            address: _objectSpread(_objectSpread({}, prevState.address), {}, {\n              city: city || prevState.address.city,\n              state: state || prevState.address.state,\n              country: country || prevState.address.country,\n              zip: zip || prevState.address.zip,\n              addressStr: prevState.address.addressStr\n            }),\n            addressShip: _objectSpread(_objectSpread({}, prevState.addressShip), {}, {\n              city: cityShip || prevState.addressShip.city,\n              state: stateShip || prevState.addressShip.state,\n              country: countryShip || prevState.addressShip.country,\n              zip: zipShip || prevState.addressShip.zip,\n              addressStr: prevState.addressShip.addressStr\n            })\n          };\n        });\n      } // console.log({\n      //     props: this.props\n      // })\n\n\n      setTimeout(function () {\n        if (_this2.props.user._id) {\n          _this2.props.getAddress(_this2.props.user._id);\n        }\n      }, 100);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.addresses !== this.props.addresses) {\n        var _this$props3 = this.props,\n            addresses = _this$props3.addresses,\n            form = _this$props3.form;\n\n        if (addresses.length > 0) {\n          var address = addresses.find(function (el) {\n            return el.isDefault;\n          }) || addresses[0];\n\n          if (address) {\n            form.setFieldsValue({\n              email: address.email\n            });\n          }\n\n          this.setState({\n            login_loader: false\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var componentClass = \"c-checkout-info\";\n      var _this$props4 = this.props,\n          showRegBar = _this$props4.showRegBar,\n          drawerToDisplay = _this$props4.drawerToDisplay,\n          user = _this$props4.user,\n          form = _this$props4.form,\n          addresses = _this$props4.addresses;\n      console.log(this.state.shippingErrMsg);\n      var _this$state2 = this.state,\n          sameShipping = _this$state2.sameShipping,\n          address = _this$state2.address,\n          addressShip = _this$state2.addressShip,\n          loader = _this$state2.loader,\n          login_loader = _this$state2.login_loader;\n      var getFieldDecorator = form.getFieldDecorator,\n          getFieldValue = form.getFieldValue,\n          setFieldsValue = form.setFieldsValue,\n          isFieldTouched = form.isFieldTouched,\n          getFieldsValue = form.getFieldsValue;\n      var isLogin = user._id ? true : false;\n\n      if (isLogin && login_loader) {\n        window.location.reload();\n      }\n\n      return __jsx(\"div\", {\n        className: componentClass\n      }, __jsx(Form, {\n        onSubmit: this.onSubmit\n      }, __jsx(TitleList, {\n        versions: [\"sm-border\"],\n        parentClass: componentClass,\n        title: \"Contact Information\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"email\", {\n        rules: [{\n          required: true,\n          message: \"Please input your E-mail\"\n        }, {\n          pattern: regex.email,\n          message: \"Please enter a valid E-mail!\"\n        }],\n        initialValue: user.email\n      })(__jsx(DebounceInput, {\n        label: \"E-mail\"\n      }))), !isLogin && __jsx(\"div\", {\n        className: componentClass + \"__login-wrapper--check\"\n      }, \"Already have an account?\", \" \", __jsx(\"span\", {\n        onClick: function onClick() {\n          drawerToDisplay(\"login\");\n          showRegBar();\n\n          _this3.setState({\n            login_loader: true\n          });\n        },\n        className: componentClass + \"__login-btn cursor-pointer\"\n      }, \"SIGN IN\"))), __jsx(TitleList, {\n        versions: [\"sm-border\"],\n        parentClass: componentClass,\n        title: \"Billing Information\"\n      }, isLogin && addresses && addresses.length > 0 && __jsx(\"div\", {\n        className: componentClass + \"__login-wrapper\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"addressSelect\", {\n        initialValue: addresses.find(function (el) {\n          return el.isDefault;\n        }) || addresses[0]\n      })(__jsx(Radio.Group, {\n        className: \"underline\",\n        onChange: function onChange(e) {\n          var value = e.target.value;\n\n          if (value !== null) {\n            console.log(value);\n            setFieldsValue({\n              newAddress: false,\n              email: value.email\n            });\n\n            _this3.setState({\n              address: value,\n              firstname: value.firstname,\n              lastname: value.lastname,\n              phone: value.phone,\n              shippingErrMsg: \"\"\n            });\n          }\n        }\n      }, addresses.map(function (el, i) {\n        return __jsx(Radio, {\n          key: i,\n          value: el\n        }, _this3.returnAddressStr(el));\n      })))), __jsx(Form.Item, null, getFieldDecorator(\"newAddress\", {\n        valuePropName: \"checked\",\n        initialValue: false,\n        onChange: function onChange(e) {\n          var checked = e.target.checked;\n          setFieldsValue({\n            addressSelect: checked ? null : addresses.find(function (el) {\n              return el.isDefault;\n            }) || addresses[0]\n          });\n        }\n      })(__jsx(Checkbox, {\n        versions: [\"add\"]\n      }, \"+ \\xA0Add Address\")))), (!isLogin || getFieldValue(\"newAddress\") || !(addresses && addresses.length)) && __jsx(\"div\", null, __jsx(\"div\", {\n        className: \"container-fluid p-0\"\n      }, __jsx(\"div\", {\n        className: \"row\"\n      }, __jsx(\"div\", {\n        className: \"col-md-6\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"firstname\", {\n        rules: [{\n          required: true,\n          message: \"Please input first name!\"\n        }, {\n          pattern: regex.name,\n          message: \"Please enter a valid name!\"\n        }, {\n          max: 12,\n          message: \"Please enter a valid name!\"\n        }]\n      })(__jsx(DebounceInput, {\n        parentClass: \"c-address-form\",\n        name: \"firstname\",\n        label: \"First Name\"\n      })))), __jsx(\"div\", {\n        className: \"col-md-6\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"lastname\", {\n        rules: [{\n          required: true,\n          message: \"Please input last name!\"\n        }, {\n          pattern: regex.name,\n          message: \"Please enter a valid name!\"\n        }, {\n          max: 12,\n          message: \"Please enter a valid name!\"\n        }]\n      })(__jsx(DebounceInput, {\n        parentClass: \"c-address-form\",\n        name: \"lastname\",\n        label: \"Last Name\"\n      })))), __jsx(\"div\", {\n        className: \"col-12\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"phone\", {\n        rules: [{\n          required: true,\n          message: \"Please input phone number!\"\n        }, {\n          validator: function () {\n            var _validator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              var _args = arguments;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      if (!isValidPhoneNumber(\"+\" + (_args.length <= 1 ? undefined : _args[1]))) {\n                        _context.next = 4;\n                        break;\n                      }\n\n                      return _context.abrupt(\"return\", Promise.resolve());\n\n                    case 4:\n                      return _context.abrupt(\"return\", Promise.reject('Invalid Phone Number!'));\n\n                    case 5:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            function validator() {\n              return _validator.apply(this, arguments);\n            }\n\n            return validator;\n          }()\n        }]\n      })(__jsx(DebounceInput, {\n        type: \"number\",\n        parentClass: \"c-address-form\",\n        name: \"number\",\n        label: \"Phone Number (Please use country code ex: +91 India)\"\n      })))), __jsx(\"div\", {\n        className: \"col-12\"\n      }, __jsx(PlacesAutocomplete, {\n        value: address.addressStr,\n        onChange: function onChange(e) {\n          _this3.handleChange(e, \"address\");\n        },\n        onSelect: function onSelect(e) {\n          _this3.handleSelect(e, \"address\");\n        }\n      }, function (_ref3) {\n        var getInputProps = _ref3.getInputProps,\n            suggestions = _ref3.suggestions,\n            getSuggestionItemProps = _ref3.getSuggestionItemProps,\n            loading = _ref3.loading;\n        return __jsx(\"div\", null, __jsx(Input, _extends({}, getInputProps({\n          placeholder: \"Search Your Address ...\",\n          className: \"location-search-input\"\n        }), {\n          parentClass: \"c-address-form\",\n          label: \"Search Your Address ...\",\n          suffix: suffix\n        })), __jsx(\"div\", {\n          className: \"autocomplete-dropdown-container\"\n        }, loading && __jsx(\"div\", null, \"Loading...\"), suggestions.map(function (suggestion) {\n          var className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\"; // inline style for demonstration purpose\n\n          var style = suggestion.active ? {\n            backgroundColor: \"#fafafa\",\n            cursor: \"pointer\"\n          } : {\n            backgroundColor: \"#ffffff\",\n            cursor: \"pointer\"\n          };\n          return __jsx(\"div\", getSuggestionItemProps(suggestion, {\n            className: className,\n            style: style\n          }), __jsx(\"span\", null, suggestion.description));\n        })));\n      })), __jsx(\"div\", {\n        className: \"col-12\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"city\", {\n        rules: [{\n          required: true,\n          message: \"Please input your city!\"\n        }],\n        initialValue: address.city\n      })(__jsx(DebounceInput, {\n        onChange: function onChange(key, value) {\n          var city = key;\n          var container = document.getElementsByClassName(\"c-input c-input--default c-address-form__input\"); //  let input = container.getElementsByTagName('input')\n          // container[3].value=\"\"\n\n          container[3].firstChild.value = \"\";\n\n          _this3.changeAddress(_objectSpread(_objectSpread({}, address), {}, {\n            city: city\n          }), \"address\");\n        },\n        name: \"city\",\n        parentClass: \"c-address-form\",\n        label: \"City\"\n      })))), __jsx(\"div\", {\n        className: \"col-12\"\n      }), __jsx(\"div\", {\n        className: \"col-md-4\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"country\", {\n        rules: [{\n          required: true,\n          message: \"Please input your Country!\"\n        }],\n        initialValue: address.country\n      })(__jsx(DebounceInput, {\n        onChange: function onChange(key, value) {\n          var country = key;\n\n          _this3.changeAddress(_objectSpread(_objectSpread({}, address), {}, {\n            country: country\n          }), \"address\");\n        },\n        parentClass: \"c-address-form\",\n        name: \"country\",\n        label: \"Country\"\n      })))), __jsx(\"div\", {\n        className: \"col-md-4\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"state\", {\n        rules: [{\n          required: true,\n          message: \"Please input your state!\"\n        }],\n        initialValue: address.state\n      })(__jsx(DebounceInput, {\n        onChange: function onChange(key, value) {\n          var state = key;\n\n          _this3.changeAddress(_objectSpread(_objectSpread({}, address), {}, {\n            state: state\n          }), \"address\");\n        },\n        parentClass: \"c-address-form\",\n        name: \"state\",\n        label: \"state\"\n      })))), __jsx(\"div\", {\n        className: \"col-md-4\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"zip\", {\n        rules: [{\n          required: true,\n          message: \"Please input your ZIP code!\"\n        }, // {pattern: /^\\d{5}$|^\\d{5}-\\d{4}$/, message:\"Please enter a valid zipcode!\"},\n        {\n          max: 10,\n          message: \"zip cannot be longer than 10 characters\"\n        }, // ({ getFieldValue }) => ({\n        //   validator(rule, value) {\n        //     console.log(rule,value);\n        //     if (!value || getFieldValue('zip') === value) {\n        //       console.log(value);\n        //       return Promise.resolve();\n        //     }\n        //     // return Promise.reject('The two passwords that you entered do not match!');\n        //   },\n        // }),\n        {\n          validator: function () {\n            var _validator2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n              var data,\n                  city,\n                  state,\n                  zip_city,\n                  zip_state_short,\n                  zip_city_short,\n                  zip_state,\n                  _args2 = arguments;\n              return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.next = 2;\n                      return searchAddress(_args2.length <= 1 ? undefined : _args2[1]);\n\n                    case 2:\n                      data = _context2.sent;\n                      //console.log(data)\n                      city = _this3.props.form.getFieldValue('city');\n                      state = _this3.props.form.getFieldValue('state');\n                      zip_city = data.data.results[0].address_components[3] ? data.data.results[0].address_components[3].long_name : data.data.results[0].address_components[1].long_name;\n                      zip_state_short = data.data.results[0].address_components[4] ? data.data.results[0].address_components[4].short_name : data.data.results[0].address_components[2].short_name;\n                      zip_city_short = data.data.results[0].address_components[3] ? data.data.results[0].address_components[3].short_name : data.data.results[0].address_components[1].short_name;\n                      zip_state = data.data.results[0].address_components[4] ? data.data.results[0].address_components[4].long_name : data.data.results[0].address_components[2].long_name;\n                      console.log(data, zip_city, zip_state);\n\n                      if (!(city == zip_city || state == zip_state || city == zip_state || state == zip_city || city == zip_city_short || state == zip_state_short || city == zip_state_short || state == zip_city_short)) {\n                        _context2.next = 14;\n                        break;\n                      }\n\n                      return _context2.abrupt(\"return\", Promise.resolve());\n\n                    case 14:\n                      return _context2.abrupt(\"return\", Promise.reject('Invalid Zip Code!'));\n\n                    case 15:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2);\n            }));\n\n            function validator() {\n              return _validator2.apply(this, arguments);\n            }\n\n            return validator;\n          }()\n        }],\n        initialValue: address.zip\n      })(__jsx(DebounceInput, {\n        type: \"number\",\n        onChange: function onChange(key, value) {\n          var zip = key;\n\n          _this3.changeAddress(_objectSpread(_objectSpread({}, address), {}, {\n            zip: zip\n          }), \"address\");\n        },\n        name: \"zipcode\",\n        parentClass: \"c-address-form\",\n        label: \"ZIP code\"\n      })))), isLogin && __jsx(\"div\", {\n        className: \"col-12\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"saveaddress\", {\n        valuePropName: \"checked\",\n        initialValue: true\n      })(__jsx(Checkbox, {\n        versions: [\"dark\"]\n      }, \"Save this information for next time\"))))))), __jsx(Form.Item, null, getFieldDecorator(\"sameShipping\", {\n        valuePropName: \"checked\",\n        initialValue: true,\n        setFieldsValue: sameShipping\n      })(__jsx(Checkbox, {\n        onChange: this.onSameShippingChange,\n        versions: [\"light\"]\n      }, \"Ship to the same address\")))), !sameShipping && __jsx(TitleList, {\n        versions: [\"sm-border\"],\n        parentClass: componentClass,\n        title: \"Shipping Information\"\n      }, __jsx(\"div\", {\n        className: \"row\"\n      }, __jsx(\"div\", {\n        className: \"col-12\"\n      }, isLogin && addresses && addresses.length > 0 && __jsx(\"div\", {\n        className: componentClass + \"__login-wrapper\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"addressSelect_ship\", {\n        initialValue: addresses.find(function (el) {\n          return el.isDefault;\n        }) || addresses[0]\n      })(__jsx(Radio.Group, {\n        className: \"bordered\",\n        onChange: function onChange(e) {\n          var value = e.target.value;\n\n          if (value !== null) {\n            setFieldsValue({\n              newAddress_ship: false\n            });\n\n            _this3.setState({\n              addressShip: value,\n              firstname: value.firstname,\n              lastname: value.lastname,\n              phone: value.phone,\n              shippingErrMsg: \"\"\n            });\n          }\n        }\n      }, addresses.map(function (el, i) {\n        return __jsx(Radio, {\n          className: \"bordered\",\n          key: i,\n          value: el\n        }, _this3.returnAddressStr(el));\n      })))), __jsx(Form.Item, null, getFieldDecorator(\"newAddress_ship\", {\n        valuePropName: \"checked\",\n        initialValue: false,\n        onChange: function onChange(e) {\n          var checked = e.target.checked;\n          setFieldsValue({\n            addressSelect_ship: checked ? null : addresses.find(function (el) {\n              return el.isDefault;\n            }) || addresses[0]\n          });\n        }\n      })(__jsx(Checkbox, {\n        versions: [\"dark\"]\n      }, \"add new address\"))))), (!isLogin || getFieldValue(\"newAddress_ship\")) && __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"col-md-6\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"firstname_ship\", {\n        rules: [{\n          required: true,\n          message: \"Please input first name!\"\n        }, {\n          pattern: regex.name,\n          message: \"Please enter a valid name!\"\n        }, {\n          max: 12,\n          message: \"Please enter a valid name!\"\n        }]\n      })(__jsx(DebounceInput, {\n        parentClass: \"c-address-form\",\n        name: \"firstname_ship\",\n        label: \"First Name\"\n      })))), __jsx(\"div\", {\n        className: \"col-md-6\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"lastname_ship\", {\n        rules: [{\n          required: true,\n          message: \"Please input last name!\"\n        }, {\n          pattern: regex.name,\n          message: \"Please enter a valid name!\"\n        }, {\n          max: 12,\n          message: \"Please enter a valid name!\"\n        }]\n      })(__jsx(DebounceInput, {\n        parentClass: \"c-address-form\",\n        name: \"lastname_ship\",\n        label: \"Last Name\"\n      })))), __jsx(\"div\", {\n        className: \"col-12\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"phone_ship\", {\n        rules: [{\n          required: true,\n          message: \"Please input phone number!\"\n        }, {\n          validator: function () {\n            var _validator3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n              var _args3 = arguments;\n              return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      if (!isValidPhoneNumber(\"+\" + (_args3.length <= 1 ? undefined : _args3[1]))) {\n                        _context3.next = 4;\n                        break;\n                      }\n\n                      return _context3.abrupt(\"return\", Promise.resolve());\n\n                    case 4:\n                      return _context3.abrupt(\"return\", Promise.reject('Invalid Phone Number!'));\n\n                    case 5:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, _callee3);\n            }));\n\n            function validator() {\n              return _validator3.apply(this, arguments);\n            }\n\n            return validator;\n          }()\n        }]\n      })(__jsx(DebounceInput, {\n        type: \"number\",\n        parentClass: \"c-address-form\",\n        name: \"phonenumber_ship\",\n        label: \"Phone Number (Please use country code ex: +91 India)\"\n      })))), __jsx(\"div\", {\n        className: \"col-12\"\n      }, __jsx(PlacesAutocomplete, {\n        value: addressShip.addressStr,\n        onChange: function onChange(e) {\n          _this3.handleChange(e, \"addressShip\");\n        },\n        onSelect: function onSelect(e) {\n          _this3.handleSelect(e, \"addressShip\");\n        }\n      }, function (_ref4) {\n        var getInputProps = _ref4.getInputProps,\n            suggestions = _ref4.suggestions,\n            getSuggestionItemProps = _ref4.getSuggestionItemProps,\n            loading = _ref4.loading;\n        return __jsx(\"div\", null, __jsx(Input, _extends({}, getInputProps({\n          placeholder: \"Search Places ...\",\n          className: \"location-search-input\"\n        }), {\n          parentClass: \"c-address-form\",\n          label: \"Search Places ...\",\n          suffix: suffix\n        })), __jsx(\"div\", {\n          className: \"autocomplete-dropdown-container\"\n        }, loading && __jsx(\"div\", null, \"Loading...\"), suggestions.map(function (suggestion) {\n          var className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\"; // inline style for demonstration purpose\n\n          var style = suggestion.active ? {\n            backgroundColor: \"#fafafa\",\n            cursor: \"pointer\"\n          } : {\n            backgroundColor: \"#ffffff\",\n            cursor: \"pointer\"\n          };\n          return __jsx(\"div\", getSuggestionItemProps(suggestion, {\n            className: className,\n            style: style\n          }), __jsx(\"span\", null, suggestion.description));\n        })));\n      })), __jsx(\"div\", {\n        className: \"col-12\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"city-ship\", {\n        rules: [{\n          required: true,\n          message: \"Please input your city!\"\n        }]\n      })(__jsx(DebounceInput, {\n        onChange: function onChange(key, value) {\n          var city = key;\n\n          _this3.changeAddress(_objectSpread(_objectSpread({}, addressShip), {}, {\n            city: city\n          }), \"addressShip\");\n        },\n        parentClass: \"c-address-form\",\n        name: \"ship-city\",\n        label: \"City\"\n      })))), __jsx(\"div\", {\n        className: \"col-12\"\n      }), __jsx(\"div\", {\n        className: \"col-md-4\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"country-ship\", {\n        rules: [{\n          required: true,\n          message: \"Please input your Country!\"\n        }]\n      })(__jsx(DebounceInput, {\n        onChange: function onChange(key, value) {\n          var country = key;\n\n          _this3.changeAddress(_objectSpread(_objectSpread({}, addressShip), {}, {\n            country: country\n          }), \"addressShip\");\n        },\n        parentClass: \"c-address-form\",\n        name: \"ship-country\",\n        label: \"Country\"\n      })))), __jsx(\"div\", {\n        className: \"col-md-4\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"state-ship\", {\n        rules: [{\n          required: true,\n          message: \"Please input your state!\"\n        }]\n      })(__jsx(DebounceInput, {\n        onChange: function onChange(key, value) {\n          var state = key;\n\n          _this3.changeAddress(_objectSpread(_objectSpread({}, addressShip), {}, {\n            state: state\n          }), \"addressShip\");\n        },\n        parentClass: \"c-address-form\",\n        name: \"ship-state\",\n        label: \"state\"\n      })))), __jsx(\"div\", {\n        className: \"col-md-4\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"zip-ship\", {\n        rules: [{\n          required: true,\n          message: \"Please input your ZIP code!\"\n        }, {\n          max: 8,\n          message: \"Please input your ZIP code!\"\n        }, {\n          validator: function () {\n            var _validator4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n              var data,\n                  city,\n                  state,\n                  zip_city,\n                  zip_state,\n                  _args4 = arguments;\n              return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                while (1) {\n                  switch (_context4.prev = _context4.next) {\n                    case 0:\n                      _context4.next = 2;\n                      return searchAddress(_args4.length <= 1 ? undefined : _args4[1]);\n\n                    case 2:\n                      data = _context4.sent;\n                      city = _this3.props.form.getFieldValue('city-ship');\n                      state = _this3.props.form.getFieldValue('state-ship');\n                      zip_city = data.data.results[0].address_components[3].long_name;\n                      zip_state = data.data.results[0].address_components[4].long_name;\n                      console.log(data, zip_city, zip_state);\n\n                      if (!(city == zip_city || state == zip_state)) {\n                        _context4.next = 12;\n                        break;\n                      }\n\n                      return _context4.abrupt(\"return\", Promise.resolve());\n\n                    case 12:\n                      return _context4.abrupt(\"return\", Promise.reject('Invalid Zip Code!'));\n\n                    case 13:\n                    case \"end\":\n                      return _context4.stop();\n                  }\n                }\n              }, _callee4);\n            }));\n\n            function validator() {\n              return _validator4.apply(this, arguments);\n            }\n\n            return validator;\n          }()\n        }]\n      })(__jsx(DebounceInput, {\n        onChange: function onChange(key, value) {\n          var zip = key;\n\n          _this3.changeAddress(_objectSpread(_objectSpread({}, addressShip), {}, {\n            zip: zip\n          }), \"addressShip\");\n        },\n        parentClass: \"c-address-form\",\n        name: \"ship-zip\",\n        label: \"ZIP code\"\n      })))), isLogin && __jsx(\"div\", {\n        className: \"col-12\"\n      }, __jsx(Form.Item, null, getFieldDecorator(\"saveaddress_ship\", {\n        valuePropName: \"checked\",\n        initialValue: true\n      })(__jsx(Checkbox, {\n        versions: [\"dark\"]\n      }, \"Save this information for next time\"))))))), this.state.shippingErrMsg && __jsx(\"span\", {\n        style: {\n          color: \"red\"\n        }\n      }, this.state.shippingErrMsg), __jsx(\"div\", {\n        className: \"row\",\n        style: {\n          justifyContent: \"center\"\n        }\n      }, __jsx(Button, {\n        parentClass: \"c-checkout\",\n        theme: \"dark\"\n      }, \"Continue \", loader && __jsx(Spin, {\n        indicator: antIcon\n      })))));\n    }\n  }]);\n\n  return CheckoutInfo;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.user,\n    addresses: state.address && state.address.address || [],\n    state: state,\n    cart: state.cart\n  };\n};\n\nvar mapActionToProps = {\n  showRegBar: showRegBar,\n  getAddress: getAddress,\n  drawerToDisplay: drawerToDisplay\n};\nexport default connect(mapStateToProps, mapActionToProps)(Form.create({\n  name: \"checkoutInfo\"\n})(CheckoutInfo));","map":null,"metadata":{},"sourceType":"module"}