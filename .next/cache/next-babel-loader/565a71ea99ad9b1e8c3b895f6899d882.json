{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineLoop } from \"box-dimension-calculator\";\nimport { addSlugToProduct } from \"./product\";\nimport _ from \"lodash\";\nimport projectSettings from \"../../constants/projectSettings\";\nexport const getItemTotal = item => {\n  if (item) {\n    if (item.saleprice) return parseFloat(item.saleprice) * parseFloat(item.qty);else if (item.regularprice) return parseFloat(item.regularprice) * parseFloat(item.qty);\n  }\n\n  return 0;\n};\nexport const returnSubTotal = items => {\n  // amount =\n  return items.map(el => {\n    if (el) {\n      if (el.saleprice) {\n        if (el.subscribed) {\n          const totalPrice = parseFloat(el.saleprice) * parseFloat(el.qty);\n          const disc = totalPrice * el.subscribedDiscountPersent / 100;\n          return parseFloat(totalPrice) - parseFloat(disc);\n        } else {\n          return parseFloat(el.saleprice) * parseFloat(el.qty);\n        }\n      } else if (el.regularprice) if (el.subscribed) {\n        const totalPrice = parseFloat(el.regularprice) * parseFloat(el.qty);\n        const disc = totalPrice * el.subscribedDiscountPersent / 100;\n        return parseFloat(totalPrice) - parseFloat(disc);\n      } else {\n        return parseFloat(el.regularprice) * parseFloat(el.qty);\n      }\n    }\n\n    return 0;\n  }).reduce((a, b) => a + b, 0);\n};\nexport const returnUnSubscribeTotal = items => {\n  return items.filter(el => !el.subscribed).map(el => {\n    if (el) {\n      if (el.saleprice) return parseFloat(el.saleprice) * parseFloat(el.qty);else if (el.regularprice) return parseFloat(el.regularprice) * parseFloat(el.qty);\n    }\n\n    return 0;\n  }).reduce((a, b) => a + b, 0);\n};\nexport const getTotalWeight = items => {\n  return items.filter(el => el.weight).map(el => el.weight * parseFloat(el.qty)).reduce((a, b) => a + b, 0);\n};\nexport const getTotalVolume = items => {\n  // return items\n  //   .filter(el => el.shipping_height && el.shipping_length && el.shipping_width)\n  //   .map(el => el.shipping_height * el.shipping_length * el.shipping_width)\n  //   .reduce((a, b) => a + b, 0);\n  return items.filter(el => el.volume).map(el => el.volume * parseFloat(el.qty)).reduce((a, b) => a + b, 0);\n};\nexport const getTotalVariation = item => {\n  if (!item.attributes) return [];\n  return item.attributes.map(el => el ? el.names : null).filter(el => el);\n};\nexport const variablePriceSet = productItem => {\n  if (productItem) {\n    let tempVariable = _objectSpread({}, productItem);\n\n    if (productItem.producttype === \"variable\") {\n      // if (productItem.size && productItem.extract_flavor) {\n      const notNullVariation = productItem.variation.filter(el => el !== null);\n      productItem.attributes.filter(el => el !== null).map(el => el.names);\n      const varCheck = productItem.attributes.filter(el => el !== null).map(attr => {\n        return {\n          key: attr.names,\n          value: productItem[attr.names] ? productItem[attr.names].value : productItem[attr.names]\n        };\n      });\n      let matchedVariable = null;\n\n      if (!varCheck.some(vEl => vEl.value === null || vEl.value === undefined)) {\n        matchedVariable = notNullVariation.find(varEl => {\n          let matchArr = [];\n          varCheck.map(vEl => {\n            matchArr.push(varEl[vEl.key] === vEl.value);\n            return null;\n          });\n          return !matchArr.includes(false);\n        });\n\n        if (matchedVariable) {\n          tempVariable = _objectSpread(_objectSpread({}, productItem), {}, {\n            regularprice: matchedVariable.regular_price,\n            saleprice: matchedVariable.sale_price\n          });\n        } else {\n          tempVariable = _objectSpread(_objectSpread({}, productItem), {}, {\n            regularprice: productItem.dregularprice,\n            saleprice: productItem.dsaleprice\n          });\n        }\n      }\n    } else {\n      if (productItem.producttype === \"simple\" || productItem.combo) {\n        tempVariable = _objectSpread(_objectSpread({}, productItem), {}, {\n          regularprice: productItem.dregularprice,\n          saleprice: productItem.dsaleprice\n        });\n      }\n    }\n\n    return tempVariable;\n  }\n};\nexport const changeCartItemVariation = (varValue, names, item, indexingNo, list) => {\n  if (names === \"qty\") {\n    return {\n      approve: false,\n      update: {\n        oldItem: item,\n        newItem: _objectSpread(_objectSpread({}, item), {}, {\n          [names]: varValue\n        }),\n        remove: null\n      }\n    };\n  } else {\n    const totalVariation = getTotalVariation(item);\n    const foundItem = list.find((el, index) => {\n      const innerFlag = totalVariation.map(varEl => {\n        if (el[varEl]) {\n          if (varEl === names) {\n            return el[varEl].value === varValue.value;\n          }\n\n          return el[varEl].value === item[varEl].value;\n        } else {\n          return null;\n        }\n      }).filter(el => el !== null);\n      return el.productid._id === item.productid._id && innerFlag.every(el => el) && index !== indexingNo;\n    });\n\n    if (foundItem !== undefined && foundItem !== null) {\n      const totalQty = parseInt(foundItem.qty) + parseInt(item.qty);\n      const qty = totalQty;\n\n      if (item.subscribed || foundItem.subscribed) {\n        return {\n          approve: true,\n          update: {\n            oldItem: foundItem,\n            newItem: _objectSpread(_objectSpread({}, foundItem), {}, {\n              [names]: varValue,\n              qty,\n              subscribed: true,\n              subscribedDiscountPersent: item.subscribedDiscountPersent,\n              subscribedTime: item.subscribedTime\n            }),\n            remove: item\n          }\n        };\n      } else {\n        return {\n          approve: false,\n          update: {\n            oldItem: foundItem,\n            newItem: _objectSpread(_objectSpread({}, foundItem), {}, {\n              [names]: varValue,\n              qty\n            }),\n            remove: item\n          }\n        };\n      }\n    } else {\n      return {\n        approve: false,\n        update: {\n          oldItem: item,\n          newItem: _objectSpread(_objectSpread({}, item), {}, {\n            [names]: varValue\n          }),\n          remove: null\n        }\n      };\n    }\n  }\n};\nexport const verifyProduct = (productItem, items = []) => {\n  const totalVariation = getTotalVariation(productItem);\n  const foundItem = items.find(el => {\n    const innerFlag = totalVariation.map(varEl => {\n      if (el[varEl]) {\n        return el[varEl].value === productItem[varEl].value;\n      } else {\n        return null;\n      }\n    }).filter(el => el !== null).every(el => el);\n    if (!innerFlag) return innerFlag;\n    if (el.combo && productItem.combo) return el._id === productItem._id;\n    if (el.combo) return el._id === productItem.productid._id;\n    if (productItem.combo) return el.productid._id === productItem._id;\n    return el.productid._id === productItem.productid._id;\n  });\n\n  if (foundItem !== undefined && foundItem !== null) {\n    const totalQty = parseInt(foundItem.qty) + parseInt(productItem.qty);\n    const qty = totalQty;\n\n    const tempNewItem = _objectSpread(_objectSpread({}, foundItem), {}, {\n      subscribed: productItem.subscribed\n    });\n\n    if (productItem.subscribed) {\n      const {\n        subscribed,\n        subscribedDiscountPersent,\n        subscribedTime\n      } = productItem;\n      return {\n        found: foundItem,\n        item: _objectSpread(_objectSpread({}, foundItem), {}, {\n          qty: qty,\n          subscribed,\n          subscribedDiscountPersent,\n          subscribedTime\n        })\n      };\n    } else if (foundItem.subscribed) {\n      const {\n        subscribedDiscountPersent,\n        subscribedTime\n      } = tempNewItem,\n            newItem = _objectWithoutProperties(tempNewItem, [\"subscribedDiscountPersent\", \"subscribedTime\"]);\n\n      return {\n        found: foundItem,\n        item: _objectSpread({}, newItem)\n      };\n    }\n\n    return {\n      found: foundItem,\n      item: _objectSpread(_objectSpread({}, foundItem), {}, {\n        qty: qty,\n        subscribed: productItem.subscribed\n      })\n    };\n  }\n\n  return {\n    found: null,\n    item: _objectSpread({}, productItem)\n  };\n};\nexport const addItem = (state, newItem) => {\n  const {\n    found,\n    item\n  } = verifyProduct(newItem, state.items);\n\n  if (found) {\n    return modifyProduct(found, item, state);\n  }\n\n  const newItems = [...state.items, newItem];\n  return _objectSpread(_objectSpread({}, state), {}, {\n    items: newItems,\n    subTotal: returnSubTotal(newItems) || 0,\n    unSubscribeProductAmount: returnUnSubscribeTotal(newItems) || 0,\n    totalWeight: getTotalWeight(newItems),\n    totalVolume: getTotalVolume(newItems)\n  });\n};\nexport const setSlugInCart = cart => {\n  return _objectSpread(_objectSpread({}, cart), {}, {\n    items: cart.items ? cart.items.map(el => addSlugToProduct(el)) : []\n  });\n};\nexport const modifyProduct = (oldItem, newItem, state) => {\n  const NewItems = state.items.map(el => {\n    if (el._id === newItem._id) {\n      if (el === oldItem) {\n        return variablePriceSet(newItem);\n      }\n    }\n\n    return el;\n  });\n\n  if (oldItem !== newItem) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      items: [...NewItems],\n      subTotal: returnSubTotal(NewItems) || 0,\n      unSubscribeProductAmount: returnUnSubscribeTotal(NewItems) || 0,\n      totalWeight: getTotalWeight(NewItems),\n      totalVolume: getTotalVolume(NewItems),\n      taxCouponDiscount: NewItems.length === 0 ? 0 : state.taxCouponDiscount,\n      taxCouponCode: NewItems.length === 0 ? 0 : state.taxCouponCode\n    });\n  }\n\n  return state;\n};\nexport const removeItem = (state, item) => {\n  console.log(state);\n  const newItems = [...state.items.filter(el => el !== item)];\n  return _objectSpread(_objectSpread({}, state), {}, {\n    items: newItems,\n    subTotal: returnSubTotal(newItems) || 0,\n    unSubscribeProductAmount: returnUnSubscribeTotal(newItems) || 0,\n    totalWeight: getTotalWeight(newItems),\n    totalVolume: getTotalVolume(newItems),\n    taxCouponDiscount: newItems.length === 0 ? 0 : state.taxCouponDiscount,\n    taxCouponCode: newItems.length === 0 ? 0 : state.taxCouponCode\n  });\n};\nexport const getItemsHeightWidth = items => {\n  var height = 0;\n  var width = 0;\n  var length = 0;\n  var weight = 0;\n\n  function flatten(arr) {\n    return arr.reduce(function (flat, toFlatten) {\n      return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);\n    }, []);\n  }\n\n  const item = flatten(items.map(el => {\n    const qty = el.qty ? parseInt(el.qty) : 1;\n    if (qty > 1) return new Array(qty).fill(el);\n    return el;\n  }));\n\n  const getGreater = (a, b) => {\n    if (a > b) return a;\n    return b;\n  };\n\n  if (item.length > 0) {\n    item.forEach(itm => {\n      weight = weight + itm.weight;\n    });\n  }\n\n  const itemsB = items.map(el => ({\n    h: el.shipping_height,\n    l: el.shipping_length,\n    w: el.shipping_width,\n    qty: el.qty\n  }));\n  const itemsC = [].concat.apply([], itemsB);\n  const itemsC1 = itemsC.map(el => new Array(el.qty).fill(el)).flat();\n  const itemsD = combineLoop(itemsC1)[0];\n  return {\n    height: itemsD.h,\n    width: itemsD.w,\n    length: itemsD.l,\n    weight\n  };\n};\nexport const filterShippingRates = rateArr => {\n  if (rateArr.length > 0) {\n    const filteredRates = _.uniqBy(rateArr, function (e) {\n      return e.service;\n    });\n\n    const smallSorted = filteredRates.sort((a, b) => parseFloat(a.rate || 0) - parseFloat(b.rate || 0));\n    const Smallest = smallSorted[0];\n    const Smallest1 = smallSorted[1];\n    const Smallest2 = smallSorted[2];\n    const PriorityRaw = filteredRates.find(el => el.service === \"Priority\");\n    const ExpressRaw = filteredRates.find(el => el.service === \"Express\");\n    const {\n      shippingExtraRate\n    } = projectSettings;\n\n    const standard = Smallest && _objectSpread(_objectSpread({}, Smallest), {}, {\n      customName: \"Standard\",\n      customRate: parseFloat(Smallest.rate) + shippingExtraRate\n    });\n\n    const Priority = Smallest1 && _objectSpread(_objectSpread({}, Smallest1), {}, {\n      customName: \"Priority\",\n      customRate: parseFloat(Smallest1.rate) + shippingExtraRate\n    });\n\n    const Express = Smallest2 && _objectSpread(_objectSpread({}, Smallest2), {}, {\n      customName: \"Express\",\n      customRate: parseFloat(Smallest2.rate) + shippingExtraRate\n    });\n\n    return [standard, Priority, Express].filter(el => el);\n  }\n\n  return rateArr;\n}; // --------------------------\n\nconst multiply = (a, b) => {\n  return parseFloat(a) * parseFloat(b);\n};\n\nconst getSelectedAttributes = item => {\n  if (item.producttype === \"variable\") return item.attributes.map(el => ({\n    [el.names]: item[el.names].value\n  })).filter(el => el).reduce((a, b) => _objectSpread(_objectSpread({}, a), b), {});\n  return null;\n};\n\nconst getDiscount = (discount, subTotal) => {\n  return discount * subTotal / 100 || 0;\n};\n\nconst removeEmpty = obj => {\n  Object.keys(obj).forEach(key => obj[key] === null && delete obj[key]);\n};\n\nconst parseOrderProduct = item => {\n  const isCombo = item.combo ? true : false,\n        comboId = item.combo ? item._id : null,\n        productId = item.combo ? null : item.productid._id,\n        productMeta = item.combo ? null : item._id,\n        isSubscribed = item.subscribed ? true : false,\n        subscriptionMeta = item.subscribed ? {\n    duration: item.subscribedTime\n  } : null,\n        itemId = item._id,\n        _id = item._id,\n        qty = item.qty,\n        title = item.combo ? item.title : item.productid.producttitle,\n        unitPrice = item.saleprice ? item.saleprice : item.regularprice,\n        subTotal = item.saleprice ? multiply(item.saleprice, item.qty) : multiply(item.regularprice, item.qty),\n        attribute = getSelectedAttributes(item),\n        height = item.shipping_height,\n        width = item.shipping_width,\n        length = item.shipping_length,\n        volume = item.volume,\n        weight = item.weight;\n  const order = {\n    isCombo,\n    comboId,\n    productId,\n    productMeta,\n    isSubscribed,\n    subscriptionMeta,\n    itemId,\n    _id,\n    qty,\n    unitPrice,\n    subTotal,\n    attribute,\n    width,\n    length,\n    height,\n    title,\n    volume,\n    weight\n  };\n  removeEmpty(order);\n  return order;\n};\n\nconst getHeightWeight = items => {\n  const height = items.map(el => el.height * parseFloat(el.qty));\n  const width = items.map(el => el.width * parseFloat(el.qty));\n  const length = items.map(el => el.length * parseFloat(el.qty));\n  const shape = {\n    height: height.reduce((a, b) => a + b, 0),\n    width: width.reduce((a, b) => a + b, 0),\n    length: length.reduce((a, b) => a + b, 0)\n  };\n  return shape;\n};\n\nexport const getGrandTotal = (subTotal, taxPercent, shippingCharge, discount) => {\n  const amountWithTax = subTotal + (taxPercent || 0) * subTotal + shippingCharge;\n  const discountAmount = getDiscount(discount, subTotal);\n  const total = parseFloat(amountWithTax || 0) - parseFloat(discountAmount || 0);\n  return parseFloat(total.toFixed(2));\n};\nexport const generateOrderObj = ({\n  stateObj,\n  referralId,\n  cart,\n  user,\n  confirmShipRes\n}) => {\n  const {\n    service\n  } = confirmShipRes,\n        confirmRest = _objectWithoutProperties(confirmShipRes, [\"service\"]);\n\n  const {\n    paymentMethod,\n    address,\n    billingAddress\n  } = stateObj;\n\n  const {\n    addressStr\n  } = address,\n        addressRest = _objectWithoutProperties(address, [\"addressStr\"]);\n\n  const {\n    addressStr: billingAddressStr\n  } = billingAddress,\n        billingAddressRest = _objectWithoutProperties(billingAddress, [\"addressStr\"]);\n\n  const {\n    items,\n    shippingCharge,\n    subTotal,\n    totalWeight,\n    totalVolume,\n    taxValue,\n    taxPercent,\n    taxCouponDiscount,\n    taxCouponCode\n  } = cart;\n  const orderProducts = items.map(el => parseOrderProduct(el));\n  const {\n    height: totalHeight,\n    length: totalLength,\n    width: totalWidth\n  } = getHeightWeight(orderProducts);\n\n  const order = _objectSpread({\n    totalVolume,\n    totalWeight,\n    shippingMethod: service,\n    products: orderProducts,\n    countryTax: (taxPercent || 0) * 100,\n    taxAmount: taxValue || parseFloat(cart.subTotal || 0) * parseFloat(taxPercent || 0) || 0,\n    shippingCharge,\n    userDetails: _objectSpread({\n      address: addressStr\n    }, addressRest),\n    billingAddress: _objectSpread({\n      address: billingAddressStr\n    }, billingAddressRest),\n    orderStatus: projectSettings.defaultOrderStatus,\n    paymentMethod: paymentMethod === \"stripe\" ? \"Authorize\" : paymentMethod,\n    status: projectSettings.defaultStatusInOrder,\n    wholeSubtotal: parseFloat(subTotal.toFixed(2)),\n    wasReferred: referralId ? true : false,\n    referral: referralId ? referralId : null,\n    isCoupon: taxCouponCode ? true : false,\n    couponId: taxCouponCode,\n    couponDisc: taxCouponCode ? taxCouponDiscount : null,\n    grandTotal: getGrandTotal(subTotal, taxPercent, shippingCharge, taxCouponDiscount),\n    isGuest: user._id ? false : true,\n    userId: user._id ? user._id : null,\n    userMetaId: user.userMetaId ? user.userMetaId : null,\n    totalHeight,\n    totalWidth,\n    totalLength,\n    refPercentage: projectSettings.referralPresent\n  }, confirmRest);\n\n  removeEmpty(order);\n  return order;\n};","map":null,"metadata":{},"sourceType":"module"}